using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
//using System.Data.SqlClient;
using Word = Microsoft.Office.Interop.Word;
using Excel = Microsoft.Office.Interop.Excel;

//using Oracle.DataAccess.Client;
//using Oracle.DataAccess.Types;
using System.IO;
using System.Security.Cryptography;
using System.Reflection;
using System.Net;
using System.Web;
using System.Collections;
using System.Collections.Specialized;
using Office = Microsoft.Office.Core;
using Microsoft.Office.Core;
using Microsoft.Office.Tools.Ribbon;
using System.Runtime.Serialization.Json;
using System.Runtime.Serialization;
using Antlr4.Parser;
using OfficeTools.Common;

//using Newtonsoft.Json;
//using Newtonsoft.Json.Linq;
using System.Data.OleDb;

using System.Text.RegularExpressions;
using OfficeAssist.Properties;
using OfficeAssist.localdbDataSetTableAdapters;
using System.Globalization;


//using VSTOWORD= Microsoft.Office.Tools.Word;
// using System.Web.Script.Serialization.JavaScriptSerializer;


// 
// 2016-01-05, author: lidong
// 
// @TODO
// 1. cover user defined content controls in general uniform management ?
// 2. hide ref to medium calc only
// 3. how to disable user self-modify pattern of locked content control? 
// 4. how to update info in real time?
// 5. set RED color of invalid/error rel in tree nodes
// 0. 区分用户、具体文档和数据库设计
// 1. 同类的问题进行合并，使用树形或超链接文字的形式提供访问链接(web或类似控件)
// 2. 翻页
// 3. 查找
// 4. 导出报告（能同步访问到指定文档和位置吗？）
// 5. 统计
// 6. 多文档检查及报告
// 7. enhanced organizational chart should support abnormal structure
//    e.g. bold and short paragraph maybe a kind of heading.
// 8. form should support all kind of content controls
// 9. enhance organ should support upgrade and downgrade.
// 10.refactor checkdoc including range.goto and removing database instead of hash
// 11.refactor thisaddin which the name cannot be changed, must new addin project and move into it.
// 12.use Tool.Word to create content control to stop cancel lock?
// 13.how to make the panel dock on left of documents window?
// 14.function editor like EXCEL's
// 15.in form, how to know which is to need input other is lock(unwritable)
// 16.check rules: 同级的样式不同，同级下级样式不同，各种级别的样式有多少种差异
// 17.关联变量名要约束适应解析器要求，不能乱写
// 18.REL support other kind of content control like datetimepicker,combox,droplist... ??
// 19.how to support many documents with this addin?
// 20.Refactor tree find function into 1 common class or functions
// 21.Refactor many classes for every table page
// 22.how to preview shared files of common lib and private lib?
// 23.
// 24.文档检查：存在有标题级别但没有内容的段落.
// 25.

namespace OfficeAssist
{
    public partial class OperationPanel : UserControl
    {
//         private readonly String m_strHeader4ContentControl = "点击此处输入";
//         private readonly String m_strVersion4ContentControl = "1.0";
//         private readonly String m_strRelTag = "REL";
//         private readonly String m_strRelVersion = "1.0";

        private readonly String m_strRelTag = "REL";// Rel关联的特征标记
        private readonly String m_strRelVersion = "1.0"; // Rel关联的特征版本

        private readonly String m_strRelName = "RELNAME"; // // Rel关联的特征域名
        private readonly String m_strRelType = "RELTYPE"; // 1:def, 2:exp, 3:ref
        private readonly String m_strRelExp = "RELEXP"; // exp
        private readonly String m_strRelDataType = "RELDATATYPE"; // number, datetime, string,...
        private readonly String m_strRelFormat = "RELFORMAT"; // format

        private readonly int m_nRelMaxNameLen = 60; // 最大的变量名称值

        private ThisAddIn m_addin = null; // 所属插件对象


        private Boolean m_bInitedDatabase = false;
        private Boolean m_bLoadedHeadingSn = false;
        private Boolean m_bLoadedHeadingStyle = false;

        private readonly String m_strFormKey = "FORMKEY";
        private readonly String m_strFormValue = "FORMDESIGN";
        private readonly String m_strFormNameKey = "FORMNAME";
        private readonly String m_strFormResKey = "FORMRES"; // resources
        private readonly String m_strFormPassKey = "FORMPASS";

        // private readonly String m_strDocCustomKey = "FormResName";

        private readonly String m_strFormFontLockKey = "FontLock";
        private readonly String m_strFormParaFmtLockKey = "ParaFmtLock";
        private readonly String m_strFormContentLockKey = "ContentLock";

        private readonly String m_strFormContentBodyKey = "ContentBody";

        private ClassDocDbMgr m_docCustomItemsMgr = new ClassDocDbMgr();
        private TreeNode m_trFormRecordNd = null;


        /// <summary>
        /// 初始化函数
        /// </summary>
        public OperationPanel() 
        {
            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[111] OperationPanel,BEFORE InitializeComponent");
            }

            InitializeComponent(); // 初始化控件

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[118] OperationPanel,AFTER InitializeComponent");
            }

            //RefreshData();

            m_varsNetWork.SetAllVarsHash(m_varsHash); // 传递变量表
        }

        /// <summary>
        /// 各树节点的常规名称
        /// </summary>
        private readonly String m_strRelDefNodeName = "常规";
        private readonly String m_strRelCalcNodeName = "运算";

        private readonly String m_strHeadingSnPreBuiltIn = "预置";
        private readonly String m_strHeadingSnUserDefine = "自定义";

        private readonly String m_strHeadingStylePreBuiltIn = "预置";
        private readonly String m_strHeadingStyleUserDefine = "自定义";

        private TreeNode m_trndHeadingSnPreBuiltIn = null, m_trndHeadingSnUserDefine = null;
        private TreeNode m_trndHeadingStylePreBuiltIn = null, m_trndHeadingStyleUserDefine = null;


        private int m_nMaxListLevelSchemeCount = 50; // 最大的ListLevel方案个数

        // 数据库操作类
        private tblListLevelSchemesTableAdapter m_tblListLevelSchemesAdpter = null;
        private tblListLevelTableAdapter            m_tblListLevelAdpter = null;
        private tblUniformStyleHistoryDocsTableAdapter m_tblUniformStyleHistoryDocsAdpter = null;
        // 通用工具处理类
        private ClassOfficeCommon m_commonTools = new ClassOfficeCommon();
        private ClassVarsNetWork m_varsNetWork = new ClassVarsNetWork();
        private CRelTreeNodeComparer m_RelTreeNodeComparer = new CRelTreeNodeComparer();
        private ClassShareLibTreeNodeComparer m_ShareLibTreeNodeComparer = new ClassShareLibTreeNodeComparer();

        String m_strLocalPath = "";
        // DB的URL
        String m_strShareDbUrl = "User Id=standardDoc;Password=standardDoc123;Data Source=ORCL214";
        // temp目录地址
        String m_strShareTempFileUrl = @"d:\\users\\temp\\";


        // heading sn
        ClassListLevel[] m_defaultListLevels = new ClassListLevel[9];
        ClassListLevel[] m_curListLevels = new ClassListLevel[9];
        // 文本位置的不同级虽
        float[] m_fTextPositions = new float[] { 0.76f, 1.02f, 1.27f, 1.52f, 1.78f, 2.03f, 2.29f, 2.54f, 2.79f };
        int m_nCurSelLevelIndex = -1;
        TreeNode m_trndCurSchemeNode = null;
        // 各个hash表
        Hashtable m_hashIndex2ListStyle = new Hashtable();
        Hashtable m_hashListStyle2Index = new Hashtable();
        Hashtable m_hashStyle2Name = new Hashtable();

        Hashtable m_hashMultiSelIndex2ListStyle = new Hashtable();
        Hashtable m_hashSnParaNumberStyle = new Hashtable();

        ArrayList m_arrColorNames = new ArrayList();
        Hashtable m_hashName2Color = new Hashtable();
        Hashtable m_hashCmbColorIndex2HighlightIndex = new Hashtable();

        // heading styles
        ClassHeadingStyle[] m_curHeadingStyles = new ClassHeadingStyle[10];
        ClassHeadingStyle[] m_defaultHeadingStyles = new ClassHeadingStyle[10];

        int m_nCurHStyleSelLevelIndex = -1;

        // 各个选项的保留变量
        private Boolean m_bScopeAllDoc = true;
        private Boolean m_bIgnoreToc = true;
        private Boolean m_bIgnoreTable = true;
        private Boolean m_bIgnorePages = false;
        private uint m_nIgnoredPages = 1;
        private Boolean m_bIgnoreHeadings = false;
        private Boolean m_bIgnoreTextBody = true;
        private Boolean m_bIgnoreFont = false;
        private Boolean m_bIgnoreParaFmt = false;
        // 进度的退出机制控制
        private Boolean m_bExitHeadingSnApply = false;
        private Boolean m_bExitHeadingStyleApply = false;
        private Boolean m_bExitUnitFormApply = false;

        private Boolean m_bInitedMultiTiZhuPage = false;


        /// <summary>
        /// 设置配置地址
        /// </summary>
        /// <param name="dbUrl"></param>
        /// <param name="tempLoc"></param>
        public void setShareConfig(String dbUrl, String tempLoc)
        {
            m_strShareDbUrl = dbUrl;
            m_strShareTempFileUrl = tempLoc;
        }

        // http处理对象
        ShareContributorOper m_scOper;

        /// <summary>
        /// 设置HTTP处理对象
        /// </summary>
        /// <param name="scOper"></param>
        public void SetScOper(ShareContributorOper scOper)
        {
            m_scOper = scOper;
        }
        // 当前活动的内容控件
        public Word.ContentControl m_curActiveCnt = null;
        // 当前文档
        private Word.Document  m_curDoc = null;
        // 内容控制的hash表
        public Hashtable m_hashControls = new Hashtable();
        // public Hashtable m_hashKeyControls = new Hashtable();

//         private ColorComboBox m_IncludeColorBox = new ColorComboBox();
//         private ColorComboBox m_ExcludeColorBox = new ColorComboBox();

        private void initColorCombox()
        {
            // Color Indexs
            // Color.FromArgb
            String strColorName = "";
            int nColorIndex = -1;

            strColorName = "白色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.White/*Color.FromArgb(255, 255, 255)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdWhite);

            strColorName = "黄色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Yellow/*Color.FromArgb(255, 255, 0)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdYellow);

            strColorName = "亮绿";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.FromArgb(0, 255, 0));
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdBrightGreen);

            strColorName = "青绿";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Turquoise/*Color.FromArgb(0, 255, 255)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdTurquoise);


            strColorName = "粉红";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.FromArgb(255, 0, 255));
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdPink);


            strColorName = "蓝色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Blue/*Color.FromArgb(0, 0, 255)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdBlue);


            strColorName = "红色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Red/*Color.FromArgb(255, 0, 0)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdRed);


            strColorName = "深蓝";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.DarkBlue/*Color.FromArgb(0, 0, 128)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdDarkBlue);


            strColorName = "青色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Teal/*Color.FromArgb(0, 128, 128)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdTeal);

            strColorName = "绿色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Green/*Color.FromArgb(0, 128, 0)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdGreen);

            strColorName = "紫罗兰";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.FromArgb(128, 0, 128));
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdViolet);

            strColorName = "深红";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.DarkRed/*Color.FromArgb(128, 0, 0)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdDarkRed);


            strColorName = "深黄";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.FromArgb(128, 128, 0));
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdDarkYellow);


            strColorName = "灰色-50%";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Gray/*Color.FromArgb(128, 128, 128)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdGray50);

            strColorName = "灰色-25%";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.FromArgb(192, 192, 192));
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdGray25);

            strColorName = "黑色";
            nColorIndex++;
            m_arrColorNames.Add(strColorName);
            m_hashName2Color.Add(strColorName, Color.Black/*Color.FromArgb(0, 0, 0)*/);
            m_hashCmbColorIndex2HighlightIndex.Add(nColorIndex, Word.WdColorIndex.wdBlack);

            return;
        }


        private void InitHeadingSnAndStyleDatabase()
        {
            if (m_bInitedDatabase)
            {
                return;
            }

            m_addin.InitDataBase();

            // 设置数据库适配器
            m_tblListLevelSchemesAdpter = m_addin.m_tblAdapterMgr.tblListLevelSchemesTableAdapter;
            m_tblListLevelAdpter = m_addin.m_tblAdapterMgr.tblListLevelTableAdapter;
            m_tblUniformStyleHistoryDocsAdpter = m_addin.m_tblAdapterMgr.tblUniformStyleHistoryDocsTableAdapter;

            m_bInitedDatabase = true;

            return;
        }


        protected override void OnCreateControl() // 创建控件UI时初始化
        {
            m_addin = Globals.ThisAddIn;// this addin记录

            try
            {
            	m_curDoc = m_addin.Application.ActiveDocument;// 赋当前文档
            }
            catch (System.Exception ex)
            {
                return ;
            }
            finally
            {
            }

            if (m_curDoc == null)
                return;

            m_docCustomItemsMgr.bindDoc(m_curDoc);


            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[361] OnCreateControl,BEFORE register event functions");
            }


            // 设置各个相应的事件函数
            m_curDoc.ContentControlOnEnter += new Word.DocumentEvents2_ContentControlOnEnterEventHandler(m_curDoc_ContentControlOnEnter);
            m_curDoc.ContentControlOnExit += new Word.DocumentEvents2_ContentControlOnExitEventHandler(m_curDoc_ContentControlOnExit);
            m_curDoc.ContentControlBeforeContentUpdate += new Word.DocumentEvents2_ContentControlBeforeContentUpdateEventHandler(m_curDoc_ContentControlBeforeContentUpdate);
            m_curDoc.ContentControlBeforeDelete += new Word.DocumentEvents2_ContentControlBeforeDeleteEventHandler(m_curDoc_ContentControlBeforeDelete);
            m_curDoc.ContentControlAfterAdd += new Word.DocumentEvents2_ContentControlAfterAddEventHandler(m_curDoc_ContentControlAfterAdd);
            m_curDoc.ContentControlBeforeStoreUpdate += new Word.DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler(m_curDoc_ContentControlBeforeStoreUpdate);

            m_curDoc.New += new Word.DocumentEvents2_NewEventHandler(m_curDoc_New);
            m_curDoc.Open += new Word.DocumentEvents2_OpenEventHandler(m_curDoc_Open);

            ((Word.DocumentEvents2_Event)m_curDoc).Close += new Word.DocumentEvents2_CloseEventHandler(m_curDoc_Close);

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[380] OnCreateControl,AFTER register event functions");
            }

            // 根据版本设置
            ///////////////////////////

            TabControl.TabPageCollection tpagColl = tabCtrl.TabPages;

            tpagColl.Clear();

#if RELVER
            tpagColl.Add(tabPageShare);
            tpagColl.Add(tabPageHeadingSn);
            tpagColl.Add(tabPageHeadingStyles);
            tpagColl.Add(tabPageUnitedStyle);

            // tpagColl.Add(tabPageCheck);
            // tpagColl.Add(tabPageOrganize);
            tpagColl.Add(tabPageMultiSel);
            tpagColl.Add(tabPageMultiTiZhu);
            tpagColl.Add(tabPageObjNav);

            tpagColl.Add(tabPageDataTrans);
            tpagColl.Add(tabPageFillGather);
            tpagColl.Add(tabPageRel);
            tpagColl.Add(tabPageCompare);
            tpagColl.Add(tabPageCntList);
            // tpagColl.Add(tabPageForm);
            tpagColl.Add(tabPageNumTrans);
            tpagColl.Add(tabPageInfo);

#endif

#if RELVER20
            tpagColl.Add(tabPageFormDesign);

            // tpagColl.Add(tabPageVersion);
            // tpagColl.Add(tabPageHelp);
            // tpagColl.Add(tabPagePublish);
            // tpagColl.Add(tabPagePendingTasks);
            // tpagColl.Add(tabPageStatistic);
           
#endif

#if TEST
            tpagColl.Add(tabPageTEST);
#endif            

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[425] OnCreateControl,AFTER load TabPages");
            }


            initCommonPreivewBase();

            ///////////////////////
            initColorCombox();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[434] OnCreateControl,AFTER initColorCombox");
            }


            initMultiObjNavPage();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[442] OnCreateControl,AFTER initMultiObjNavPage");
            }

            // initOrganizePage();//初始化结构页面
            initMultiSelPage();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[450] OnCreateControl,AFTER initMultiSelPage");
            }


            //// 设置数据库适配器
            //m_tblListLevelSchemesAdpter = m_addin.m_tblAdapterMgr.tblListLevelSchemesTableAdapter;
            //m_tblListLevelAdpter = m_addin.m_tblAdapterMgr.tblListLevelTableAdapter;
            //m_tblUniformStyleHistoryDocsAdpter = m_addin.m_tblAdapterMgr.tblUniformStyleHistoryDocsTableAdapter;

            String strMD5 = "";

            // Task pane controls
            foreach (Control ctrl in this.Controls) // 遍历各个控件
            {
                if (ctrl is TabControl)
                {
                    m_hashControls.Add(ctrl.Name,ctrl);

                    foreach (Control chCtrl in ctrl.Controls)
                    {
                        m_hashControls.Add(chCtrl.Name, chCtrl);
                    }
                }

                // getAllControls(ctrl, ref m_hashControls);
                // getLicControls(ctrl, ref m_hashKeyControls);
            }
           
            // Right menu
            ToolStripItemCollection menuItems = cxtMenuSvr.Items; 
            foreach (ToolStripItem item in menuItems) // 遍历右键菜单项
            {
                m_hashControls.Add(item.Name, item);
                // m_addin.m_hashDefaultPermission[item.Name] = 0;

                //strMD5 = ClassEncryptUtils.MD5Encrypt(item.Name);
                //m_hashKeyControls[strMD5] = item;
            }

            //add ribbon button/control into hash controls
            m_hashControls.Add(Globals.Ribbons.Ribbon1.RibbtnRegister.Name,Globals.Ribbons.Ribbon1.RibbtnRegister);
            foreach (RibbonGroup ribGroup in Globals.Ribbons.Ribbon1.tab1.Groups) // 遍历Ribbon项目
            {
                m_hashControls.Add(ribGroup.Name, ribGroup);

                /*
                foreach (RibbonControl ribCtrl in ribGroup.Items)
                {
                    m_hashControls.Add(ribCtrl.Name, ribCtrl);
                    //m_addin.m_hashDefaultPermission[ribCtrl.Name] = 0;

                    //strMD5 = ClassEncryptUtils.MD5Encrypt(ribCtrl.Name);
                    //m_hashKeyControls[strMD5] = ribCtrl;

                    if (ribCtrl is RibbonBox)
                    {
                        RibbonBox ribBox = (RibbonBox)ribCtrl;
                        //m_hashControls.Add(ribBox.Name, ribBox);

                        foreach (RibbonControl subCtrl in ribBox.Items)
                        {
                            m_hashControls.Add(subCtrl.Name, subCtrl);
                            //m_addin.m_hashDefaultPermission[subCtrl.Name] = 0;

                            //strMD5 = ClassEncryptUtils.MD5Encrypt(subCtrl.Name);
                            //m_hashKeyControls[strMD5] = subCtrl;

                            if (subCtrl is RibbonBox)
                            {
                                RibbonBox ribBox2 = (RibbonBox)subCtrl;
                                // m_hashControls.Add(ribBox2.Name, ribBox2);

                                foreach (RibbonControl subCtrl2 in ribBox2.Items)
                                {
                                    m_hashControls.Add(subCtrl2.Name, subCtrl2);
                                    //m_addin.m_hashDefaultPermission[subCtrl2.Name] = 0;

                                    //strMD5 = ClassEncryptUtils.MD5Encrypt(subCtrl2.Name);
                                    //m_hashKeyControls[strMD5] = subCtrl2;
                                }
                            }
                            
                        }
                    }
                }*/
               
            }

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[554] OnCreateControl,AFTER get hashcontrols");
            }



            m_tvRel.TreeViewNodeSorter = m_RelTreeNodeComparer; // 设置排序函数
            m_tvRel.Sorted = true;

            tvShareLib.TreeViewNodeSorter = m_ShareLibTreeNodeComparer; // 设置排序函数
            tvShareLib.Sorted = true;

            //if (m_addin.searchPermission("tabPageShare") != 0)
            //{
            refreshMyComputerFolders(); // 初始化我的电脑的目录
            //}
            
            TreeNode[] commonNd = tvShareLib.Nodes.Find("公共库", false); // 记录特定名称的TreeNode
            TreeNode[] privNd = tvShareLib.Nodes.Find("个人库", false); // 记录特定名称的TreeNode

            if (commonNd.GetLength(0) == 1)
            {
                commonNd[0].ImageIndex = commonNd[0].SelectedImageIndex = 22; // 设置icon index
            }

            if (privNd.GetLength(0) == 1)
            {
                privNd[0].ImageIndex = privNd[0].SelectedImageIndex = 13; // 设置icon index
            }


            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[586] OnCreateControl,AFTER refreshMyComputerFolders");
            }


            String strBaseDir = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
            String strCfgDir = strBaseDir + @"config\fillGatherSchemes.xml";

            if (m_addin.getPanesCount() > 0) // 汇总填报的读取
            {
                TreeNodeCollection trs = m_addin.getFillGatherTreeNodes(m_curDoc); // 从现有的UI上取

                if (trs != null)
                {
                    foreach (TreeNode ndItem in trs)
                    {
                        trvFillGatherSchemes.Nodes.Add((TreeNode)ndItem.Clone()); // 添加
                    }
                }
                else
                {
                    chkListBoxTargetFiles.Items.Clear();
                    trvFillGatherSchemes.Nodes.Clear();

                    if (File.Exists(strCfgDir)) // 从配置文件中取
                    {
                        FillGatherXml2SchemeNodes(strCfgDir, trvFillGatherSchemes); // 添加
                    }
                }
            }
            else
            {
                chkListBoxTargetFiles.Items.Clear(); // 清空 
                trvFillGatherSchemes.Nodes.Clear(); // 清空

                if (File.Exists(strCfgDir)) // 从配置文件中取
                {
                    FillGatherXml2SchemeNodes(strCfgDir, trvFillGatherSchemes); // 添加
                }
            }

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[628] OnCreateControl,BEFORE updateUI");
            }

            m_addin.updateUI(m_hashControls);

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[636] OnCreateControl,AFTER updateUI");
            }

            //m_addin.updatePermission(m_hashControls); // 更新控件权限

//             // load
//             if (Settings.Default.bRegSuc)
//             {
//                 if (Settings.Default.bRegExp)
//                 {
//                     MessageBox.Show("注册已过期，请重新注册");
//                 }
//                 else
//                 {
//                     if (m_addin.m_hashRegPerm != null)
//                     {
//                         m_addin.updatePermFromLicDat(m_hashKeyControls, m_addin.m_hashRegPerm);
//                     }
//                 }
//             }
//             else
//             {
//                 m_addin.updatePermission(m_hashControls); // 更新控件权限
//             }

            return;
        }

        protected /*override*/ void OnCreateControl_v1() // 创建控件UI时初始化
        {
            m_addin = Globals.ThisAddIn;// this addin记录

            try
            {
                m_curDoc = m_addin.Application.ActiveDocument;// 赋当前文档
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {
            }

            if (m_curDoc == null)
                return;


            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[361] OnCreateControl,BEFORE register event functions");
            }


            // 设置各个相应的事件函数
            m_curDoc.ContentControlOnEnter += new Word.DocumentEvents2_ContentControlOnEnterEventHandler(m_curDoc_ContentControlOnEnter);
            m_curDoc.ContentControlOnExit += new Word.DocumentEvents2_ContentControlOnExitEventHandler(m_curDoc_ContentControlOnExit);
            m_curDoc.ContentControlBeforeContentUpdate += new Word.DocumentEvents2_ContentControlBeforeContentUpdateEventHandler(m_curDoc_ContentControlBeforeContentUpdate);
            m_curDoc.ContentControlBeforeDelete += new Word.DocumentEvents2_ContentControlBeforeDeleteEventHandler(m_curDoc_ContentControlBeforeDelete);
            m_curDoc.ContentControlAfterAdd += new Word.DocumentEvents2_ContentControlAfterAddEventHandler(m_curDoc_ContentControlAfterAdd);
            m_curDoc.ContentControlBeforeStoreUpdate += new Word.DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler(m_curDoc_ContentControlBeforeStoreUpdate);

            m_curDoc.New += new Word.DocumentEvents2_NewEventHandler(m_curDoc_New);
            m_curDoc.Open += new Word.DocumentEvents2_OpenEventHandler(m_curDoc_Open);

            ((Word.DocumentEvents2_Event)m_curDoc).Close += new Word.DocumentEvents2_CloseEventHandler(m_curDoc_Close);

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[380] OnCreateControl,AFTER register event functions");
            }

            // 根据版本设置
            ///////////////////////////

            TabControl.TabPageCollection tpagColl = tabCtrl.TabPages;

            tpagColl.Clear();

#if RELVER
            tpagColl.Add(tabPageShare);
            tpagColl.Add(tabPageHeadingSn);
            tpagColl.Add(tabPageHeadingStyles);
            tpagColl.Add(tabPageUnitedStyle);

            // tpagColl.Add(tabPageCheck);
            // tpagColl.Add(tabPageOrganize);
            tpagColl.Add(tabPageMultiSel);
            tpagColl.Add(tabPageMultiTiZhu);
            tpagColl.Add(tabPageObjNav);

            tpagColl.Add(tabPageDataTrans);
            tpagColl.Add(tabPageFillGather);
            tpagColl.Add(tabPageRel);
            tpagColl.Add(tabPageCompare);
            tpagColl.Add(tabPageCntList);
            // tpagColl.Add(tabPageForm);
            tpagColl.Add(tabPageNumTrans);
            tpagColl.Add(tabPageInfo);

            // tpagColl.Add(tabPageVersion);
            // tpagColl.Add(tabPageHelp);
            // tpagColl.Add(tabPagePublish);
            // tpagColl.Add(tabPagePendingTasks);
            // tpagColl.Add(tabPageStatistic);

#endif

#if TEST
            tpagColl.Add(tabPageTEST);
#endif

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[425] OnCreateControl,AFTER load TabPages");
            }


            ///////////////////////
            initColorCombox();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[434] OnCreateControl,AFTER initColorCombox");
            }


            initMultiObjNavPage();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[442] OnCreateControl,AFTER initMultiObjNavPage");
            }

            // initOrganizePage();//初始化结构页面
            initMultiSelPage();

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[450] OnCreateControl,AFTER initMultiSelPage");
            }


            // 设置数据库适配器
            m_tblListLevelSchemesAdpter = m_addin.m_tblAdapterMgr.tblListLevelSchemesTableAdapter;
            m_tblListLevelAdpter = m_addin.m_tblAdapterMgr.tblListLevelTableAdapter;
            m_tblUniformStyleHistoryDocsAdpter = m_addin.m_tblAdapterMgr.tblUniformStyleHistoryDocsTableAdapter;

            initHeadingSnListLevels(); // 初始化章节序号

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[463] OnCreateControl,AFTER initHeadingSnListLevels");
            }

            initHeadingStyleSchemes(); // 初始化章节样式

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[470] OnCreateControl,AFTER initHeadingStyleSchemes");
            }


            String strMD5 = "";

            // Task pane controls
            foreach (Control ctrl in this.Controls) // 遍历各个控件
            {
                if (ctrl is TabControl)
                {
                    m_hashControls.Add(ctrl.Name, ctrl);

                    foreach (Control chCtrl in ctrl.Controls)
                    {
                        m_hashControls.Add(chCtrl.Name, chCtrl);
                    }
                }

                // getAllControls(ctrl, ref m_hashControls);
                // getLicControls(ctrl, ref m_hashKeyControls);
            }

            // Right menu
            ToolStripItemCollection menuItems = cxtMenuSvr.Items;
            foreach (ToolStripItem item in menuItems) // 遍历右键菜单项
            {
                m_hashControls.Add(item.Name, item);
                // m_addin.m_hashDefaultPermission[item.Name] = 0;

                //strMD5 = ClassEncryptUtils.MD5Encrypt(item.Name);
                //m_hashKeyControls[strMD5] = item;
            }

            //add ribbon button/control into hash controls
            foreach (RibbonGroup ribGroup in Globals.Ribbons.Ribbon1.tab1.Groups) // 遍历Ribbon项目
            {
                m_hashControls.Add(ribGroup.Name, ribGroup);

                /*
                foreach (RibbonControl ribCtrl in ribGroup.Items)
                {
                    m_hashControls.Add(ribCtrl.Name, ribCtrl);
                    //m_addin.m_hashDefaultPermission[ribCtrl.Name] = 0;

                    //strMD5 = ClassEncryptUtils.MD5Encrypt(ribCtrl.Name);
                    //m_hashKeyControls[strMD5] = ribCtrl;

                    if (ribCtrl is RibbonBox)
                    {
                        RibbonBox ribBox = (RibbonBox)ribCtrl;
                        //m_hashControls.Add(ribBox.Name, ribBox);

                        foreach (RibbonControl subCtrl in ribBox.Items)
                        {
                            m_hashControls.Add(subCtrl.Name, subCtrl);
                            //m_addin.m_hashDefaultPermission[subCtrl.Name] = 0;

                            //strMD5 = ClassEncryptUtils.MD5Encrypt(subCtrl.Name);
                            //m_hashKeyControls[strMD5] = subCtrl;

                            if (subCtrl is RibbonBox)
                            {
                                RibbonBox ribBox2 = (RibbonBox)subCtrl;
                                // m_hashControls.Add(ribBox2.Name, ribBox2);

                                foreach (RibbonControl subCtrl2 in ribBox2.Items)
                                {
                                    m_hashControls.Add(subCtrl2.Name, subCtrl2);
                                    //m_addin.m_hashDefaultPermission[subCtrl2.Name] = 0;

                                    //strMD5 = ClassEncryptUtils.MD5Encrypt(subCtrl2.Name);
                                    //m_hashKeyControls[strMD5] = subCtrl2;
                                }
                            }
                            
                        }
                    }
                }*/

            }

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[554] OnCreateControl,AFTER get hashcontrols");
            }



            m_tvRel.TreeViewNodeSorter = m_RelTreeNodeComparer; // 设置排序函数
            m_tvRel.Sorted = true;

            tvShareLib.TreeViewNodeSorter = m_ShareLibTreeNodeComparer; // 设置排序函数
            tvShareLib.Sorted = true;

            //if (m_addin.searchPermission("tabPageShare") != 0)
            //{
            refreshMyComputerFolders(); // 初始化我的电脑的目录
            //}

            TreeNode[] commonNd = tvShareLib.Nodes.Find("公共库", false); // 记录特定名称的TreeNode
            TreeNode[] privNd = tvShareLib.Nodes.Find("个人库", false); // 记录特定名称的TreeNode

            if (commonNd.GetLength(0) == 1)
            {
                commonNd[0].ImageIndex = commonNd[0].SelectedImageIndex = 22; // 设置icon index
            }

            if (privNd.GetLength(0) == 1)
            {
                privNd[0].ImageIndex = privNd[0].SelectedImageIndex = 13; // 设置icon index
            }


            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[586] OnCreateControl,AFTER refreshMyComputerFolders");
            }


            String strBaseDir = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
            String strCfgDir = strBaseDir + @"config\fillGatherSchemes.xml";

            if (m_addin.getPanesCount() > 0) // 汇总填报的读取
            {
                TreeNodeCollection trs = m_addin.getFillGatherTreeNodes(m_curDoc); // 从现有的UI上取

                if (trs != null)
                {
                    foreach (TreeNode ndItem in trs)
                    {
                        trvFillGatherSchemes.Nodes.Add((TreeNode)ndItem.Clone()); // 添加
                    }
                }
                else
                {
                    chkListBoxTargetFiles.Items.Clear();
                    trvFillGatherSchemes.Nodes.Clear();

                    if (File.Exists(strCfgDir)) // 从配置文件中取
                    {
                        FillGatherXml2SchemeNodes(strCfgDir, trvFillGatherSchemes); // 添加
                    }
                }
            }
            else
            {
                chkListBoxTargetFiles.Items.Clear(); // 清空 
                trvFillGatherSchemes.Nodes.Clear(); // 清空

                if (File.Exists(strCfgDir)) // 从配置文件中取
                {
                    FillGatherXml2SchemeNodes(strCfgDir, trvFillGatherSchemes); // 添加
                }
            }

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[628] OnCreateControl,BEFORE updateUI");
            }

            m_addin.updateUI(m_hashControls);

            if (ThisAddIn.m_bLog)
            {
                Log.WriteLog("[636] OnCreateControl,AFTER updateUI");
            }

            //m_addin.updatePermission(m_hashControls); // 更新控件权限

            //             // load
            //             if (Settings.Default.bRegSuc)
            //             {
            //                 if (Settings.Default.bRegExp)
            //                 {
            //                     MessageBox.Show("注册已过期，请重新注册");
            //                 }
            //                 else
            //                 {
            //                     if (m_addin.m_hashRegPerm != null)
            //                     {
            //                         m_addin.updatePermFromLicDat(m_hashKeyControls, m_addin.m_hashRegPerm);
            //                     }
            //                 }
            //             }
            //             else
            //             {
            //                 m_addin.updatePermission(m_hashControls); // 更新控件权限
            //             }

            return;
        }


        public void generateControlsXml(String strFileLoc,String strUIPermFileLoc) // 产生控件配置表
        {
            // XML头
            String strResult = "";
            String strXmlHeader = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n"; // XML头
            String strLvl1S = "<PermissionControls>\r\n\r\n"; // XML group头
            String strLvl1E = "</PermissionControls>\r\n"; // XML group end
            String strGroupE = "</function_group>\r\n\r\n"; // XML function group头
            String strItemE = "</function_item>\r\n\r\n";// XML item头 
            String strIndent = "    ";// XML头

            strResult += strXmlHeader; // XML HEADER
            strResult += strLvl1S; // 第1级 节点

            String strUIMD5 = "";

            // Task pane controls
            // String strPaneS = "<function_group id=\"\" showname=\"工作区面板\" controlname=\"" + this.Name+ "\" controltype=\"" + this.GetType().Name + "\">\r\n";
            String strPaneS = "<function_group id=\"\" showname=\"" + "工作区面板" + "\" controlname=\"" + this.Name + "\" controltype=\"" + this.GetType().Name + "\">\r\n";

            strUIMD5 += ClassEncryptUtils.MD5Encrypt(this.Name).ToUpper();

            strResult += strPaneS;
            String strCtrlItems = "";
            foreach (Control ctrl in this.Controls) // 递归获取子控件信息
            {
                //                 if (!ctrl.Visible)
                //                 {
                //                     continue;
                //                 }

                if (ctrl is TabControl)
                {
                    strCtrlItems += "  <function_group id=\"\" showname=\"" + ctrl.Name + "\" controlname=\"" + ctrl.Name + "\" controltype=\"" + ctrl.GetType().Name + "\">\r\n";

                    strUIMD5 += ClassEncryptUtils.MD5Encrypt(ctrl.Name).ToUpper();

                    foreach (Control chCtrl in ctrl.Controls)
                    {
                        strCtrlItems += "    <function_group id=\"\" showname=\"" + chCtrl.Text.Replace("<", "《") + "\" controlname=\"" + chCtrl.Name + "\" controltype=\"" + chCtrl.GetType().Name + "\">\r\n";
                        strCtrlItems += "    " + strGroupE;

                        strUIMD5 += ClassEncryptUtils.MD5Encrypt(chCtrl.Name).ToUpper();
                    }
                    
                    strCtrlItems += "  " + strGroupE;
                }


                // traverseControls4Xml(ctrl, ref strCtrlItems, strIndent); // 遍历
            }


            strResult += strCtrlItems; // 赋值记录
            strResult += strGroupE;

            // Right menu
            String strRightMenuS = "<function_group id=\"\" showname=\"右键菜单\" controlname=\"rightMenu\" controltype=\"ContextMenuStrip\">\r\n";
            // 记录右键信息
            strResult += strRightMenuS;
            ToolStripItemCollection menuItems = cxtMenuSvr.Items; // 子控件
            foreach (ToolStripItem item in menuItems)
            {
                strUIMD5 += ClassEncryptUtils.MD5Encrypt(item.Name).ToUpper();

                strResult += strIndent + "<function_item id=\"\" showname=\"" + item.Text + "\" controlname=\"" + item.Name + "\" controltype=\"" + item.GetType().Name + "\">\r\n";
                strResult += strIndent + strItemE;
            }
            strResult += strGroupE;

            
            // ribbon controls
            String strRibbonS = "<function_group id=\"\" showname=\"菜单\" controlname=\"Ribbon\" controltype=\"OfficeRibbon\">\r\n";
            strResult += strRibbonS;
            String strTrans = "", strTrans1 = "", strTrans2 = "";

            foreach (RibbonGroup ribGroup in Globals.Ribbons.Ribbon1.tab1.Groups) // in group controls
            {

                strUIMD5 += ClassEncryptUtils.MD5Encrypt(ribGroup.Name).ToUpper();

                // 记录item的名称等信息
                strResult += strIndent + "<function_group id=\"\" showname=\"" + ribGroup.Label.Replace("<", "《") +"\" controlname=\"" + ribGroup.Name + "\" controltype=\"" + ribGroup.GetType().Name + "\">\r\n";
                strResult += strIndent + strGroupE; // GROUP的XML文字段
            }

            strResult += strGroupE; // 结束符

            strResult += strLvl1E; // 结束对应文字

            FileStream fs = new FileStream(strFileLoc, FileMode.Create); // 写文档
            StreamWriter sw = new StreamWriter(fs, Encoding.UTF8); // UTF8格式
            sw.Write(strResult);
            sw.Close();
            fs.Close();

            FileStream fs2 = new FileStream(strUIPermFileLoc, FileMode.Create); // 写文档
            StreamWriter sw2 = new StreamWriter(fs2, Encoding.UTF8); // UTF8格式
            sw2.Write(strUIMD5);
            sw2.Close();
            fs2.Close();

            return;
        }


        public void generateControlsXml_v1(String strFileLoc) // 产生控件配置表
        {
            // XML头
            String strResult = "";
            String strXmlHeader = "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n"; // XML头
            String strLvl1S = "<PermissionControls>\r\n\r\n"; // XML group头
            String strLvl1E = "</PermissionControls>\r\n"; // XML group end
            String strGroupE = "</function_group>\r\n\r\n"; // XML function group头
            String strItemE = "</function_item>\r\n\r\n";// XML item头 
            String strIndent = "    ";// XML头

            strResult += strXmlHeader; // XML HEADER
            strResult += strLvl1S; // 第1级 节点


            // Task pane controls
            String strPaneS = "<function_group id=\"\" showname=\"工作区面板\" controlname=\"TaskPane\" controltype=\"UserControl\">\r\n";
            strResult += strPaneS;
            String strCtrlItems = "";
            foreach (Control ctrl in this.Controls) // 递归获取子控件信息
            {
//                 if (!ctrl.Visible)
//                 {
//                     continue;
//                 }

                traverseControls4Xml(ctrl, ref strCtrlItems, strIndent); // 遍历
            }
            strResult += strCtrlItems; // 赋值记录
            strResult += strGroupE;

            // Right menu
            String strRightMenuS = "<function_group id=\"\" showname=\"右键菜单\" controlname=\"rightMenu\" controltype=\"ContextMenuStrip\">\r\n";
            // 记录右键信息
            strResult += strRightMenuS;
            ToolStripItemCollection menuItems = cxtMenuSvr.Items; // 子控件
            foreach (ToolStripItem item in menuItems) 
            {
                strResult += strIndent + "<function_item id=\"\" showname=\"" + item.Text + "\" controlname=\"" + item.Name + "\" controltype=\"" + item.GetType().Name + "\">\r\n";
                strResult += strIndent + strItemE;
            }
            strResult += strGroupE;

            //add ribbon button/control into hash controls
            RibbonButton ribBtn = null, ribBtn1 = null, ribBtn2 = null;
            RibbonCheckBox ribChkbox = null, ribChkbox1 = null, ribChkbox2 = null;
            RibbonDropDown ribDropdown = null, ribDropdown1 = null,ribDropdown2 = null;
            RibbonBox ribBox = null, ribBox2 = null;

            // ribbon controls
            String strRibbonS = "<function_group id=\"\" showname=\"菜单\" controlname=\"Ribbon\" controltype=\"OfficeRibbon\">\r\n";
            strResult += strRibbonS;
            String strTrans = "", strTrans1 = "", strTrans2 = "";

            foreach (RibbonGroup ribGroup in Globals.Ribbons.Ribbon1.tab1.Groups) // in group controls
            {   // 记录item的名称等信息
                strResult += strIndent + "<function_group id=\"\" showname=\"" + ribGroup.Label + "\" controlname=\"" + ribGroup.Name + "\" controltype=\"" + ribGroup.GetType().Name + "\">\r\n";
                foreach (RibbonControl ribCtrl in ribGroup.Items)
                {
                    if (!ribCtrl.Visible) // 跳过不可见控件
                    {
                        continue;
                    }

                    if (ribCtrl is RibbonButton) // button类
                    {
                        ribBtn = (RibbonButton)ribCtrl;
                        strTrans = ribBtn.Label.Replace("<", "《");
                        strResult += strIndent + "  <function_item id=\"" + ribBtn.Id + "\" showname=\"" + strTrans + "\" controlname=\"" + ribBtn.Name + "\" controltype=\"" + ribBtn.GetType().Name + "\">\r\n";

                        strResult += strIndent + "  " + strItemE; // 拼出XML文字段
                    }
                    else if (ribCtrl is RibbonCheckBox) // checkbox类
                    {
                        ribChkbox = (RibbonCheckBox)ribCtrl;
                        strTrans = ribChkbox.Label.Replace("<", "《");
                        strResult += strIndent + "  <function_item id=\"" + ribChkbox.Id + "\" showname=\"" + strTrans + "\" controlname=\"" + ribChkbox.Name + "\" controltype=\"" + ribChkbox.GetType().Name + "\">\r\n";

                        strResult += strIndent + "  " + strItemE; // 拼出XML文字段
                    }
                    else if (ribCtrl is RibbonDropDown) // 下拉框
                    {
                        ribDropdown = (RibbonDropDown)ribCtrl;
                        strTrans = ribDropdown.Label.Replace("<", "《");
                        strResult += strIndent + "  <function_item id=\"" + ribDropdown.Id + "\" showname=\"" + strTrans + "\" controlname=\"" + ribDropdown.Name + "\" controltype=\"" + ribDropdown.GetType().Name + "\">\r\n";

                        strResult += strIndent + "  " + strItemE; // 拼出XML文字段
                    }
                    else if (ribCtrl is RibbonBox)
                    {
                        ribBox = (RibbonBox)ribCtrl;

                        strResult += strIndent + "  <function_group id=\"\" showname=\"" + ribBox.Name + "\" controlname=\"" + ribBox.Name + "\" controltype=\"" + ribBox.GetType().Name + "\">\r\n";

                        foreach(RibbonControl subCtrl in ribBox.Items)
                        {
                            if (subCtrl is RibbonButton) // button类
                            {
                                ribBtn1 = (RibbonButton)subCtrl;
                                strTrans1 = ribBtn1.Label.Replace("<", "《");
                                strResult += strIndent + "    <function_item id=\"" + ribBtn1.Id + "\" showname=\"" + strTrans1 + "\" controlname=\"" + ribBtn1.Name + "\" controltype=\"" + ribBtn1.GetType().Name + "\">\r\n";

                                strResult += strIndent + "    " + strItemE; // 拼出XML文字段
                            }
                            else if (subCtrl is RibbonCheckBox) // checkbox类
                            {
                                ribChkbox1 = (RibbonCheckBox)subCtrl;
                                strTrans1 = ribChkbox1.Label.Replace("<", "《");
                                strResult += strIndent + "    <function_item id=\"" + ribChkbox1.Id + "\" showname=\"" + strTrans1 + "\" controlname=\"" + ribChkbox1.Name + "\" controltype=\"" + ribChkbox1.GetType().Name + "\">\r\n";

                                strResult += strIndent + "    " + strItemE; // 拼出XML文字段
                            }
                            else if (subCtrl is RibbonDropDown) // 下拉框
                            {
                                ribDropdown1 = (RibbonDropDown)subCtrl;
                                strTrans1 = ribDropdown1.Label.Replace("<", "《");
                                strResult += strIndent + "    <function_item id=\"" + ribDropdown1.Id + "\" showname=\"" + strTrans1 + "\" controlname=\"" + ribDropdown1.Name + "\" controltype=\"" + ribDropdown1.GetType().Name + "\">\r\n";

                                strResult += strIndent + "    " + strItemE; // 拼出XML文字段
                            }
                            else if (subCtrl is RibbonBox)
                            {
                                ribBox2 = (RibbonBox)subCtrl;

                                strResult += strIndent + "      <function_group id=\"\" showname=\"" + ribBox2.Name + "\" controlname=\"" + ribBox2.Name + "\" controltype=\"" + ribBox2.GetType().Name + "\">\r\n";

                                foreach (RibbonControl subCtrl2 in ribBox2.Items)
                                {
                                    if (subCtrl2 is RibbonButton) // button类
                                    {
                                        ribBtn2 = (RibbonButton)subCtrl2;
                                        strTrans2 = ribBtn2.Label.Replace("<", "《");
                                        strResult += strIndent + "        <function_item id=\"" + ribBtn2.Id + "\" showname=\"" + strTrans2 + "\" controlname=\"" + ribBtn2.Name + "\" controltype=\"" + ribBtn2.GetType().Name + "\">\r\n";

                                        strResult += strIndent + "        " + strItemE; // 拼出XML文字段
                                    }
                                    else if (subCtrl2 is RibbonCheckBox) // checkbox类
                                    {
                                        ribChkbox2 = (RibbonCheckBox)subCtrl2;
                                        strTrans2 = ribChkbox2.Label.Replace("<", "《");
                                        strResult += strIndent + "        <function_item id=\"" + ribChkbox2.Id + "\" showname=\"" + strTrans2 + "\" controlname=\"" + ribChkbox2.Name + "\" controltype=\"" + ribChkbox2.GetType().Name + "\">\r\n";

                                        strResult += strIndent + "        " + strItemE; // 拼出XML文字段
                                    }
                                    else if (subCtrl2 is RibbonDropDown) // 下拉框
                                    {
                                        ribDropdown2 = (RibbonDropDown)subCtrl2;
                                        strTrans2 = ribDropdown2.Label.Replace("<", "《");
                                        strResult += strIndent + "        <function_item id=\"" + ribDropdown2.Id + "\" showname=\"" + strTrans2 + "\" controlname=\"" + ribDropdown2.Name + "\" controltype=\"" + ribDropdown2.GetType().Name + "\">\r\n";

                                        strResult += strIndent + "        " + strItemE; // 拼出XML文字段
                                    }
                                }

                                strResult += strIndent + strGroupE;
                            }

                        }

                        strResult += strIndent + strGroupE;
                    }

//                  strResult += strIndent + "  " + strItemE; // 拼出XML文字段
                }

                strResult += strIndent + strGroupE; // GROUP的XML文字段
            }
            strResult += strGroupE; // 结束符

            strResult += strLvl1E; // 结束对应文字

            FileStream fs = new FileStream(strFileLoc, FileMode.Create); // 写文档
            StreamWriter sw = new StreamWriter(fs, Encoding.UTF8); // UTF8格式
            sw.Write(strResult);
            sw.Close();
            fs.Close();

            return;
        }

        private void traverseControls4Xml(Control ctrl,ref String strXmlItem, String strIndent)
        {
//             if (!ctrl.Visible)
//             {
//                 return;
//             }

            String strText = ctrl.Text.Replace("<", "《"); // 转义

            if (strText.Equals("") && ctrl.Tag != null) // 判断tag
            {
                strText = (String)ctrl.Tag; // 取tag值
            }

            if (strText.Equals("")) // 
            {
                strText = ctrl.Name; // 取名称
            }

            if (ctrl.Controls.Count == 0) // 无子控件
            {
                // item
                strXmlItem += strIndent + "<function_item id=\"\" showname=\"" + strText + "\" controlname=\"" + ctrl.Name + "\" controltype=\"" + ctrl.GetType().Name + "\">\r\n"; ;
            }
            else
            {
                // group
                strXmlItem += strIndent + "<function_group id=\"\" showname=\"" + strText + "\" controlname=\"" + ctrl.Name + "\" controltype=\"" + ctrl.GetType().Name + "\">\r\n";
            }

            String strIndentSub = strIndent + "  ";

            if (!(ctrl is NumericUpDown))
            {
                foreach (Control subCtrl in ctrl.Controls) // 递归
                {
                    traverseControls4Xml(subCtrl, ref strXmlItem, strIndentSub); // 遍历
                }
            }

            if (ctrl.Controls.Count > 0) // XML各节的结束符
            {
                strXmlItem += strIndent + "</function_group>\r\n\r\n"; // XML group 尾
            }
            else
            {
                strXmlItem += strIndent + "</function_item>\r\n\r\n"; // XML item 尾
            }

            return;
        }


        private void transControlsLic(Control PCtrl,ref String strResult)
        {
            foreach (Control ctrl in PCtrl.Controls) // 递归获取子控件信息
            {
                //if (!ctrl.Visible)
                //    continue;

                if (ctrl is TabPage || ctrl is TabControl)
                {
                    strResult += ClassEncryptUtils.MD5Encrypt(ctrl.Name);
                }

                if (ctrl.Controls.Count > 0 && !(ctrl is NumericUpDown))
                {
                    transControlsLic(ctrl, ref strResult);
                }
            }

            return;
        }


        public void generateControlsLicData(String strFileLoc) // 产生控件配置表
        {
            String strResult = "";
   
            foreach (Control ctrl in this.Controls) // 递归获取子控件信息
            {
                //if (!ctrl.Visible)
                //    continue;

                if (ctrl is TabPage || ctrl is TabControl)
                {
                    strResult += ClassEncryptUtils.MD5Encrypt(ctrl.Name);
                }

                if (ctrl.Controls.Count > 0 && !(ctrl is NumericUpDown))
                {
                    transControlsLic(ctrl, ref strResult); // 遍历
                }
                
            }


            ToolStripItemCollection menuItems = cxtMenuSvr.Items; // 子控件
            foreach (ToolStripItem item in menuItems)
            {
                // item.Name;
                strResult += ClassEncryptUtils.MD5Encrypt(item.Name);
            }

            //add ribbon button/control into hash controls
            RibbonButton ribBtn = null;
            RibbonCheckBox ribChkbox = null;
            RibbonDropDown ribDropdown = null;
            // ribbon controls

            foreach (RibbonGroup ribGroup in Globals.Ribbons.Ribbon1.tab1.Groups) // in group controls
            {
                foreach (RibbonControl ribCtrl in ribGroup.Items)
                {
                    if (!ribCtrl.Visible) // 跳过不可见控件
                    {
                        continue;
                    }

                    if (ribCtrl is RibbonButton) // button类
                    {
                        ribBtn = (RibbonButton)ribCtrl;
                        strResult += ClassEncryptUtils.MD5Encrypt(ribBtn.Name);
                    }
                    else if (ribCtrl is RibbonCheckBox) // checkbox类
                    {
                        ribChkbox = (RibbonCheckBox)ribCtrl;
                        strResult += ClassEncryptUtils.MD5Encrypt(ribChkbox.Name);
                    }
                    else if (ribCtrl is RibbonDropDown) // 下拉框
                    {
                        ribDropdown = (RibbonDropDown)ribCtrl;
                        strResult += ClassEncryptUtils.MD5Encrypt(ribDropdown.Name);
                    }
                }

            }


            StreamWriter sw = new StreamWriter(strFileLoc);
            sw.Write(strResult);
            sw.Close();

            return;
        }




        /// <summary>
        /// 提取所有的控件
        /// </summary>
        /// <param name="ctrl"></param>
        /// <param name="hashControls"></param>
        /// <param name="hashDefaultPermission"></param>
        private void getAllControls(Control ctrl, ref Hashtable hashControls)
        {
            if (!String.IsNullOrWhiteSpace(ctrl.Name))
            {
                hashControls.Add(ctrl.Name, ctrl); // 添加到hash表
                //hashDefaultPermission[ctrl.Name] = 0; //初始值
            }

            foreach (Control subCtrl in ctrl.Controls) // 递归获取
            {
                getAllControls(subCtrl, ref hashControls); // 遍历
            }

            return;
        }

// 
//         private void getLicControls(Control ctrl, ref Hashtable hashControls)
//         {
//             if(ctrl is TabPage || ctrl is TabControl)
//             {
//                 if (!String.IsNullOrWhiteSpace(ctrl.Name))
//                 {
//                     String strMD5 = ClassEncryptUtils.MD5Encrypt(ctrl.Name);
//                     hashControls[strMD5] = ctrl; // 添加到hash表
//                 }
//             }
// 
//             if (ctrl.Controls.Count > 0)
//             {
//                 foreach (Control subCtrl in ctrl.Controls) // 递归获取
//                 {
//                     getLicControls(subCtrl, ref hashControls); // 遍历
//                 }
//             }
// 
//             return;
//         }


        void m_curDoc_New()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            int ncode = doc.GetHashCode();

            return;
        }

        private void m_curDoc_Open()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            int ncode = doc.GetHashCode();

            // if(doc.SaveFormat != Word.WdSaveFormat.
            String strExt = Path.GetExtension(doc.FullName);

            if (m_addin.searchPermission("tabPageRel") > 0) // 权限允许
            {
                if (!strExt.ToUpper().Equals(".DOCX")) // 不是WORD2007以上格式则不提供关联计算功能
                {
                    // MessageBox.Show(@"此版本文档不能支持关联计算等功能，请勿使用", "警告", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    tabPageRel.Enabled = false;
                }
                else
                {
                    tabPageRel.Enabled = true;
                    
                    btnRefreshRels_Click(null, null); // 刷新关联计算项
                }
            }


            if (m_addin.searchPermission("tabPageCntList") > 0) // 权限允许
            {
                if (!strExt.ToUpper().Equals(".DOCX")) // 不是WORD2007以上格式则不提供内容复用功能
                {
                    tabPageCntList.Enabled = false;
                }
                else
                {
                    tabPageCntList.Enabled = true;
                }

            }


            if (m_addin.searchPermission("tabPageDataTrans") > 0 ) // 权限允许
            {
                TabControl.TabPageCollection tabPages = tabControl1.TabPages;

                foreach (TabPage tPageItem in tabPages)
                {
                    if (tPageItem.Name.Equals("tabPageExcel2DocTbl"))
                    {
                        if (!strExt.ToUpper().Equals(".DOCX")) // 不是WORD2007以上格式则不提供数据转Word功能
                        {
                            tPageItem.Enabled = false;
                        }
                        else
                        {
                            tPageItem.Enabled = true;
                        }
                    }
                }
            }


            return;
        }

        private void m_curDoc_Close()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            int ncode = doc.GetHashCode();

            if (m_addin.searchPermission("tabPageRel") > 0) // 权限允许
            {
                refreshAllRels(); // 刷新所有的关联计算项
            }

            IDictionaryEnumerator iter = m_cntListDocHash.GetEnumerator(); // 内容复用打开的文档

            Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges; // 不保存
            Word.Document docitem = null;

            while (iter.MoveNext())
            {
                try
                {
	                docitem = (Word.Document)iter.Value; // 关闭文档
                }
                catch (System.Exception ex)
                {
                    continue;
                }
                finally
                {
                }

                m_addin.RemoveTaskPane(docitem);
                docitem.Close(ref objSave); // 关闭
            }
            m_cntListDocHash.Clear(); // 清除


            String strBaseDir = AppDomain.CurrentDomain.SetupInformation.ApplicationBase;
            String strCfgDir = strBaseDir + @"config\fillGatherSchemes.xml";

            //if (m_addin.getPanesCount() == 1) // 最后一个工作区UI，则写方案到配置文件中
            //{
            FillGatherSchemesSave2Xml(trvFillGatherSchemes, strCfgDir);
            //}

//             if (m_curDoc != null)
//             {
//                 m_addin.RemoveTaskPane(m_curDoc);
//             }

            return;
        }

        protected override void OnLoad(EventArgs e)
        {
            return;
        }

        public void RefreshData()
        {

        }

        private void UserControl1_Resize(object sender, EventArgs e)
        {
            // Fill parent container window
            // 
        }

         public class NodeInfo // 计算使用的树节点
        {
            public String strRelName; // 名称
            public String strRelContent;// 值内容
            public String strOpRules; // 运算规则
            // public Boolean bLockContent;
            // control generated can be removed.
            public Object objContentCtrl; // 关联的内容控件

            public System.Collections.Hashtable hashVarsTbl = new System.Collections.Hashtable(); // 变量表

        }

       // private TreeNode m_nodeRoot1 = null, m_nodeRoot2 = null;
       // private String m_strRoot1 = "常规引用", m_strRoot2 = "运算引用";

        private Boolean ValidateRelInput(ref String strRetMsg)
        {
            String strInput = txtRelName.Text.Trim(); // 初始化
            String strValue = txtRelContent.Text;// 初始化
            String strExp = txtOpRules.Text.Trim();// 初始化
            Boolean bExp = chboxOpRulesEnable.Checked;// 初始化

            if (strInput.Length == 0) // 名称判断
            {
                strRetMsg = @"名称为空";
                return false;
            }
            else if (strInput.Length > m_nRelMaxNameLen) // 名称判断
            {
                strRetMsg = @"名称过长";
                return false;
            }

            // String regex = "[\p{InCJK Unified Ideographs}&&\P{Cn}]]";

            Regex reg = new Regex(@"^[_a-zA-Z\u4e00-\u9fa5][_a-zA-Z0-9\u4e00-\u9fa5]*$"); // 判断名称的正则表达式
            // Regex reg = new Regex(@"^[_a-zA-Z\p{InCJK Unified Ideographs}&&\P{Cn}]][_a-zA-Z0-9\p{InCJK Unified Ideographs}&&\P{Cn}]]*$");
            Match mtch = reg.Match(strInput);

            if (!mtch.Success)
            {
                strRetMsg = @"名称不符规则，要求：首字符是_或a到z或A到Z或汉字，后续字符是多个（_或a到z或A到Z或0到9或汉字）";
                return false;
            }

            if (bExp)
            {
                if (strExp.Length == 0)
                {
                    strRetMsg = @"公式为空";
                    return false;
                }

                Boolean bRet = false;
                bRet = m_varsNetWork.IsValid(strExp,ref strRetMsg); // 判断是否合法

                return bRet;
            }
            else
            {
                if (strValue.Length == 0) 
                {
                    strRetMsg = @"内容为空";
                    return false;
                }
            }

            return true;
        }


        private void ShowUsage()
        {
            // @TODO, show usage
            // 
        }

        System.Collections.Hashtable m_varsHash = new System.Collections.Hashtable(); // 变量表

        /// <summary>
        /// 增加新的变量关联项
        /// </summary>
        /// <param name="curNode"></param>
        /// <param name="strInName"></param>
        /// <param name="strInContent"></param>
        /// <param name="bOpChked"></param>
        /// <param name="strInOpRules"></param>
        /// <param name="cnt"></param>
        /// <returns></returns>
        private TreeNode AddOneRel(TreeNode curNode, String strInName, String strInContent,
            Boolean bOpChked, String strInOpRules, Word.ContentControl cnt)
        {
            TreeNode parentNode = curNode; // 初始化
            //Boolean bLockCont = true;

            Word.ContentControl defCtrl = null; // 初始化

            String strName = strInName; // 初始化
            String strContent = strInContent; // 初始化
            String strOpRules = strInOpRules; // 初始化
            NodeInfo ndInfo = null; // 初始化

            String strRetMsg = ""; // 初始化
            int nRet = 0; // 初始化

            ndInfo = new NodeInfo();
            TreeNode node = new TreeNode(strName);

            if (curNode == null) // definition, not reference
            {
                Boolean bOpEnable = bOpChked && !strOpRules.Equals(""); // 是否有公式

                if (!bOpEnable) // definition, normal
                {
                    parentNode = m_tvRel.Nodes[m_strRelDefNodeName]; // 获取父节点
                    // bLockCont = false;

                    if (cnt == null)
                    {
                        defCtrl = insertContentCtrl(strName, strContent); // 在当前文档加入定义的计算控件
                        if (defCtrl == null)
                        {
                            MessageBox.Show("创建控件失败，请检查是否在只读区域进行创建");
                            return null;
                        }

                        defCtrl.Range.Text = strContent; // 赋值
                    }
                    else
                    {
                        defCtrl = cnt; // 记录

                        // defCtrl.Range.Text = strContent;
                    }

                    defCtrl.Title = strName; // 取值

                    String strPlaceHolderText = defCtrl.PlaceholderText.Value; // place holder
                    String strResult = AddEncodeRelMsg(strPlaceHolderText,strName,1,""); // 编码

                    if (strResult == null)
                    {
                        return null;
                    }

                    defCtrl.SetPlaceholderText(null, null, strResult); // 记录特定信息
                    

                    //defCtrl.LockContentControl = true;
                    //defCtrl.LockContents = bLockCont;

                    // insert definition
                    ndInfo.strRelName = strName; // 赋值
                    ndInfo.strRelContent = strContent; // 赋值
                    ndInfo.strOpRules = "";// 赋值
                    ndInfo.objContentCtrl = defCtrl;// 赋值

                    node.Tag = ndInfo; // 赋值
                    node.Name = strName; // 赋值
                    node.Text = strName; // 赋值

                    parentNode.Nodes.Add(node); // 创建相应的树节点

                    node.EnsureVisible();
                    //m_tvRel.SelectedNode = node;
                }
                else // def, operation
                {
                    parentNode = m_tvRel.Nodes[m_strRelCalcNodeName]; // 父节点
                    
                    if (cnt == null)
                    {
                        defCtrl = insertContentCtrl(strName, strContent); // 创建计算控件
                        if (defCtrl == null)
                        {
                            MessageBox.Show("创建控件失败，请检查是否在只读区域进行创建");
                            return null;
                        }
                    }
                    else
                    {
                        defCtrl = cnt; // 记录取值内容控件
                    }
                    
                    defCtrl.Title = strName;
                    // defCtrl.Range.Text = strParsedContent;

                    String strPlaceHolderText = defCtrl.PlaceholderText.Value;
                    String strResult = AddEncodeRelMsg(strPlaceHolderText, strName, 2, strOpRules); // 进行编码

                    if (strResult == null)
                    {
                        return null;
                    }

                    defCtrl.SetPlaceholderText(null, null, strResult);// 记录特定信息

                    //defCtrl.LockContentControl = true;
                    //defCtrl.LockContents = true;

                    // insert definition
                    ndInfo.strRelName = strName; // 赋值
                    ndInfo.strRelContent = strContent; // 赋值
                    ndInfo.strOpRules = strOpRules; // 赋值
                    ndInfo.objContentCtrl = defCtrl; // 赋值

                    node.Tag = ndInfo; // 赋值
                    node.Name = strName; // 赋值
                    node.Text = strName; // 赋值
                    parentNode.Nodes.Add(node); // 创建树节点

                    // 
                    node.EnsureVisible();
                    //m_tvRel.SelectedNode = node;
                }

            }
            else
            {
                // 
                if(curNode.Level == 0) // 0级节点
                {
                    return null;
                }

                if (curNode.Level == 2)  // 0级节点
                {
                    parentNode = curNode.Parent; // 取父节点
                }
                else
                {
                    parentNode = curNode; // 取父节点
                }

                strContent = strInContent; 

                if (cnt == null)
                {
                    defCtrl = insertContentCtrl(strName, strContent); // 创建计算控件
                    if (defCtrl == null)
                    {
                        MessageBox.Show("创建控件失败，请检查是否在只读区域进行创建");
                        return null;
                    }
                    defCtrl.Range.Text = strContent;
                }
                else
                {
                    defCtrl = cnt; // 赋值
                }

                defCtrl.Title = strName;

                String strPlaceHolderText = defCtrl.PlaceholderText.Value;
                String strResult = AddEncodeRelMsg(strPlaceHolderText, strName, 3, strOpRules); // 编码

                if (strResult == null)
                {
                    return null;
                }

                defCtrl.SetPlaceholderText(null, null, strResult); // 创建计算控件

                // insert definition
                ndInfo.strRelName = strName;  // 赋值
                ndInfo.strRelContent = strContent; // 赋值
                ndInfo.strOpRules = parentNode.Text; // 赋值
                ndInfo.objContentCtrl = defCtrl; // 赋值

                node.Tag = ndInfo;  // 赋值
                node.Name = strName; // 赋值
                node.Text = strName; // 赋值

                //defCtrl.LockContentControl = true;
                //defCtrl.LockContents = true;
                
                parentNode.Nodes.Add(node); // 加节点

                // 
                node.EnsureVisible();
                // m_tvRel.SelectedNode = node;
            }

            m_varsHash[strName] = defCtrl; // 变量记录

            // 计算网络增加变量信息
            nRet = m_varsNetWork.AddVar(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg);

            return node;
        }

        /*
        // deprecated
        private void AddRel(TreeNode curNode) // deprecated
        {
            // 
            String strRetMsg = "";
            Boolean bVal = ValidateRelInput(ref strRetMsg);

            if (!bVal)
            {
                ShowUsage();
                MessageBox.Show(strRetMsg);
                return;
            }

            Boolean bRet = chboxOpRulesEnable.Checked;
            //
            String strRelName = txtRelName.Text.Substring(0,64);
            String strRelContent = txtRelContent.Text;
            String strOpRules = txtOpRules.Text;


            TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRelName, true);
            TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRelName, true);

            if (subNodes1.Length > 0 || subNodes2.Length > 0)
            {
                MessageBox.Show("名称\'"+ strRelName + "\'重复," + "请更换名称");
                return;
            }

            TreeNode parentNode = curNode;
            Boolean bLockCont = true;

            if (!bRet)
            {
                // node is ROOT 1
                // 
                if (curNode == null)
                {
                    parentNode = m_tvRel.Nodes[m_strRelDefNodeName];
                    bLockCont = false;
                }
                else
                {
                    // ref
                    NodeInfo nd = (NodeInfo)curNode.Tag;
                    Word.ContentControl ctrl = (Word.ContentControl)nd.objContentCtrl;
                    strRelContent = ctrl.Range.Text;
                }

                // insert rich text content control in m_curDoc.
                // 
                Word.ContentControl defCtrl = insertContentCtrl(strRelName, strRelContent);
                defCtrl.Title = strRelName;
                defCtrl.SetPlaceholderText(null, null, m_strRelTag+strRelContent);
                defCtrl.Range.Text = strRelContent;

                //defCtrl.LockContentControl = true;
                //defCtrl.LockContents = bLockCont;

                // insert definition
                NodeInfo ndInfo = new NodeInfo();
                ndInfo.strRelName = strRelName;
                ndInfo.strRelContent = strRelContent;
                ndInfo.strOpRules = ""; // =ParentDef
                ndInfo.objContentCtrl = defCtrl;
                // ndInfo.strVarsTbl.Add(strRelName, strRelName);

                TreeNode node = new TreeNode(strRelName);
                node.Tag  = ndInfo;
                node.Name = strRelName;
                node.Text = strRelName;
                parentNode.Nodes.Add(node);

                node.EnsureVisible();
                m_tvRel.SelectedNode = node;

                if (parentNode == m_tvRel.Nodes[m_strRelDefNodeName])
                {
                    // definition
                    m_varsHash[strRelName]= defCtrl;
                }
                // bind ctrl and tree node for search?
                // 

            }
            else
            {
                // node is ROOT 2
                // 
                String strParsedContent = "";
                NodeInfo ndInfo = new NodeInfo();

                if (curNode == null)
                {
                    parentNode = m_tvRel.Nodes[m_strRelCalcNodeName];
                    strParsedContent = ""; // ParserOpRules(strOpRules, ref ndInfo.hashVarsTbl);
                    if (strParsedContent.IndexOf("#INVALID") != -1)
                    {
                        // MessageBox.Show(strParsedContent);
                        // return;
                    }
                }
                else
                {
                    // ref
                    NodeInfo nd = (NodeInfo)curNode.Tag;
                    Word.ContentControl ctrl = (Word.ContentControl)nd.objContentCtrl;
                    strParsedContent = ctrl.Range.Text;
                }

                // insert rich text content control in m_curDoc.
                // 
                Word.ContentControl defCtrl = insertContentCtrl(strRelName, strRelContent);
                defCtrl.Title = strRelName;
                defCtrl.Range.Text = strParsedContent;
                defCtrl.SetPlaceholderText(null,null,m_strRelTag+"="+strOpRules);
                //defCtrl.LockContentControl = true;
                //defCtrl.LockContents = true;

                // insert definition
                
                ndInfo.strRelName = strRelName;
                ndInfo.strRelContent = strRelContent;
                ndInfo.strOpRules = strOpRules;
                ndInfo.objContentCtrl = defCtrl;
                // ndInfo.hashVarsTbl.Add(strRelName,strRelName);

                TreeNode node = new TreeNode(strRelName);
                node.Tag = ndInfo;
                node.Name = strRelName;
                node.Text = strRelName;
                parentNode.Nodes.Add(node);

                // 
                node.EnsureVisible();
                m_tvRel.SelectedNode = node;

                if (parentNode == m_tvRel.Nodes[m_strRelCalcNodeName])
                {
                    // definition
                    m_varsHash[strRelName]= defCtrl;
                }

            }

            return;
        }
         * */

        /// <summary>
        /// 删除节点树
        /// </summary>
        /// <param name="node"></param>
        /// <param name="cnt"></param>
        private void delTreeNode(TreeNode node, Word.ContentControl cnt)
        {
            if (node.Nodes.Count > 0) // child tree
            {
                foreach (TreeNode childNd in node.Nodes) // 递归
                {
                    delTreeNode(childNd, cnt);
                }
            }

            NodeInfo ndInfo = (NodeInfo)node.Tag;

            if (ndInfo == null)
                return;

            m_varsHash.Remove(node.Text); // 变量表中删除

            if (cnt == null)
            {
                // remove content ctrl
                Word.ContentControl contCtrl = (Word.ContentControl)ndInfo.objContentCtrl;
                contCtrl.LockContents = false;
                contCtrl.LockContentControl = false;

                contCtrl.Delete(true); // 删除计算控件
            }
            else
            {
                // KEEP specific content control
                Word.ContentControl contCtrl = (Word.ContentControl)ndInfo.objContentCtrl;

                if (contCtrl != null && cnt.ID != contCtrl.ID)
                {
                    contCtrl.LockContents = false;
                    contCtrl.LockContentControl = false;

                    contCtrl.Delete(true); // 删除计算控件
                }
            }

            String strName = node.Text;
            // node.Remove();

            String strRetMsg = "";
            int nRet = m_varsNetWork.SafeRemoveVar(strName,ref strRetMsg); // 计算网络中删除

            return;
        }


        private void RemoveRelNode(TreeNode selNode,Word.ContentControl cnt) // 清除关联计算节点
        {
            if (m_curDoc == null || selNode == null || selNode.Level == 0)
            {
                return;
            }

            delTreeNode(selNode, cnt); // 删除树子节点

            if (selNode == m_fndTreeNode)
            {
                m_fndTreeNode = null;
            }

            selNode.Remove(); // 删除树节点

            return;
        }


        private void RemoveRel()  // 删除关联计算项
        {
            String strInRelName = txtRelName.Text.Trim(); // 取值
            String strInRelContent = txtRelContent.Text; // 取值
            String strInRelOpRules = txtOpRules.Text.Trim(); // 取值
            Boolean bInChked = chboxOpRulesEnable.Checked; // 取值

            TreeNode selNode = m_tvRel.SelectedNode; // 取值

            if (m_curDoc == null) // 健壮性判断
            {
                MessageBox.Show("当前无活动文档");
                return;
            }

            if (selNode == null || !selNode.Text.Equals(strInRelName))
            {
                // search by name
                // find the same name node
                TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strInRelName, true);
                TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strInRelName, true);

                if (subNodes1.Length == 1) // 有值
                {
                    selNode = subNodes1[0]; // 记录
                }
                else if (subNodes2.Length == 1) // 有值
                {
                    selNode = subNodes2[0]; //记录
                }
                else
                {
                    MessageBox.Show("名称\'" + strInRelName + "\'未找到节点," + "请确认名称");
                    return;
                }
            }
            
            if (selNode.Level == 0)
            {
                MessageBox.Show("不能操作主节点");
                return;
            }

            if (selNode.Nodes.Count > 0)
            {
                if (MessageBox.Show(@"本节点存在子节点，确认删除？", "警告", MessageBoxButtons.YesNo) == DialogResult.No)
                {
                    return;
                }
            }

            // find all ref of this var
            Boolean bHasRef = m_varsNetWork.IsHasRef(selNode.Text); // 查找是否存在引用

            if(!bHasRef)
            {
                foreach(TreeNode childNode in selNode.Nodes) // search ref node
                {
                    bHasRef = (bHasRef || m_varsNetWork.IsHasRef(childNode.Text));
                    if(bHasRef)
                        break;
                }
            }

            if (bHasRef)
            {
                if (MessageBox.Show(@"存在引用，删除将使引用值无效，确认删除？", "警告", MessageBoxButtons.YesNo) == DialogResult.No)
                {
                    return;
                }
            }

            TreeNode parentNode = selNode.Parent;
            RemoveRelNode(selNode,null); // 删除

            m_tvRel.SelectedNode = parentNode; // focus move to parent

            return;
        }


        private void UpdateRel()  // 更新关联项目
        {
            String strInRelName = txtRelName.Text.Trim(); // 赋值
            String strInRelContent = txtRelContent.Text; // 赋值
            String strInRelOpRules = txtOpRules.Text.Trim(); // 赋值
            Boolean bInChked = chboxOpRulesEnable.Checked; // 赋值

            if (!bInChked)
            {
                strInRelOpRules = "";
            }

            String strRetMsg = "";
            Boolean bVal = ValidateRelInput(ref strRetMsg); // 验证输入

            if (!bVal)
            {
                ShowUsage();
                MessageBox.Show(strRetMsg);
                return;
            }

            TreeNode selNode = m_tvRel.SelectedNode;

            if (selNode == null || !selNode.Text.Equals(strInRelName)) // 查找
            {
                // search by name
                // find the same name node
                TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strInRelName, true);
                TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strInRelName, true);

                if (subNodes1.Length == 1) // 有值
                {
                    selNode = subNodes1[0]; // 赋值
                }
                else if (subNodes2.Length == 1) // 有值
                {
                    selNode = subNodes2[0]; // 赋值
                }
                else
                {
                    MessageBox.Show("名称\'" + strInRelName + "\'未找到节点," + "请确认名称");
                    return;
                }
            }

            if (selNode.Level == 0)
            {
                MessageBox.Show("不能操作主节点");
                return;
            }

            if (selNode.Level == 2)
            {
                MessageBox.Show("引用不能更新");
                return;
            }

            TreeNode curNode = selNode;
            NodeInfo ndInfo = (NodeInfo)selNode.Tag;
            if (ndInfo == null)
            {
                return;
            }

            String strSelName = ndInfo.strRelName.Trim(); // 赋值
            String strSelCont = ndInfo.strRelContent.Trim(); // 赋值
            String strSelOpRules = ndInfo.strOpRules.Trim(); // 赋值
            Boolean bSelChk = (!ndInfo.strOpRules.Equals("")); // 赋值
            Word.ContentControl defCtrl = (Word.ContentControl)ndInfo.objContentCtrl; // 赋值

            Boolean bDiff = false;
            // diff
            if (!strSelName.Equals(strInRelName))
            {
                MessageBox.Show("名称不许修改");
                txtRelName.Text = strSelName;
                return;
            }

            bDiff = !strSelCont.Equals(strInRelContent) ||
                    bSelChk != bInChked ||
                    !strSelOpRules.Equals(strInRelOpRules);

            if (bDiff)
            {
                // RemoveRelNode(curNode, defCtrl);
                curNode.Remove();// 原节点删除
                TreeNode newNode = AddOneRel(null, strSelName, strInRelContent, bInChked, strInRelOpRules, defCtrl);
                // 增加关联项目
                if (newNode != null)
                {
                    foreach (TreeNode childNode in curNode.Nodes) // 遍历新节点
                    {
                        newNode.Nodes.Add(childNode);  // 增加新节点
                    }
                    
                    if (curNode.IsExpanded) // expanded
                    {
                        newNode.ExpandAll(); // 
                    }

                    newNode.EnsureVisible(); 
                    m_tvRel.SelectedNode = newNode; // 换到新节点

                    if (m_fndTreeNode != null && m_fndTreeNode == curNode)
                    {
                        m_fndTreeNode = newNode;// record found treenode
                    }
                }
            }

            return;
        }

        private void GotoThere(Word.Shape shp)
        {
            m_curDoc.ActiveWindow.ScrollIntoView(shp, true); // 定位viewpoint到此部分
        }

        private void GotoThere(Word.Range rng)
        {
            m_curDoc.ActiveWindow.ScrollIntoView(rng, true); // 定位viewpoint到此部分
            rng.Select(); // range显著选择
            // rng.Select();
            // rng.GoTo();
        }

        private void LocateRel()
        {
            // 跳转
            TreeNode selNode = m_tvRel.SelectedNode;
            if (m_curDoc == null || selNode == null || selNode.Level == 0)
            {
                // @TODO, msg prompt
                return;
            }

            NodeInfo ndInfo = (NodeInfo)m_tvRel.SelectedNode.Tag;
            if (ndInfo == null)
            {
                return;
            }

            Word.ContentControl defCtrl = (Word.ContentControl)ndInfo.objContentCtrl;

            //defCtrl.Range.GoTo();
            GotoThere(defCtrl.Range);

            return;
        }

        // private uint m_nRefCnt = 0;

        /// <summary>
        /// 建立某对象的引用
        /// </summary>
        private void RefRel()
        {
            String strInRelName = txtRelName.Text.Trim(); // 赋值

            TreeNode selNode = m_tvRel.SelectedNode; // 赋值

            if (!strInRelName.Trim().Equals("")) // 不空
            {
                // find the same name node
                TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strInRelName, true);
                TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strInRelName, true);

                if (subNodes1.Length == 1) 
                {
                    selNode = subNodes1[0]; // 记录found node
                }
                else if (subNodes2.Length == 1)
                {
                    selNode = subNodes2[0]; // 记录found node
                }
                else
                {
                    MessageBox.Show("名称\'" + strInRelName + "\'未找到节点," + "请确认名称");
                    return;
                }
                // 计算网络
                ClassVarsNetWork.NetWorkNode varNode = (ClassVarsNetWork.NetWorkNode)m_varsNetWork.findNode(selNode.Text);

                if (varNode != null)
                {
                    NodeInfo ndTag = (NodeInfo)selNode.Tag; // 赋值
                    // ndTag.strRelName = varNode.strName;
                    ndTag.strRelContent = varNode.strValue; // 赋值
                    ndTag.strOpRules = varNode.strOpRules; // 赋值
                }

            }
            else
            {
                selNode = m_tvRel.SelectedNode; // 赋值
            }

            if (m_curDoc == null || selNode == null || selNode.Level == 0)
            {
                MessageBox.Show("请选中内容节点");
                return;
            }

            String strRetMsg = "";
            Boolean bVal = IsOverlapCnt(ref strRetMsg); // 是否重叠
            if (!bVal)
            {
                MessageBox.Show(strRetMsg);
                return;
            }


            TreeNode curDefNode = selNode;
            NodeInfo ndInfo = (NodeInfo)selNode.Tag;
            if (ndInfo == null)
            {
                return;
            }

            if (selNode.Level == 2) // 常规引用/运算引用.level=0, 定义.level=1
            {
                curDefNode = (TreeNode)selNode.Parent;// 取父节点
            }

            Boolean bRet = (!ndInfo.strOpRules.Equals("")); // 取值
            String strRelContent = ndInfo.strRelContent;// 取值
            String strOpRules = curDefNode.Text;//ndInfo.strOpRules;

            String strRelName = curDefNode.Text;

            int i = 1;
            String strName = curDefNode.Text + "_r" + i; // set naming

            if (strName.Length > m_nRelMaxNameLen)
            {
                MessageBox.Show("名称过长");
                return;
            }

            // find one availble name
            TreeNode[] fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);
            TreeNode[] fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true);

            while (fndNodes1.Length > 0 || fndNodes2.Length > 0) // 查重
            {
                i++;
                strName = curDefNode.Text + "_r" + i; // 查重
                fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);

                if (fndNodes1.Length == 0)
                {
                    fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true); // 查另一树子节点
                }
            }

            if (strName.Length > m_nRelMaxNameLen)
            {
                MessageBox.Show("名称过长");
                return;
            }

            strRelName = strName;

            // 加在指定的node下
            AddOneRel(curDefNode,strRelName, strRelContent,bRet,strOpRules,null);

            return;
        }

        private int m_nFindIndex = -1;
        private System.Collections.ArrayList m_foundTreeNodes = new System.Collections.ArrayList();// found的树节点集合

        private System.Collections.Hashtable m_foundRefNodes = new System.Collections.Hashtable(); // found的ref节点集合

        private void SearchRefs(String strVar, ref System.Collections.ArrayList foundVarsList)
        {
            if (!strVar.Trim().Equals("")) // 不为空
            {
                foundVarsList.Clear(); // 清空
                foreach (TreeNode tn in m_tvRel.Nodes[m_strRelDefNodeName].Nodes)
                {
                    NodeInfo nodeInfo = (NodeInfo)tn.Tag;

                    if (!nodeInfo.strOpRules.Trim().Equals(""))
                    {
                        if (nodeInfo.hashVarsTbl[strVar] != null) // 若查到
                        {
                            foundVarsList.Add(tn); // 添加记录
                        }
                    }
                }

                foreach (TreeNode tn in m_tvRel.Nodes[m_strRelCalcNodeName].Nodes)
                {
                    NodeInfo nodeInfo = (NodeInfo)tn.Tag;

                    if (!nodeInfo.strOpRules.Trim().Equals("")) 
                    {
                        if (nodeInfo.hashVarsTbl[strVar] != null) // 若查到
                        {
                            foundVarsList.Add(tn); // 添加记录
                        }
                    }
                }
            }

            return;
        }

        /// <summary>
        /// 查找引用
        /// </summary>
        private void SearchRels()
        {
            String strKeyword = txtRelKeyword.Text;

            if (!strKeyword.Trim().Equals("") )
            {
                if (m_nFindIndex == -1)
                {
                    m_foundTreeNodes.Clear();
                    // search tree node via name/content/op rules
                    FindNode(m_tvRel.Nodes[m_strRelDefNodeName], strKeyword, ref m_foundTreeNodes); // 2个节点树下的引用
                    FindNode(m_tvRel.Nodes[m_strRelCalcNodeName], strKeyword, ref m_foundTreeNodes); // 2个节点树下的引用

                    if (m_foundTreeNodes.Count > 0) // 查到，结果数>0
                    {
                        btnRelSearch.Visible = false;
                        btnFoundBack.Visible = true;
                        btnFoundNext.Visible = true;

                        m_nFindIndex = 0;
                        TreeNode foundNode = ((TreeNode)m_foundTreeNodes[m_nFindIndex]);
                        foundNode.ForeColor = Color.Green; // 标记
                        foundNode.EnsureVisible(); // 保证显现
                        m_tvRel.SelectedNode = foundNode; // 设置第一个为选择节点

                    }
                }
            }

            return;
        }

        /// <summary>
        /// 查找下一个节点
        /// </summary>
        /// <param name="bNextDir"></param>
        /// <param name="fndIndex"></param>
        /// <param name="arrList"></param>
        /// <returns></returns>
        private TreeNode SearchTreeNext(Boolean bNextDir, ref int fndIndex,
                                            ref System.Collections.ArrayList arrList)
        {
            if (fndIndex == -1 || arrList.Count == 0)
            {
                return null;
            }

            if (bNextDir) // 正向
            {
                fndIndex++;
                if (fndIndex > arrList.Count - 1) // wrap
                {
                    fndIndex = 0;
                }
            }
            else
            {
                fndIndex--;
                if (fndIndex < 0) // wrap
                {
                    fndIndex = arrList.Count - 1;
                }
            }

            TreeNode foundNode = ((TreeNode)arrList[fndIndex]);

            return foundNode;
        }

        /// <summary>
        /// 根据条件查找节点
        /// </summary>
        /// <param name="tnCurNode"></param>
        /// <param name="strValue"></param>
        /// <param name="arrRecord"></param>
        private void FindNode(TreeNode tnCurNode, string strValue,
                              ref System.Collections.ArrayList arrRecord)
        {
            if (tnCurNode == null)
            {
                return;
            }

            if (tnCurNode.Text.IndexOf(strValue) != -1 ) // 包括即查找到
            {
                arrRecord.Add(tnCurNode); // 添加到队列中
                // return tnCurNode;
            }

            foreach (TreeNode tn in tnCurNode.Nodes) // 递归
            {
                FindNode(tn, strValue, ref arrRecord); 
            }

        }

        /// <summary>
        /// FindOneNode
        //
        /// </summary>
        private TreeNode SearchOneRelNode(String strKeyword)
        {
            TreeNode fndNode = null;

            if (!strKeyword.Trim().Equals("")) // 不为空
            {
                foreach (TreeNode nd in m_tvRel.Nodes)
                {
                    fndNode = FindOneNode(nd, strKeyword, true, true); // 查找节点
                    if (fndNode != null)
                        break;
                }
            }

            return fndNode;
        }

        /// <summary>
        /// 查找单个节点
        /// </summary>
        /// <param name="tnCurNode"></param>
        /// <param name="strValue"></param>
        /// <param name="bAccurateMatch"></param>
        /// <param name="bChildren"></param>
        /// <returns></returns>
        private TreeNode FindOneNode(TreeNode tnCurNode, string strValue,
                                     Boolean bAccurateMatch, Boolean bChildren)
        {
            TreeNode fndNode = null;

            if (tnCurNode == null)
            {
                return fndNode;
            }

            if (bAccurateMatch)
            {
                if (tnCurNode.Text.Equals(strValue))  // 完全相等
                // if (tnCurNode.Text.IndexOf(strValue) != -1)
                {
                    return tnCurNode;
                }
            }
            else
            {
                if (tnCurNode.Text.IndexOf(strValue) != -1) // 模糊匹配
                {
                    return tnCurNode;
                }
            }

            if (bChildren)
            {
                foreach (TreeNode tn in tnCurNode.Nodes) // 递归
                {
                    fndNode = FindOneNode(tn, strValue,bAccurateMatch,bChildren); // 继续查找
                    if (fndNode != null)
                    {
                        return fndNode;
                    }
                }
            }

            return fndNode;
        }
        /// <summary>
        /// 重置查找
        /// </summary>
        private void ResetSearch()
        {
            //@TODO
            m_nFindIndex = -1;

            TreeNode foundNode;

            for (int i = 0; i < m_foundTreeNodes.Count; i++ ) // 恢复设置
            {
                foundNode = (TreeNode)m_foundTreeNodes[i];
                foundNode.ForeColor = Color.Black; // color
            }

            m_foundTreeNodes.Clear(); // 清空
            // btnRelSearch.Text = "";

            btnRelSearch.Visible = true; // 隐藏
            btnFoundBack.Visible = false; // 隐藏
            btnFoundNext.Visible = false; // 隐藏

            return;
        }
        /// <summary>
        /// 增加多个引用
        /// </summary>
        private void AddRels()
        {
            String strRelName = txtRelName.Text.Trim(); // 取值
            String strRelContent = txtRelContent.Text; // 取值
            String strOpRules = txtOpRules.Text.Trim(); // 取值
            Boolean bRet = chboxOpRulesEnable.Checked; // 取值

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = doc.ActiveWindow.Selection;
            if (sel.Paragraphs.Count > 1)
            {
                DialogResult ret = MessageBox.Show("存在多选，创建多个连续编号的关联(是:多个，否：单个，取消：取消创建)？", "确定关联创建数",
                                                    MessageBoxButtons.YesNoCancel);

                if (ret == DialogResult.Cancel)
                {
                    return;
                }

                if (ret == DialogResult.Yes)
                {
                    System.Collections.ArrayList arrParaList = new System.Collections.ArrayList();

                    foreach (Word.Paragraph para in sel.Paragraphs) // 选中区的多个段落
                    {
                        arrParaList.Add(para); // 添加到队列中
                    }

                    // find an unique number of starting.
                    // 
                    UInt16 uMaxNum = 1;
                    Boolean bDuplicated = true;
                    // check whether repeat to find the max number
                    while (bDuplicated)
                    {
                        TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRelName + uMaxNum, true);
                        
                        if (subNodes1.Length > 0) // 取查找值
                        {
                            uMaxNum++;
                        }
                        else
                        {
                            TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRelName + uMaxNum, true);
                            if (subNodes2.Length > 0)
                            {
                                uMaxNum++;
                            }
                            else
                            {
                                bDuplicated = false;  // 非重复标记
                            }
                        }
                    }

                    String strItem = "";
                    Word.Paragraph paraItem = null;
                    for (int i = 0; i < arrParaList.Count; i++) // 遍历段落
                    {
                        paraItem = (Word.Paragraph)arrParaList[i];
                        paraItem.Range.Select();
                        strItem = paraItem.Range.Text.Trim(m_trimChars);// 取值

                        if (!strItem.Equals("")) // keep para text
                        {
                            AddOneRel(null, strRelName + (uMaxNum + i), strItem, bRet, strOpRules, null); // 添加关联
                        }
                        else
                        {
                            AddOneRel(null, strRelName + (uMaxNum + i), strRelContent, bRet, strOpRules, null); // 添加关联
                        }
                        // AddOneRel(null, strRelName + string.Format("{0:D3}", (uNum + i)), strRelContent, bRet, strOpRules, null); 

                    }

                }
                else
                {
                    // only ONE
                    TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRelName, true);
                    TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRelName, true);

                    if (subNodes1.Length > 0 || subNodes2.Length > 0) // 查重
                    {
                        MessageBox.Show("名称\'" + strRelName + "\'重复," + "请更换名称");
                        return;
                    }

                    AddOneRel(null, strRelName, strRelContent, bRet, strOpRules,null); // 添加1个

                }

            }
            else
            {
                //
                TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRelName, true);
                TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRelName, true);

                if (subNodes1.Length > 0 || subNodes2.Length > 0) // 查重
                {
                    MessageBox.Show("名称\'" + strRelName + "\'重复," + "请更换名称");
                    return;
                }

                AddOneRel(null, strRelName, strRelContent, bRet, strOpRules,null); // 添加1个
            }

            return;
        }

        /// <summary>
        /// 判断是否重叠
        /// </summary>
        /// <param name="strRetMsg"></param>
        /// <returns></returns>
        private Boolean IsOverlapCnt(ref String strRetMsg)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return false;
            }
            finally
            {
            }
			
            if (curDoc == null)
                return false;

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            foreach (Word.Paragraph para in sel.Paragraphs) // 遍历段落
            {
                foreach (Word.ContentControl cnt in para.Range.ContentControls) // 遍历内容控件
                {
                    if (sel.Range.InRange(cnt.Range)) // 判断
                    {
                        strRetMsg = "选择区在内容控件中";
                        return false;
                    }
                    else if (cnt.Range.InRange(sel.Range)) // 判断
                    {
                        strRetMsg = "选择区包含内容控件";
                        return false;
                    }
                }
            }

            return true;
        }

        private void btnAddRel_Click(object sender, EventArgs e)
        {
            // 
            String strRetMsg = "";
            Boolean bVal = ValidateRelInput(ref strRetMsg); // 判断输入是否合法

            if (!bVal)
            {
                ShowUsage();
                MessageBox.Show(strRetMsg);
                return;
            }

            bVal = IsOverlapCnt(ref strRetMsg);
            if (!bVal)
            {
                ShowUsage();
                MessageBox.Show(strRetMsg);
                return;
            }


            ResetSearch(); // 重置

            m_bStopCallHandler = true;
            AddRels(); // 添加关联
            m_bStopCallHandler = false;

            return;
        }

        private void btnRemoveRel_Click(object sender, EventArgs e)
        {
            ResetSearch(); // 重置

            m_bStopCallHandler = true;
            RemoveRel();  // 删除关联
            m_bStopCallHandler = false;

            return;
        }

        /// <summary>
        /// 在当前文档插入内容控件
        /// </summary>
        /// <param name="strName"></param>
        /// <param name="strContent"></param>
        /// <returns></returns>
        private Word.ContentControl insertContentCtrl(String strName, String strContent)
        {
            if (m_curDoc == null)
                return null;

            Word.ContentControl tmpCtrl = null; // 初始化
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return null;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection; // 初始化
            Word.ContentControls ctrls = sel.Range.ContentControls; // 初始化
            
            if( (ctrls != null && ctrls.Count > 0) /*|| sel.Range.ParentContentControl != null*/ )
            {
                sel.Range.InsertParagraphBefore(); // 段落之后
                // curDoc.ActiveWindow.Selection.Range.InsertParagraphAfter();
            }

            try
            {
                tmpCtrl = m_curDoc.ContentControls.Add(Word.WdContentControlType.wdContentControlRichText);// new content control

                if (tmpCtrl != null)
                {
                    tmpCtrl.LockContents = false; // unlock
                    tmpCtrl.LockContentControl = false; // unlock
                    // tmpCtrl.MultiLine = false; // Not support Multi-line
                }
            }
            catch (System.Exception ex)
            {
                tmpCtrl = null;
            }
            finally
            {
            }

            return tmpCtrl;
        }

        // refer
        private void btnInsertRel_Click(object sender, EventArgs e)
        {
            ResetSearch();

            m_bStopCallHandler = true;
            RefRel();// new reference.
            m_bStopCallHandler = false;

            return;
        }

        /// <summary>
        /// update ui info text.
        /// </summary>
        /// <param name="selNode"></param>
        private void updateRelUIInfo(TreeNode selNode)
        {
            NodeInfo ndInfo = (NodeInfo)selNode.Tag;

            txtRelName.Enabled = true; // 初始化
            txtRelContent.Enabled = true;// 初始化
            txtOpRules.Enabled = true;// 初始化
            chboxOpRulesEnable.Enabled = true;// 初始化

            if (ndInfo == null || selNode.Level == 0)
            {
                txtRelName.Text = "";
                txtRelContent.Text = "";
                txtOpRules.Text = "";
                chboxOpRulesEnable.Checked = false;
                txtOpRules.Enabled = false;

                return;
            }
            // find var
            ClassVarsNetWork.NetWorkNode varNode = (ClassVarsNetWork.NetWorkNode)m_varsNetWork.findNode(selNode.Text);

            if (varNode != null)
            {
                ndInfo.strRelName = varNode.strName; // update
                ndInfo.strRelContent = varNode.strValue; // update
                ndInfo.strOpRules = varNode.strOpRules; // update
            }
            else
            {
                MessageBox.Show("NEVER REACH");
                return;
            }

            // txtRelName.Enabled = true;

            txtRelName.Text = ndInfo.strRelName;  // 赋值
            txtRelContent.Text = ndInfo.strRelContent;  // 赋值
            txtOpRules.Text = ndInfo.strOpRules;  // 赋值
            if (txtOpRules.Text.Trim().Length > 0) // update UI control
            {
                chboxOpRulesEnable.Checked = true; // 
                txtOpRules.Enabled = true; // 
                txtRelContent.Enabled = false;// 
            }
            else
            {
                chboxOpRulesEnable.Checked = false;
                txtOpRules.Enabled = false;
                txtRelContent.Enabled = true;
            }

            if (selNode.Level == 2) // ref
            {
                txtRelContent.Enabled = false; 
                txtOpRules.Enabled = false;
                chboxOpRulesEnable.Enabled = false;
            }

            return;
        }


        private void tvRel_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // updateRelUIInfo(m_tvRel.SelectedNode);
            return;
        }

        private void chboxOpRulesEnable_CheckedChanged(object sender, EventArgs e)
        {
            txtOpRules.Enabled = chboxOpRulesEnable.Checked;
            txtRelContent.Enabled = !chboxOpRulesEnable.Checked;
        }

        private void btnUpdateRel_Click(object sender, EventArgs e)
        {
            ResetSearch();

            m_bStopCallHandler = true;
            UpdateRel();// update rel
            m_bStopCallHandler = false;

            return;
        }

        private void btnJump2Rel_Click(object sender, EventArgs e)
        {
            LocateRel();// Locate 
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            SearchRels();// Search references
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtRelKeyword.Text = "";
            ResetSearch();// reset search 
        }
        // 向回找
        private void btnFoundBack_Click(object sender, EventArgs e)
        {
            // search tree next
            TreeNode foundNode = SearchTreeNext(false, ref m_nFindIndex, ref m_foundTreeNodes);
            if (foundNode != null)
            {
                foundNode.ForeColor = Color.Green; // set tag
                foundNode.EnsureVisible();
                m_tvRel.SelectedNode = foundNode; // record found node
            }
        }

        // 向下找
        private void btnFoundNext_Click(object sender, EventArgs e)
        {
            TreeNode foundNode = SearchTreeNext(true, ref m_nFindIndex, ref m_foundTreeNodes); // 调用查找
            if (foundNode != null)
            {
                foundNode.ForeColor = Color.Green; // 标记
                foundNode.EnsureVisible();
                m_tvRel.SelectedNode = foundNode; // 设置成当前选择的节点
            }
        }
        /// <summary>
        /// 新的定义节点
        /// </summary>
        /// <param name="rootNode"></param>
        /// <param name="strName"></param>
        /// <param name="strRelCnt"></param>
        /// <param name="strOpRules"></param>
        /// <param name="ctrl"></param>
        /// <returns></returns>
        private TreeNode newDefNode(TreeNode rootNode, String strName, String strRelCnt,
                               String strOpRules,Word.ContentControl ctrl )
        {
            // definition
            TreeNode trnd = null;
            TreeNode node = FindOneNode(rootNode, strName, true, true); // 查重
            if (node == null)
            {
                trnd = new TreeNode(strName);
                NodeInfo ndInfo = new NodeInfo();// 新建

                ndInfo.strRelName = strName; // 赋值
                ndInfo.strRelContent = strRelCnt; // 赋值
                ndInfo.strOpRules = strOpRules; // 赋值
                ndInfo.objContentCtrl = ctrl; // 赋值

                String strRetMsg = "";
                m_varsNetWork.AddVar(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules,ref strRetMsg);// 增加

//                 String strParsedContent = "";
//                 if (!strOpRules.Trim().Equals(""))
//                 {
//                     strParsedContent = ParserOpRules(strOpRules, ref ndInfo.hashVarsTbl);
//                 }

                trnd.Tag = ndInfo; // 赋值
                trnd.Name = strName;
                trnd.Text = strName;

                rootNode.Nodes.Add(trnd); // 添加UI节点
            }

            return trnd;
        }

        /// <summary>
        /// 根据内容控件创建节点
        /// </summary>
        /// <param name="cnt"></param>
        private void buildOneRelNode(ref Word.ContentControl cnt)
        {
            String strName = "", strPlaceholderText = "", strPlacerText = "";
            String strOpRules = "", strContent = "";
            Boolean bOpChked = false;

            strName = cnt.Title;
            strPlaceholderText = cnt.PlaceholderText.Value;
            strContent = cnt.Range.Text;

            String strRetMsg = "";
            String strTmpName = "", strRelVersion = "";
            int nType = 0;
            // 解码
            if (!DecodeRelMsg(strPlaceholderText, ref strRelVersion, ref strTmpName, ref nType, ref strOpRules, ref strRetMsg))
            {
                return;
            }

            // strPlacerText = strPlaceholderText.Substring(m_strRelTag.Length);

            String strRefOwnerName = "";
            TreeNode refOwnerNode = null;

            // if (strPlacerText.StartsWith("=[")) // reference
            if(nType == 3) // 类型
            {
                // strRefOwnerName = strPlacerText.Substring(2, strPlacerText.Length - 3);
                strRefOwnerName = strOpRules;

                // find owner node
                TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRefOwnerName, true);
                TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRefOwnerName, true);

                if (subNodes1.Length > 0)
                {
                    refOwnerNode = subNodes1[0];
                }
                else if (subNodes2.Length > 0)
                {
                    refOwnerNode = subNodes2[0];
                }
                else
                {
                    // no ref node
                    // 
                    cnt.SetPlaceholderText(null, null, "");
                    // cnt.PlaceholderText.Value = "";

                }

            }
            // else if (strPlacerText.StartsWith("=")) // expr
            else if(nType == 2)
            {
                // strOpRules = strPlacerText.Substring(1);

                bOpChked = true;
            }
            else // def
            {
            }

            // find one availble name
            TreeNode[] fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);// 查找第一分类节点
            TreeNode[] fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true);// 查找第二分类节点

            String strNewName = strName;
            int i = 0;
            while (fndNodes1.Length > 0 || fndNodes2.Length > 0) // 查重
            {
                i++;
                strNewName = strName + "_" + i;// 名称
                fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strNewName, true);// 第一树节点

                if (fndNodes1.Length == 0) // 若没查到
                {
                    fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strNewName, true); // 第二树节点
                }
            }

            if (i > 0)
            {
                Boolean bLock1 = cnt.LockContentControl, bLock2 = cnt.LockContents;

                cnt.LockContentControl = false;
                cnt.LockContents = false;

                cnt.Title = strNewName; // 赋名称

                cnt.LockContentControl = bLock1;
                cnt.LockContents = bLock2;

                strName = strNewName;
            }

            AddOneRel(refOwnerNode, strName, strContent, bOpChked, strOpRules, cnt);// 添加关联 

            return;
        }

        /// <summary>
        /// 构建关联变量网络
        /// </summary>
        private void buildRelNetwork()
        {
            // scan all content controls
            // match features
            // build treenode
            // add rel node
            // udpate and re-calc
            //Word.Application app = m_addin.Application;
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // 准备变量
            String strTitle = "",strName = "", strPlaceholderText = "", strOpRules = "", strContent = "";
            Word.ContentControl ctrl = null;

            Hashtable hashDef = new Hashtable(); // 定义
            ArrayList arrDef = new ArrayList();

            Hashtable hashOp = new Hashtable(); // 运算
            ArrayList arrOp = new ArrayList();

            Hashtable hashRel = new Hashtable(); // 引用
            ArrayList arrRel = new ArrayList();

            Hashtable hashTreeNode = new Hashtable();

            String strRetMsg = "";
            String strTmpName = "", strRelVersion = "";
            int nType = 0;
            // 遍历当前文档的所有内容控件
            foreach (Word.ContentControl cnt in doc.ContentControls)
            {
                if (cnt.Title == null || cnt.Title.Equals("")) // 忽略无名称
                    continue;

                strTitle = cnt.Title;
                if (cnt.Title.Length > m_nRelMaxNameLen) // 名称长度限制
                {
                    strTitle = cnt.Title.Substring(0, m_nRelMaxNameLen);
                }

                strName = strTitle;
                strPlaceholderText = cnt.PlaceholderText.Value;
                strContent = cnt.Range.Text;
                // 解码
                if (!DecodeRelMsg(strPlaceholderText, ref strRelVersion, ref strTmpName, ref nType, ref strOpRules, ref strRetMsg))
                {
                    continue;
                }
                // 名称非空且不相等title
                if (!strTmpName.Equals("") && !strName.Equals(strTmpName))
                {
                    strName = strTmpName;
                    Boolean bLock1 = cnt.LockContentControl, bLock2 = cnt.LockContents;

                    cnt.LockContentControl = false;
                    cnt.LockContents = false;

                    cnt.Title = strName;// 按解码名称设置title

                    cnt.LockContentControl = bLock1;
                    cnt.LockContents = bLock2;
                }

                // if (strOpRules.StartsWith("=["))
                if(nType == 3) // 引用
                {
                    if (!hashRel.Contains(strName))
                    {
                        hashRel.Add(strName,cnt);
                        arrRel.Add(strName);
                    }
                    else
                    {
                        // change name and add into
                        int i = 1;
                        strName = strTitle + "_" + i;
                        while(hashRel.Contains(strName)) // 已有重名则改名
                        {
                            i++;
                            strName = strTitle + "_" + i;
                        }

                        Boolean bLock1 = cnt.LockContentControl, bLock2 = cnt.LockContents;

                        cnt.LockContentControl = false;
                        cnt.LockContents = false;

                        cnt.Title = strName; // 设置名称

                        cnt.LockContentControl = bLock1;
                        cnt.LockContents = bLock2;


                        hashRel.Add(strName, cnt); // 添加
                        arrRel.Add(strName);
                    }
                }
                // else if (strOpRules.StartsWith("="))
                else if (nType == 2) // 运算类型
                {
                    if (!hashOp.Contains(strName))
                    {
                        hashOp.Add(strName, cnt); // 添加
                        arrOp.Add(strName);
                    }
                    else
                    {
                        // change name and add into
                        int i = 1;
                        strName = strTitle + "_" + i;
                        while (hashOp.Contains(strName)) // 改名
                        {
                            i++;
                            strName = strTitle + "_" + i;
                        }

                        Boolean bLock1 = cnt.LockContentControl, bLock2 = cnt.LockContents;

                        cnt.LockContentControl = false;
                        cnt.LockContents = false;

                        cnt.Title = strName;// 设置名称

                        cnt.LockContentControl = bLock1;
                        cnt.LockContents = bLock2;

                        hashOp.Add(strName, cnt); // 添加
                        arrOp.Add(strName);
                    }
                }
                else if(nType == 1) // 定义类型
                {
                    if (!hashDef.Contains(strName))
                    {
                        hashDef.Add(strName, cnt); // 添加
                        arrDef.Add(strName);
                    }
                    else
                    {
                        // change name and add into
                        int i = 1;
                        strName = strTitle + "_" + i;
                        while (hashDef.Contains(strName)) // 重名则改名
                        {
                            i++;
                            strName = strTitle + "_" + i;
                        }

                        Boolean bLock1 = cnt.LockContentControl, bLock2 = cnt.LockContents;

                        cnt.LockContentControl = false;
                        cnt.LockContents = false;

                        cnt.Title = strName; // 改名

                        cnt.LockContentControl = bLock1;
                        cnt.LockContents = bLock2;

                        hashDef.Add(strName, cnt); // 添加
                        arrDef.Add(strName);
                    }
                }
                else
                {
                    continue;
                }
            }

            m_varsHash.Clear();

            //arrDef.Sort();

            foreach (String strItem in arrDef) // 遍历
            {
                strName = strItem;
                ctrl = (Word.ContentControl)hashDef[strName];
                // 新建树节点
                TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, ctrl.Range.Text, "", ctrl);

                if (node != null)
                {
                    m_varsHash[strName] = ctrl; // 变量记录
                    hashTreeNode.Add(strName, node); // 树hash表添加记录
                }

            }

            // op
            //arrOp.Sort();

            foreach (String strItem in arrOp) // 遍历
            {
                strName = strItem;
                ctrl = (Word.ContentControl)hashOp[strName];

                strPlaceholderText = ctrl.PlaceholderText.Value;
                // 解码运算信息
                if (!DecodeRelMsg(strPlaceholderText, ref strRelVersion, ref strTmpName, ref nType, ref strOpRules, ref strRetMsg))
                {
                    continue;
                }
                // 新建树节点
                TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelCalcNodeName], strName, ctrl.Range.Text, strOpRules, ctrl);
                if (node != null)
                {
                    m_varsHash[strName] = ctrl; // 记录对应内容控件
                    hashTreeNode.Add(strName, node);
                }

            }

            String strDependVar = "";

            //arrRel.Sort();

            foreach (String strItem in arrRel)
            {
                strName = strItem;
                ctrl = (Word.ContentControl)hashRel[strName];

                strPlaceholderText = ctrl.PlaceholderText.Value;
                // 解码信息
                if (!DecodeRelMsg(strPlaceholderText, ref strRelVersion, ref strTmpName, ref nType, ref strDependVar, ref strRetMsg))
                {
                    continue;
                }
                // 查找引用的节点
                TreeNode trNode = (TreeNode)hashTreeNode[strDependVar];

                if (trNode != null)
                {
                    TreeNode node = newDefNode(trNode, strName, ctrl.Range.Text, strDependVar, ctrl); // 新建节点
                    if (node != null)
                    {
                        m_varsHash[strName] = ctrl; // 记录对应的内容控件
                    }
                }
                else
                {
                    // create DEF node
                    Boolean bLock1 = ctrl.LockContentControl, bLock2 = ctrl.LockContents;

                    ctrl.LockContentControl = false;
                    ctrl.LockContents = false;

                    ctrl.SetPlaceholderText(null, null, "");
                    // ctrl.PlaceholderText.Value = "";

                    ctrl.LockContentControl = bLock1;
                    ctrl.LockContents = bLock2;

                    // 新建节点
                    TreeNode node = newDefNode(trNode, strName, ctrl.Range.Text, "", ctrl);
                    if (node != null)
                    {
                        m_varsHash[strName] = ctrl;// 记录对应的内容控件
                    }                    
                }

            }
            // 遍历树节点
            foreach (TreeNode trnd in m_tvRel.Nodes)
            {
                relRecalc(trnd); // 重新全部计算
            }

            return;
        }
        /// <summary>
        /// 重新计算
        /// </summary>
        /// <param name="trNd"></param>
        private void relRecalc(TreeNode trNd)
        {
            NodeInfo infoNd = null;
            String strRetMsg = "";

            infoNd = (NodeInfo)trNd.Tag;

            if (infoNd != null)
            {
                // 计算网络传导
                int nRet = m_varsNetWork.ChangeConduct(infoNd.strRelName, infoNd.strRelContent, infoNd.strOpRules, ref strRetMsg);
            }
            // 递归遍历子节点
            foreach (TreeNode childNd in trNd.Nodes)
            {
                relRecalc(childNd);// 重新计算
            }
        }



//         // orig
//         private void buildRelNetwork_v1()
//         {
//             Word.Application app = m_addin.Application;
//             Word.Document doc = app.ActiveDocument;
//             Word.Selection sel = doc.ActiveWindow.Selection;
// 
//             String strName = "", strPlaceholderText = "",strOpRules = "", strContent = "";
//             Word.ContentControl ctrl = null;
//             int nIndex = -1;
//             String strVar = "";
// 
//             Hashtable hashDef = new Hashtable();
//             ArrayList arrDef = new ArrayList();
// 
//             Hashtable hashOp = new Hashtable();
//             ArrayList arrOp = new ArrayList();
// 
//             Hashtable hashRel = new Hashtable();
// 
//             Hashtable hashTreeNode = new Hashtable();
// 
// 
//             foreach (Word.ContentControl cnt in doc.ContentControls)
//             {
//                 strName = cnt.Title;
//                 strPlaceholderText = cnt.PlaceholderText.Value;
//                 strContent = cnt.Range.Text;
// 
//                 if (strPlaceholderText == null || !strPlaceholderText.StartsWith(m_strRelTag) || strName.Trim().Equals(""))
//                     continue;
// 
//                 strOpRules = strPlaceholderText.Replace(m_strRelTag, "");
// 
//                 if (strOpRules.StartsWith("=["))
//                 {
//                     hashRel.Add(strName,cnt);
//                 }
//                 else if (strOpRules.StartsWith("="))
//                 {
//                     hashOp.Add(strName, cnt);
//                     arrOp.Add(strName);
//                 }
//                 else
//                 {
//                     hashDef.Add(strName, cnt);
//                     arrDef.Add(strName);
//                 }
//             }
// 
//             arrDef.Sort();
// 
//             foreach (String strItem in arrDef) 
//             {
//                 strName = strItem;
//                 ctrl = (Word.ContentControl)hashDef[strName];
// 
//                 TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, ctrl.Range.Text, "", ctrl);
// 
//                 if (node != null)
//                 {
//                     m_varsHash[strName] = ctrl;
//                     hashTreeNode.Add(strName, node);
//                 }
// 
// 
//                 nIndex = strName.IndexOf("_");
//                 if (strName.StartsWith("r") && nIndex >= 2)
//                 {
//                     strVar = strName.Substring(nIndex + 1);
// 
//                     if (strVar.Trim().Equals(""))
//                     {
//                         // maybe a difinition
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, ctrl.Range.Text, "", ctrl);
// 
//                         if (node != null)
//                         {
//                             m_varsHash[strName] = ctrl;
//                             hashTreeNode.Add(strName, node);
//                         }
//                     }
//                     else if (hashDef.Contains(strVar))
//                     {
//                         Word.ContentControl defCtrl = (Word.ContentControl)hashDef[strVar];
// 
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strVar, defCtrl.Range.Text, "", defCtrl);
//                         if (node != null)
//                         {
//                             m_varsHash[strName]= ctrl;
// 
//                             hashTreeNode.Add(strName, node);
// 
//                             // insert a reference under definition
//                             String strSn = strName.Substring(1, nIndex - 1);
//                             int nCnt = 0;
// 
//                             if (int.TryParse(strSn, out nCnt))
//                             {
//                                 // get max value
//                                 m_nRefCnt = (nCnt > m_nRefCnt) ? (uint)nCnt : m_nRefCnt;
//                             }
// 
//                             TreeNode trnd = new TreeNode(strName);
//                             NodeInfo ndInfo = new NodeInfo();
// 
//                             ndInfo.strRelName = strName;
//                             ndInfo.strRelContent = ctrl.Range.Text;
//                             ndInfo.strOpRules = "";
//                             ndInfo.objContentCtrl = ctrl;
// 
//                             trnd.Tag = ndInfo;
//                             trnd.Name = strName;
//                             trnd.Text = strName;
// 
//                             node.Nodes.Add(trnd);
// 
//                         }
//                     }
//                     else
//                     {
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, ctrl.Range.Text, "", ctrl);
//                         if (node != null)
//                         {
//                             m_varsHash[strName] = ctrl;
//                             hashTreeNode.Add(strName, node);
//                         }
//                     }
//                 }
//                 else
//                 {
//                     TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, ctrl.Range.Text, "", ctrl);
//                     if (node != null)
//                     {
//                         m_varsHash[strName] = ctrl;
//                         hashTreeNode.Add(strName, node);
//                     }
//                 }
//             }
// 
// 
//             // op
//             arrOp.Sort();
// 
//             foreach(String strItem in arrOp)
//             {
//                 strName = strItem;
//                 ctrl = (Word.ContentControl)hashOp[strName];
// 
//                 strOpRules = ctrl.PlaceholderText.Value.Substring(m_strRelTag.Length+1);
// 
//                 nIndex = strName.IndexOf("_");
//                 if (strName.StartsWith("r") && nIndex >= 2)
//                 {
//                     strVar = strName.Substring(nIndex + 1);
// 
//                     if (strVar.Trim().Equals(""))
//                     {
//                         // maybe a difinition
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelCalcNodeName], strName, ctrl.Range.Text, strOpRules, ctrl);
//                         if (node != null)
//                             m_varsHash[strName]= ctrl;
//                     }
//                     else if (hashDef.Contains(strVar))
//                     {
//                         Word.ContentControl defCtrl = (Word.ContentControl)hashDef[strVar];
// 
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelCalcNodeName], strVar, defCtrl.Range.Text, strOpRules, defCtrl);
//                         if (node != null)
//                         {
//                             m_varsHash[strName]= ctrl;
// 
//                             // insert a reference under definition
//                             String strSn = strName.Substring(1, nIndex - 1);
//                             int nCnt = 0;
// 
//                             if (int.TryParse(strSn, out nCnt))
//                             {
//                                 // get max value
//                                 m_nRefCnt = (nCnt > m_nRefCnt) ? (uint)nCnt : m_nRefCnt;
//                             }
// 
//                             TreeNode trnd = new TreeNode(strName);
//                             NodeInfo ndInfo = new NodeInfo();
// 
//                             ndInfo.strRelName = strName;
//                             ndInfo.strRelContent = ctrl.Range.Text;
//                             ndInfo.strOpRules = strOpRules;
//                             ndInfo.objContentCtrl = ctrl;
// 
//                             trnd.Tag = ndInfo;
//                             trnd.Name = strName;
//                             trnd.Text = strName;
// 
//                             node.Nodes.Add(trnd);
// 
//                         }
//                     }
//                     else
//                     {
//                         TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelCalcNodeName], strName, ctrl.Range.Text, strOpRules, ctrl);
//                         if (node != null)
//                             m_varsHash[strName]= ctrl;
//                     }
//                 }
//                 else
//                 {
//                     TreeNode node = newDefNode(m_tvRel.Nodes[m_strRelCalcNodeName], strName, ctrl.Range.Text, strOpRules, ctrl);
//                     if (node != null)
//                         m_varsHash[strName]= ctrl;
//                 }
//             }
// 
//             // update , recalc
//             NodeInfo infoNd = null;
//             String strInfo = "";
//             foreach (TreeNode trnd in m_tvRel.Nodes[m_strRelDefNodeName].Nodes)
//             {
//                 infoNd = (NodeInfo)trnd.Tag;
//                 Word.ContentControl cntCtrl = (Word.ContentControl)infoNd.objContentCtrl;
// 
//                 updateRefs(cntCtrl, ref strInfo);
//             }
// 
//             return;
//         }


        /// <summary>
        /// 重建关联树
        /// </summary>
        private void buildRelTree()
        {
            // 当前变量值
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;
            Word.ContentControls cntCtrls = curDoc.ContentControls;

            System.Collections.ArrayList refArrayList = new System.Collections.ArrayList();

            String strName = "", strContent = "", strOpRules = "";
            String strVar = "";

            foreach (Word.ContentControl ctrl in cntCtrls) // 内容控件
            {
                strName = ctrl.Title;
                strOpRules = ctrl.PlaceholderText.Value;
                strContent = ctrl.Range.Text;

                if (strName.Trim().Equals("")) // 忽略无标题名称
                    continue;

                // 
                if(strOpRules.Trim().Equals("")) // 运算不空
                {
                    // definition
                    TreeNode node = FindOneNode(m_tvRel.Nodes[m_strRelDefNodeName], strName, true, true);
                    if (node == null)
                    {
                        TreeNode trnd   = new TreeNode(strName);// 新建节点
                        NodeInfo ndInfo = new NodeInfo();

                        ctrl.LockContents = false;
                        ctrl.LockContentControl = false;

                        ndInfo.strRelName = strName;// 赋值
                        ndInfo.strRelContent = strContent;// 赋值
                        ndInfo.strOpRules = strOpRules;// 赋值
                        ndInfo.objContentCtrl = ctrl;// 赋值

                        ctrl.LockContents = false;
                        ctrl.LockContentControl = true;

                        trnd.Tag = ndInfo; // 赋值
                        trnd.Name = strName;// 赋值
                        trnd.Text = strName;// 赋值

                        m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Add(trnd);// 增加节点

                        m_varsHash[strName]= ctrl;// 记录对应内容控件

                    }
                    else
                    {
                        //  
                    }
                }
                else
                {
                    if(strOpRules.IndexOf("=") == 0) // 引用
                    {
                        TreeNode trnd = new TreeNode(strName); // 新建节点
                        NodeInfo ndInfo = new NodeInfo();

                        Boolean bOprationRef = false;

                        // ref
                        // 
                        String strParsedContent = "";
                        // strParsedContent = ParserOpRules(strOpRules, ref ndInfo.hashVarsTbl);

                        if (ndInfo.hashVarsTbl.Count == 1) // 引用数
                        {
                            System.Collections.IDictionaryEnumerator enumRator = ndInfo.hashVarsTbl.GetEnumerator();
                            while (enumRator.MoveNext()) // 遍历
                            {
                                strVar = (String)enumRator.Current;
                            }

                            if (strOpRules.Equals("=" + strVar)) // 若相等
                            {
                                bOprationRef = false;
                                // ref
                                // 
                                refArrayList.Add(ctrl); // 记录
                                continue;

                            }
                            else
                            {
                                bOprationRef = true; // 
                            }

                        }
                        else
                        {
                            bOprationRef = true;
                        }

                        // operation def
                        // 
                        if (bOprationRef)
                        {   // 查找节点
                            TreeNode node = FindOneNode(m_tvRel.Nodes[m_strRelCalcNodeName], strName, true, true);
                            if (node == null)
                            {
                                ctrl.LockContents = false;
                                ctrl.LockContentControl = false;

                                ndInfo.strRelName = strName; // 赋值记录
                                ndInfo.strRelContent = strContent; // 赋值记录
                                ndInfo.strOpRules = strOpRules; // 赋值记录
                                ndInfo.objContentCtrl = ctrl; // 赋值记录

                                ctrl.LockContents = true;
                                ctrl.LockContentControl = true;

                                trnd.Tag = ndInfo; // 赋值记录
                                trnd.Name = strName; // 赋值记录
                                trnd.Text = strName; // 赋值记录
                                ctrl.Range.Text = strParsedContent;

                                m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Add(trnd);// 增加节点

                                m_varsHash[strName]= ctrl;// 记录内容控件
                            }
                            else
                            {
                                // 
                            }
                        }

                    }
                    else
                    {
                        // 
                    }
                }

            }// foreach

            // add single ref
            for (int i = 0; i < refArrayList.Count; i++) // 遍历记录队列
            {
                Word.ContentControl ctrl = (Word.ContentControl)refArrayList[i];

                strName = ctrl.Title;
                strOpRules = ctrl.PlaceholderText.Value;
                strContent = ctrl.Range.Text;

                strVar = strOpRules.Substring(strOpRules.IndexOf("=") + 1);// 截取信息

                TreeNode node = null;

                foreach (TreeNode nd in m_tvRel.Nodes) // 遍历
                {
                    node = FindOneNode(nd, strName, true, true);// 查找节点
                    if (node != null)
                        break;
                }

                if (node != null)
                {
                    continue;
                }

                foreach (TreeNode nd in m_tvRel.Nodes) // 遍历
                {
                    node = FindOneNode(nd, strVar, true, true); // 查找节点
                    if (node != null)
                        break;
                }

                if (node == null)
                {
                    continue; // no match definition
                }

                if (node.Level != 2)
                {
                    continue;
                }

                TreeNode trnd = new TreeNode(strName);
                NodeInfo ndInfo = new NodeInfo();

                ctrl.LockContents = false;
                ctrl.LockContentControl = false;

                ndInfo.strRelName = strName; // 赋值
                ndInfo.strRelContent = strContent; // 赋值
                ndInfo.strOpRules = strOpRules; // 赋值
                ndInfo.objContentCtrl = ctrl; // 赋值

                ctrl.LockContents = true;
                ctrl.LockContentControl = true;

                trnd.Tag = ndInfo; // 赋值
                trnd.Name = strName; // 赋值
                trnd.Text = strName; // 赋值

                node.Nodes.Add(trnd); // 添加节点

            }

            // update , recalc
            String strInfo = "";
            foreach (TreeNode trnd in m_tvRel.Nodes[m_strRelDefNodeName].Nodes)// 遍历节点
            {
                NodeInfo ndInfo = (NodeInfo)trnd.Tag;

                Word.ContentControl cntCtrl = (Word.ContentControl)ndInfo.objContentCtrl; // 取内容控件

                updateRefs(cntCtrl, ref strInfo); // 更新相关引用
            }


        }
        /// <summary>
        /// 测试区代码
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnTest1_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            // no version
            // txtResult.Text = 
        }

        void m_curDoc_XMLBeforeDelete(Word.Range DeletedRange, Word.XMLNode OldXMLNode, bool InUndoRedo)
        {
            //String strRet = "XMLBeforeDelete";
            //MessageBox.Show(strRet);
        }

        void m_curDoc_XMLAfterInsert(Word.XMLNode NewXMLNode, bool InUndoRedo)
        {
            //String strRet = "XMLAfterInsert";
            //MessageBox.Show(strRet);
        }

        void m_curDoc_ContentControlBeforeStoreUpdate(Word.ContentControl ContentControl, ref string Content)
        {
            //MessageBox.Show(Content);
            //String strRet = "BeforeStoreUpdate";
            //MessageBox.Show(strRet);
        }

        void m_curDoc_BuildingBlockInsert(Word.Range Range, string Name, string Category, string BlockType, string Template)
        {
            //String strRet = "BuildingBlockInsert";
            //MessageBox.Show(strRet);
        }

        void m_curDoc_ContentControlAfterAdd(Word.ContentControl NewContentControl, bool InUndoRedo)
        {
            String strPlaceHolderText = null;
            // 内容控件的类型
            if (NewContentControl.Type == Word.WdContentControlType.wdContentControlRichText)
            {
                if (NewContentControl.PlaceholderText != null)
                {
                    strPlaceHolderText = NewContentControl.PlaceholderText.Value; // 取placer hold的文本
                }

                if (String.IsNullOrWhiteSpace(strPlaceHolderText))
                {
                    return;
                }

                // 判断是否是关联计算的特征
                if (IsRelContentControl(strPlaceHolderText) )
                {
                    if (m_addin.searchPermission("tabPageRel") == 0) // 无权限
                    {
                        MessageBox.Show("警告：没有权限！增加内容不会正确计算", "警告", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    }
                    else
                    {
                        if (m_bStopCallHandler)
                            return;

                        ResetSearch();

                        m_varsNetWork.m_bInUndoRedo = InUndoRedo;
                        buildOneRelNode(ref NewContentControl); // 重建单个内容控件
                        m_varsNetWork.m_bInUndoRedo = false;
                    }
                }
                else
                {
                    onAddFormCntItem(NewContentControl);
                }
            }

            return;
        }


        protected String m_strOldContent = "";

        private TreeNode m_fndTreeNode = null;
        /// <summary>
        /// OnEnter内容控件
        /// </summary>
        /// <param name="ContentControl"></param>
        void m_curDoc_ContentControlOnEnter(Word.ContentControl ContentControl)
        {   // 若内容控件类型是rich text
            if (ContentControl.Type == Word.WdContentControlType.wdContentControlRichText)
            {
                String strPlacerHolder = null;

                if (ContentControl.PlaceholderText != null)
                {
                    strPlacerHolder = ContentControl.PlaceholderText.Value; // 取附加信息
                }

                // 若是Rel的特征
                if (strPlacerHolder != null && IsRelContentControl(strPlacerHolder) )
                {
//                     if (m_addin.searchPermission("tabPageRel") == 0)
//                     {
//                         // MessageBox.Show("警告：没有权限！修改内容不会正确计算", "警告", MessageBoxButtons.OK, MessageBoxIcon.Stop);
//                     }
//                     else
                    {
                        if (m_bStopCallHandler)
                            return;
                    
                        m_curActiveCnt = ContentControl; // 记录当前控件
                        m_strOldContent = ContentControl.Range.Text; // 原先值

                        // 
                        String strName = ContentControl.Title;
                        TreeNode nd = null;
                        // 查找名称
                        TreeNode[] fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);
                        TreeNode[] fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true);

                        if (fndNodes1.Length > 0) // 若找到
                        {
                            nd = fndNodes1[0];
                        }
                        else if (fndNodes2.Length > 0) // 若找到
                        {
                            nd = fndNodes2[0];
                        }
                        else
                        {

                        }

                        if (nd == null)
                        {
                            return;
                        }

                        if (nd != null)
                        {
                            //m_tvRel.SelectedNode = nd;
                            nd.ForeColor = Color.Red; // 标记

                            if (m_fndTreeNode != null && m_fndTreeNode != nd)
                                m_fndTreeNode.ForeColor = Color.Black;

                            m_fndTreeNode = nd;
                            if(!nd.IsVisible)
                            {
                                nd.EnsureVisible();
                            }

                            updateRelUIInfo(nd); // 更新

                        }
                    }
                }
                else
                {
                    onEnterFormCntItem(ContentControl);
                }

            }


            // form
            Control formCtrl = (Control)m_hashFormCtrls[ContentControl.ID];
            if (formCtrl != null)
            {
                tblFormLayoutPanel.ScrollControlIntoView(formCtrl); // 定位viewpoint到此
            }

            return;
        }


        void m_curDoc_ContentControlBeforeContentUpdate(Word.ContentControl ContentControl, ref string Content)
        {
            // String strRet = "CC:" + Content + ":" + ContentControl.Range.Text;
            // MessageBox.Show(strRet);
        }

        private System.Collections.Hashtable m_usedVars = new System.Collections.Hashtable();
        /// <summary>
        /// 更新所有的关联变量
        /// </summary>
        /// <param name="ContentControl"></param>
        /// <param name="strInfo"></param>
        /// <returns></returns>
        int updateRefs(Word.ContentControl ContentControl,ref String strInfo)
        {
            int nRet = 0;

            String strTag = ContentControl.PlaceholderText.Value;

            if (!strTag.StartsWith(m_strRelTag)) // 判断前导符
            {
                strInfo = "非运算控件";
                return -1;
            }
            
            // find tree node and then update the refs under this node(recalc)
            String strName = ContentControl.Title;

            TreeNode foundNode = null;

            foreach (TreeNode nd in m_tvRel.Nodes) // 遍历
            {
                foundNode = FindOneNode(nd, strName, true, true);// 查找单个节点
                if (foundNode != null)
                    break;
            }

            if (foundNode == null)
            {
                nRet = -1;
                strInfo = "错误！无节点对应！";
                return nRet;
            }

            NodeInfo infoNd =(NodeInfo)foundNode.Tag;
            infoNd.strRelContent = ContentControl.Range.Text;

            // update children nodes
            for (int j = 0; j < foundNode.Nodes.Count; j++) // 更新子节点
            {
                TreeNode childTn = foundNode.Nodes[j];
                NodeInfo childNd = (NodeInfo)childTn.Tag;
                Word.ContentControl childCtrl = (Word.ContentControl)childNd.objContentCtrl; 
                childCtrl.Range.Text = ContentControl.Range.Text; // set same 
            }
            
            // find all ref of this var
            System.Collections.ArrayList refList = new System.Collections.ArrayList();

            SearchRefs(strName, ref refList); // 查找

            if (refList.Count > 0)
            {
                m_usedVars.Add(strName, ContentControl); // 使用的变量
            }

            // notify all defs to update
            for (int i = 0; i < refList.Count; i++)
            {
                TreeNode tn = (TreeNode)refList[i];
                NodeInfo nd = (NodeInfo)tn.Tag;
                Word.ContentControl defCtrl = (Word.ContentControl)nd.objContentCtrl;

                if (!m_usedVars.Contains(tn.Name))// 使用的变量若包括
                {
                    // recalc cur value
                    String strResult = ""; // ParserOpRules(nd.strOpRules, ref nd.hashVarsTbl);

                    //defCtrl.LockContents = false;
                    defCtrl.Range.Text = strResult;

                    //defCtrl.LockContents = true;

                    nRet = updateRefs(defCtrl,ref strInfo); // 更新
                }
                else
                {
                    strInfo = "错误！循环引用:" + tn.Name; // 否则提示循环引用
                    nRet = -1;
                    break;
                }
            }

            m_usedVars.Remove(strName); // 去除

            return nRet;
        }
        /// <summary>
        /// 刷新所有的关联变量
        /// </summary>
        public void refreshAllRels()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;

//             Word.ContentControls cnts = null;
// 
//             cnts = sel.Range.ContentControls;
// 
//             foreach (Word.ContentControl ContentControl in cnts)
//             {
//                 updateRelInContentControl(ContentControl, true);
//             }// for            


            if (m_curActiveCnt != null)
            {
                updateRelInContentControl(m_curActiveCnt); // 从当前内容控件进行更新（传导）
                
                if(m_fndTreeNode != null)
                {
                    updateRelUIInfo(m_fndTreeNode); // 同步更新界面的信息
                }

            }
            else
            {
                foreach (Word.ContentControl ctrl in sel.Range.ContentControls) // 选中区的内容控件
                {
                    updateRelInContentControl(ctrl); // 更新传导
                }

                if (sel.Range.ParentContentControl != null) // 若选中区有父内容控件
                {
                    updateRelInContentControl(sel.Range.ParentContentControl); // 更新传导
                }

            }

            return;
        }
        /// <summary>
        /// 强制重算
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRelForceCompute_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            Word.ContentControls cnts = null;

            if (sel.Range.End - sel.Range.Start <= 1) // 未作选择
            {
                cnts = curDoc.ContentControls; // 全文
            }
            else
            {
                cnts = sel.Range.ContentControls; // 选择区的
            }

            foreach (Word.ContentControl ContentControl in cnts) // 遍历
            {
                updateRelInContentControl(ContentControl, true); // 更新
            }// for

            return;
        }

        /// <summary>
        /// 更新关联变量
        /// </summary>
        /// <param name="ContentControl"></param>
        /// <param name="bForce"></param>
        public void updateRelInContentControl(Word.ContentControl ContentControl, Boolean bForce = false)
        {
            String strNowContent = "";
            int nRet = 0;
            // 若是特定类型的内容控件
            if (ContentControl.Type == Word.WdContentControlType.wdContentControlRichText)
            {
                String strPlaceHolder = null;

                if (ContentControl.PlaceholderText != null)
                {
                    strPlaceHolder = ContentControl.PlaceholderText.Value; // 取值
                }
                // 若是符合关联特征的
                if (strPlaceHolder != null && IsRelContentControl(strPlaceHolder))
                {
                    strNowContent = ContentControl.Range.Text;

                    if (!bForce && m_strOldContent != null && strNowContent.Equals(m_strOldContent)) // 内容未变
                    {
                        return; // no update
                    }

                    if (m_fndTreeNode != null) // 对应查找到的节点
                    {
                        NodeInfo ndInfo = (NodeInfo)m_fndTreeNode.Tag;
                        if (ndInfo == null)
                            return;

                        Word.ContentControl ctrl = (Word.ContentControl)ndInfo.objContentCtrl;
                        if (ctrl != null || ctrl.ID == ContentControl.ID)
                        {
                            ndInfo.strRelContent = strNowContent;
                            String strRetMsg = "";
                            nRet = m_varsNetWork.ChangeConduct(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg); // 内容传导

                            // 
                            // updateRelUIInfo(m_fndTreeNode);
                        }
                        else
                        {
                            // 
                        }

                    }
                    else
                    {
                        // search
                        // 
                        String strName = ContentControl.Title;
                        TreeNode nd = null;
                        // 查找
                        TreeNode[] fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);
                        TreeNode[] fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true);

                        if (fndNodes1.Length > 0) // 若找到
                        {
                            nd = fndNodes1[0];
                        }
                        else if (fndNodes2.Length > 0) // 若找到
                        {
                            nd = fndNodes2[0];
                        }
                        else
                        {

                        }

                        if (nd != null)
                        {
                            NodeInfo ndInfo = (NodeInfo)nd.Tag;

                            if (ndInfo == null)
                                return;

                            Word.ContentControl ctrl = (Word.ContentControl)ndInfo.objContentCtrl;
                            if (ctrl != null || ctrl.ID == ContentControl.ID)
                            {
                                ndInfo.strRelContent = strNowContent;
                                String strRetMsg = "";
                                nRet = m_varsNetWork.ChangeConduct(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg); // 计算传导

                                // 
                                // updateRelUIInfo(nd);
                            }
                            else
                            {
                                // 
                            }
                        }

                    }

                }
            }
//                 if (m_fndTreeNode != null)
//                 {
//                     if (m_strOldContent != null && strNowContent.Equals(m_strOldContent))
//                     {
//                         return; // no update
//                     }
// 
//                     NodeInfo ndInfo = (NodeInfo)m_fndTreeNode.Tag;
// 
//                     if (ndInfo == null)
//                         return;
// 
//                     Word.ContentControl ctrl = (Word.ContentControl)ndInfo.objContentCtrl;
//                     if (ctrl != null || ctrl.ID == ContentControl.ID)
//                     {
//                         ndInfo.strRelContent = strNowContent;
//                         String strRetMsg = "";
//                         nRet = m_varsNetWork.ChangeConduct(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg);
// 
//                         // 
// 
//                     }
//                 }
            return;
        }

        private void m_curDoc_ContentControlOnExit(Word.ContentControl ContentControl, ref bool Cancel)
        {
            String strNowContent = "";
            int nRet = 0;
            // 特定类型的内容控件
            if (ContentControl.Type == Word.WdContentControlType.wdContentControlRichText)
            {
                String strPlaceHolder = null;

                if (ContentControl.PlaceholderText != null)
                {
                    strPlaceHolder = ContentControl.PlaceholderText.Value; // 取值
                }
                // 判断是否符合特征
                if (strPlaceHolder != null && IsRelContentControl(strPlaceHolder) )
                {
//                     if (m_addin.searchPermission("tabPageRel") == 0)
//                     {
//                         MessageBox.Show("警告：没有权限！修改内容不会正确计算", "警告", MessageBoxButtons.OK, MessageBoxIcon.Stop);
//                     }
//                     else
                    {
                        if (m_bStopCallHandler)
                            return;

                        m_curActiveCnt = null; // 清空
                        strNowContent = ContentControl.Range.Text; // 记录值

                        if (m_fndTreeNode != null) // 重置对应树节点
                        {
                            m_fndTreeNode.ForeColor = Color.Black;
                            if (m_strOldContent != null && strNowContent.Equals(m_strOldContent))
                            {
                                m_strOldContent = null;
                                m_fndTreeNode = null;
                                return; // no update
                            }

                            NodeInfo ndInfo = (NodeInfo)m_fndTreeNode.Tag;
                            if (ndInfo == null)
                                return;

                            Word.ContentControl ctrl = (Word.ContentControl)ndInfo.objContentCtrl;
                            if (ctrl != null || ctrl.ID == ContentControl.ID)
                            {
                                ndInfo.strRelContent = strNowContent;
                                String strRetMsg = "";
                                nRet = m_varsNetWork.ChangeConduct(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg); // 传导

                                // 传导改变
                                updateRelUIInfo(m_fndTreeNode);
                            }
                            else
                            {
                                // 
                            }

                        }
                        else
                        {
                            // search
                            // 
                            String strName = ContentControl.Title;
                            TreeNode nd = null;
                            // 查找
                            TreeNode[] fndNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strName, true);
                            TreeNode[] fndNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strName, true);

                            if (fndNodes1.Length > 0)
                            {
                                nd = fndNodes1[0];
                            }
                            else if (fndNodes2.Length > 0)
                            {
                                nd = fndNodes2[0];
                            }
                            else
                            {

                            }

                            if (nd != null)
                            {
                                nd.ForeColor = Color.Black; // 更新
                                // 若相等
                                if (m_strOldContent != null && strNowContent.Equals(m_strOldContent))
                                {
                                    m_strOldContent = null;
                                    m_fndTreeNode = null;
                                    return; // no update
                                }

                                NodeInfo ndInfo = (NodeInfo)nd.Tag;

                                if (ndInfo == null)
                                    return;

                                Word.ContentControl ctrl = (Word.ContentControl)ndInfo.objContentCtrl;
                                if (ctrl != null || ctrl.ID == ContentControl.ID) // 若是同一个控件
                                {
                                    ndInfo.strRelContent = strNowContent; // 更新值
                                    String strRetMsg = "";
                                    nRet = m_varsNetWork.ChangeConduct(ndInfo.strRelName, ndInfo.strRelContent, ndInfo.strOpRules, ref strRetMsg);// 传导

                                    // 
                                    updateRelUIInfo(nd); // 更新UI值
                                }
                                else
                                {
                                    // 
                                }
                            }

                        }

                        m_strOldContent = null;
                        m_fndTreeNode = null;
                    }
                }
                else
                {
                    onLeaveFormCntItem(ContentControl);
                }
            }

            // form
            Control formCtrl = (Control)m_hashFormCtrls[ContentControl.ID];
            if (formCtrl != null)
            {
                // tblFormLayoutPanel.ScrollControlIntoView(formCtrl);
                formCtrl.Text = ContentControl.Range.Text; // 获取值
            }

            return;
        }

        /// <summary>
        /// 删除内容控件
        /// </summary>
        /// <param name="OldContentControl"></param>
        /// <param name="InUndoRedo"></param>
        void m_curDoc_ContentControlBeforeDelete(Word.ContentControl OldContentControl, bool InUndoRedo)
        {   // 内容控件
            if (OldContentControl.Type != Word.WdContentControlType.wdContentControlRichText)
            {
                return;
            }

            String strPlaceHolderText = null;

            if (OldContentControl.PlaceholderText != null)
            {
                strPlaceHolderText = OldContentControl.PlaceholderText.Value;// 取值
            }

            if(String.IsNullOrWhiteSpace(strPlaceHolderText))
            {
                return;
            }

            // 若是关联变量的特征值
            if (strPlaceHolderText != null && IsRelContentControl(strPlaceHolderText) )
            {
                if (m_addin.searchPermission("tabPageRel") == 0) // 无权限
                {
                    MessageBox.Show("警告：没有权限！变更内容不会正确计算", "警告", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                else
                {
                    if (m_bStopCallHandler)
                        return;

                    String strRelName = OldContentControl.Title;

                    m_varsNetWork.m_bInUndoRedo = InUndoRedo; // 记录设定

                    if (m_fndTreeNode != null) 
                    {
                        NodeInfo ndInfo = (NodeInfo)m_fndTreeNode.Tag;

                        if (ndInfo == null)
                            return;

                        Word.ContentControl cnt = (Word.ContentControl)ndInfo.objContentCtrl;

                        if (cnt.ID.Equals(OldContentControl.ID)) // ID相同
                        {
                            ResetSearch();

                            m_bStopCallHandler = true;
                            RemoveRelNode(m_fndTreeNode, OldContentControl); // 删除对应树节点
                            m_bStopCallHandler = false;
                        }

                        m_fndTreeNode = null;
                    }
                    else
                    {
                        // remove from rel tree
                        TreeNode[] subNodes1 = m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Find(strRelName, true);
                        TreeNode[] subNodes2 = m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Find(strRelName, true);
                        // 查找
                        foreach (TreeNode node in subNodes1)
                        {
                            NodeInfo ndInfo = (NodeInfo)node.Tag;

                            if (ndInfo == null)
                                continue;

                            Word.ContentControl cnt = (Word.ContentControl)ndInfo.objContentCtrl;
                            // 若ID相同
                            if (cnt.ID.Equals(OldContentControl.ID))
                            {
                                ResetSearch();

                                m_bStopCallHandler = true;
                                RemoveRelNode(node, OldContentControl); // 删除树节点
                                m_bStopCallHandler = false;
                            }
                        }
                        // 遍历树节点2
                        foreach (TreeNode node in subNodes2)
                        {
                            NodeInfo ndInfo = (NodeInfo)node.Tag;

                            if (ndInfo == null)
                                continue;

                            Word.ContentControl cnt = (Word.ContentControl)ndInfo.objContentCtrl;
                            // 若ID相同
                            if (cnt.ID.Equals(OldContentControl.ID))
                            {
                                ResetSearch();

                                m_bStopCallHandler = true;
                                RemoveRelNode(node, OldContentControl); // 删除节点
                                m_bStopCallHandler = false;
                            }
                        }
                    }

                    m_varsNetWork.m_bInUndoRedo = false; // 还原设置

                    if (m_curActiveCnt != null && m_curActiveCnt.ID.Equals(OldContentControl.ID)) // id相同
                    {
                        m_curActiveCnt = null; // 清除记录
                        m_strOldContent = null; // 清除记录
                        m_fndTreeNode = null; // 清除记录
                    }
                }
            }
            else
            {
                onDeleteFormCntItem(OldContentControl);
            }

            return;
        }


        private Boolean m_bStopCallHandler = false;

        private void btnMove_Click(object sender, EventArgs e)
        {
            // remember cur cursor
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            Word.Range rgCursor = sel.Range;

            // move cur ctrl here 
            if (m_tvRel.SelectedNode != null) // 选择非空
            {
                NodeInfo nd = (NodeInfo)m_tvRel.SelectedNode.Tag; 

                Word.ContentControl ctrl = (Word.ContentControl)nd.objContentCtrl;

                Boolean bLock1 = ctrl.LockContentControl, bLock2 = ctrl.LockContents;

                if (ctrl != null) // 
                {
                    String strRetMsg = "";
                    Boolean bVal = IsOverlapCnt(ref strRetMsg); // 是否重叠 
                    if (!bVal)
                    {
                        MessageBox.Show(strRetMsg);
                        return;
                    }

                    ctrl.LockContentControl = false;
                    ctrl.LockContents = false;

                    m_bStopCallHandler = true;
                    // choose whole control
                    ctrl.Range.Select(); // 选择
                    sel.Cut();           // 剪切

                    rgCursor.Select();
                    sel.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 复制

                    // restore
                    ctrl.LockContentControl = bLock1;
                    ctrl.LockContents = bLock2;

                    m_bStopCallHandler = false;
                }
            }

        }

        // 标点符号判断
        private Boolean isPunctuation(Char ch)
        {
            if (ch.Equals(':') || ch.Equals('：') || ch.Equals(',') || ch.Equals('，'))
            {
                return true;
            }

            return false;
        }

        public class ParaInfo // 段落信息
        {
            public int PageNum; // absolute page num
            public int AdjustedPageNum; // 
            public int LineNum; // relative Num
        }

        public class MLNode<T>
        {
            private T data;                   //存储结点的数据
            private System.Collections.ArrayList childs;       //存储子结点的位置

            public MLNode()
            {
                childs = new System.Collections.ArrayList();
            }

            public T Data
            {
                get { return data; }
                set { data = value; }
            }

            public System.Collections.ArrayList Childs
            {
                get { return childs; }
                set { childs = value; }
            }
        }

        private class twoItem // 双节点项
        {
            public Word.Paragraph para; // 段落
            public Boolean bAdded; // 是否已加
        }

        /// <summary>
        /// 判断字体是否完全相同
        /// </summary>
        /// <param name="fnt1"></param>
        /// <param name="fnt2"></param>
        /// <returns></returns>
        private Boolean isSameFont(Word.Font fnt1, Word.Font fnt2)
        {
            Boolean bRet = false;
            // 比较
            bRet = (fnt1.Bold == fnt2.Bold && fnt1.Italic == fnt2.Italic &&
                    fnt1.BoldBi == fnt2.BoldBi && fnt1.BoldBi == fnt2.BoldBi &&
                    fnt1.Name.Equals(fnt2.Name) && fnt1.Color == fnt2.Color &&
                    fnt1.ColorIndex == fnt2.ColorIndex && fnt1.ColorIndexBi == fnt2.ColorIndexBi &&
                    fnt1.ItalicBi == fnt2.ItalicBi && fnt1.NameAscii.Equals(fnt2.NameAscii) &&
                    fnt1.NameBi.Equals(fnt2.NameBi) && fnt1.NameFarEast.Equals(fnt2.NameFarEast) &&
                    fnt1.NameOther.Equals(fnt2.NameOther) && 
                    fnt1.Size == fnt2.Size && fnt1.SizeBi == fnt2.SizeBi &&
                    fnt1.StrikeThrough == fnt2.StrikeThrough && 
                    fnt1.DoubleStrikeThrough == fnt2.DoubleStrikeThrough && 
                    fnt1.Emboss == fnt2.Emboss && 
                    fnt1.Underline == fnt2.Underline && 
                    fnt1.UnderlineColor == fnt2.UnderlineColor);

            return bRet;
        }
        /// <summary>
        /// 检查当前文档
        /// </summary>
        private void checkDoc()
        {
            String priority = "1", lineNum = "", category = "xxx";
            int pageNum = 0;
            int num1 = 0;
            Boolean bRet = false, bIsTable = false, bEmpty = true;

            System.Collections.Hashtable paraHash = new System.Collections.Hashtable();
            System.Collections.Hashtable paraNamePageHash = new System.Collections.Hashtable();

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            ParaInfo paraInfo = new ParaInfo();
            String strNamePage = "";

            Word.Paragraph para, prePara, textBodyPara = null;
            System.Collections.ArrayList paraArray = new System.Collections.ArrayList();

            Word.Document document = doc;

            tvCheckedItems.Nodes.Clear();
            m_CateHashtable.Clear();
            m_subCateHashtable.Clear();

            // 初始化
            progbarCheck.Left = txtCheckSearchKeyWord.Left;
            progbarCheck.Top = txtCheckSearchKeyWord.Top;
            progbarCheck.Width = txtCheckSearchKeyWord.Width;
            progbarCheck.Height = txtCheckSearchKeyWord.Height;
            progbarCheck.Visible = true;
            progbarCheck.Value = 0;

            progbarCheck.Maximum = document.Paragraphs.Count;

            ArrayList firstPageParasArr = new ArrayList();

            for (int i = 1; i <= document.Paragraphs.Count; i++) // 扫描当前文档的所有段落
            {
                para = document.Paragraphs[i];

                if (para.Range.ShapeRange.Count > 0   ||
                    para.Range.InlineShapes.Count > 0 ||
                    para.Range.End - para.Range.Start <= 1)
                {
                    continue; 
                }

                bIsTable = para.Range.get_Information(Word.WdInformation.wdWithInTable); // 在表格中

                if (bIsTable) // 忽略表格
                {
                    continue;
                }

                // 封页的大字体是否居中
                // found the biggest font in 1st page
                int nPage = para.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                if (nPage == 1)
                {
                    // para.Range.ParagraphFormat.Alignment
                    firstPageParasArr.Add(para); // 记录当前封面段落
                }
                else
                {
                    break;
                }
            }// for

            CFontSizeComparer cmp = new CFontSizeComparer();
            firstPageParasArr.Sort(cmp); // 排序
            foreach (Word.Paragraph wPara in firstPageParasArr) // 遍历
            {
                // @@大于正文的前3个
                if (wPara.Range.Font.Size > 16 &&  
                    wPara.Range.ParagraphFormat.Alignment != Word.WdParagraphAlignment.wdAlignParagraphCenter)
                {
                    category = "封面显著段落未居中";
                    insertRecord(priority, category, wPara); // 记录字体
                }
            }

            int prePageNum = -1, curPageNum = -1;
            Boolean bEmptyPage = true;
            Word.Paragraph firstParaOfEmptyPage = null;

            for (int i = 1; i <= document.Paragraphs.Count; i++) // 扫描段落
            {
                progbarCheck.Value++;

                para = document.Paragraphs[i]; 


                curPageNum = para.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber); // 取页码
                if (curPageNum != prePageNum)
                {
                    if (bEmptyPage && firstParaOfEmptyPage != null)
                    {
                        category = "可能出现完全空白的页面";

                        insertRecord(priority, category, firstParaOfEmptyPage,"页首段落"); // 添加记录
                    }

                    firstParaOfEmptyPage = para;
                    prePageNum = curPageNum;
                    bEmptyPage = true;
                }

                if (para.Range.End - para.Range.Start > 1) // 若range差大于1
                    bEmptyPage = false;

                if (para.Range.ShapeRange.Count > 0) // 若存在shape
                    bEmptyPage = false;
                if (para.Range.InlineShapes.Count > 0) // 若存在inlineshape
                    bEmptyPage = false;

                bIsTable = para.Range.get_Information(Word.WdInformation.wdWithInTable); // 若在表格中

                if (bIsTable)
                    bEmptyPage = false;
                    

                if (para.Range.ShapeRange.Count > 0   ||
                    para.Range.InlineShapes.Count > 0 ||
                    para.Range.End - para.Range.Start <= 1)
                {
                    continue; 
                }

                bIsTable = para.Range.get_Information(Word.WdInformation.wdWithInTable); // 表中

                if (bIsTable)
                {
                    continue;
                }


                // 可能遗漏的标题: 文字无缩进，不超过1行
                if (!bIsTable && para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                    para.Format.Alignment != Word.WdParagraphAlignment.wdAlignParagraphCenter &&
                    para.Format.Alignment != Word.WdParagraphAlignment.wdAlignParagraphRight &&
                    para.Range.ParagraphFormat.LeftIndent == 0.0 &&
                    para.Range.ParagraphFormat.FirstLineIndent == 0.0)
                {
                    num1 = para.Range.ComputeStatistics(Word.WdStatistic.wdStatisticLines); // 统计
                    bRet = isPunctuation(para.Range.Text[para.Range.Text.Length - 1]); // 是否是标点字符

                    if ( !para.Range.Text.StartsWith(" ") &&
                         para.Range.Text.Trim().Length > 1 &&
                         !bRet && num1 == 1)
                    {
                        category = "可能遗漏的标题";

                        insertRecord(priority, category, para); // 添加记录
                    }
                }

                //@TODO
                // 封页的大字体是否居中
                // 
                // found the biggest font in 1st page
                // 
                int nPage = para.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber); // 获取页码数

                if (nPage == 1)
                {
                   // para.Range.ParagraphFormat.Alignment
                }


                if (para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText) // 大纲级别
                {
                    // 本章节下无正文（正文为空)
                    if (textBodyPara != null && bEmpty)
                    {
                        category = "章节下无正文";

                        insertRecord(priority, category, textBodyPara); // 添加记录
                    }

                    textBodyPara = null;
                    bEmpty = true;

                    paraInfo.LineNum = para.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber); // 获取信息
                    paraInfo.PageNum = para.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber); // 获取信息
                    paraInfo.AdjustedPageNum = para.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber); // 获取信息

                    strNamePage = para.Range.ListFormat.ListString + para.Range.Text + paraInfo.AdjustedPageNum;  // 获取信息
                    strNamePage = strNamePage.Replace("\r", "");

                    ParaInfo paraInfoItem = new ParaInfo(); // 新建parainfo

                    paraInfoItem = paraInfo;

                    if (!paraNamePageHash.Contains(strNamePage))  // 检查
                    {
                        paraNamePageHash.Add(strNamePage, paraInfoItem); // 添加
                    }
                    else
                    {
                        // 
                        category = "同页重复标题";

                        insertRecord(priority, category, para); // 添加记录
                    }

                    // 检查是否存在级别
                    if (!paraHash.ContainsKey(para.OutlineLevel))
                    {
                        twoItem itm = new twoItem();
                        itm.para = para;
                        itm.bAdded = false;

                        paraHash.Add(para.OutlineLevel, itm); // 添加记录
                    }
                    else
                    {
                        twoItem itm = (twoItem)paraHash[para.OutlineLevel];
                        prePara = itm.para;
                        // 缩进、字体、字号、颜色
                        if (para.Range.ParagraphFormat.LeftIndent != prePara.Range.ParagraphFormat.LeftIndent ||
                            para.Range.ParagraphFormat.FirstLineIndent != prePara.Range.ParagraphFormat.FirstLineIndent ||
                            !isSameFont(para.Range.Font,prePara.Range.Font) )
                        {
                            // 
                            category = "同级样式不一致";

                            if (!itm.bAdded)
                            {
                                insertSubRecord(priority, category, prePara); // 添加记录
                                itm.bAdded = true;
                            }

                            insertSubRecord(priority, category, para); // 添加子记录
                        }
                    }
                }
                else 
                {
                    if (!para.Range.Text.Trim().Equals("\r")) // not only '\r'
                    {
                        bEmpty = false;
                    }

                    if (textBodyPara == null)
                    {
                        textBodyPara = para;
                    }
                    else if (textBodyPara != para)
                    {
                        if (!para.Range.ListFormat.ListString.Equals("") &&
                            !textBodyPara.Range.ListFormat.ListString.Equals(""))
                        {
                            // @TODO, 用NameAscii不行，暂未找到listnum的字体信息
                            if (!para.Range.Font.Name.Equals(textBodyPara.Range.Font.Name))
                            {
                                category = "同章节下正文编号字体不一致";

                                insertRecord(priority, category, para); // 添加记录
                            }
                        }

                        // 在一个章节级下同级文本缩进不一致（不齐)，尤其是正文，样式不一致
                        if (para.Range.ParagraphFormat.LeftIndent != textBodyPara.Range.ParagraphFormat.LeftIndent ||
                            para.Range.ParagraphFormat.FirstLineIndent != textBodyPara.Range.ParagraphFormat.FirstLineIndent)
                        {
                            if (document.TablesOfContents.Count > 0 && para.Range.InRange(document.TablesOfContents[1].Range))
                            {

                            }
                            else
                            { 
                                category = "同章节下正文缩进不一致";
                                insertRecord(priority, category, para); // 添加记录
                            }
                        }
                        else
                        {
                            textBodyPara = para;
                        }
                    }// @TODO, 编号样式、字体、缩进等应一致

                }

                if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevel1)
                {
                    num1 = para.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber); // 获得信息

                    if (num1 != 1) // not First line of page
                    {
                        lineNum = "" + num1;
                        pageNum = para.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber); // 获得信息

                        // 大标题未在页起始，建议分页
                        category = "建议标题居此页首行";

                        insertRecord(priority, category, para); // 添加记录
                    }

                }

                /*
                if (bIsTable) // 表格当中有缩进
                {
                    Word.Table tbl = para.Range.Tables[1];
                    for (int j = 1; j < tbl.Range.Paragraphs.Count; j++)
                    {
                        prePara = tbl.Range.Paragraphs[j];
                        if (prePara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                           (prePara.Range.ParagraphFormat.LeftIndent != 0.0 ||
                            prePara.Range.ParagraphFormat.FirstLineIndent != 0.0))
                        {
                            // 
                            category = "表格内容缩进";

                            insertRecord(priority, category, para);
                        }
                    }
                }
                 * */

                if (para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText) // 非正文
                {
                    paraArray.Add(i);
                }

                if (false)
                {
                    // 段落间距显著不同（密集感不同)
                }

                if (false)
                {
                    // 非正文标题孤行在页最末行（形成割断章节)
                }

                if (false) // 打印,非黑体加粗没有打印效果或不明显
                {
                    // 
                }

                if (false) // 从综合商务部反馈的经验、标准
                {
                    // 
                }

                if (false)
                {
                    // 专业排版技术与标准
                    // 
                }


            }// for


            if (bEmptyPage && firstParaOfEmptyPage != null)
            {
                category = "可能出现完全空白的页面";
                insertRecord(priority, category, firstParaOfEmptyPage, "页首段落"); // 添加记录
            }

            // @TODO,段落中的颜色无法查到局部的颜色分配，只有通过find查找
            // Selection在application范围而不是document范围？
            foreach (Word.WdColor item in Enum.GetValues(typeof(Word.WdColor)))
            {
                if (item == Word.WdColor.wdColorAutomatic ||
                    item == Word.WdColor.wdColorBlack)
                {
                    continue;
                }

                sel.Find.ClearFormatting(); // 查找
                sel.Find.Font.Color = item;
                sel.Find.Wrap = Word.WdFindWrap.wdFindContinue;
                sel.Find.Execute("");
                if (sel.Find.Found)
                {
                    category = "显著颜色";
                    if (document.TablesOfContents.Count >= 1 && sel.Range.InRange(document.TablesOfContents[1].Range))
                    {

                    }
                    else
                    {
                        insertRecord(priority, category, sel); // 添加记录
                    }
                }
            }

            sel.Find.ClearFormatting(); // 查找
            //sel.Highlight = 1; // true
            sel.Find.Wrap = Word.WdFindWrap.wdFindContinue;
            sel.Find.Execute("");
            if (sel.Find.Found)
            {
                category = "突出颜色";
                if (document.TablesOfContents.Count >= 1 && sel.Range.InRange(document.TablesOfContents[1].Range))
                {

                }
                else
                {
                    insertRecord(priority, category, sel); // 添加记录
                }
            }


            // 交叉引用是否失联
            foreach (Word.Field fld in document.Fields)
            {
                if (fld.Type == Word.WdFieldType.wdFieldFootnoteRef ||
                    fld.Type == Word.WdFieldType.wdFieldNoteRef ||
                    fld.Type == Word.WdFieldType.wdFieldPageRef ||
                    fld.Type == Word.WdFieldType.wdFieldRef ||
                    fld.Type == Word.WdFieldType.wdFieldStyleRef)
                {
                    if (fld.Result.Text.Contains("错误"))
                    {
                        category = "交叉引用失联";
                        insertRecord(priority, category, fld);
                    }
                    // @TODO，查到引用源进行匹配核查
                    // 尚未查到有API可以访问引用源
                    // 
                }
            }

            if (document.Fields.Count > 0)
            {
                // 加一行提醒用户更新域（Select ALL + F9）
                // insertRecord();
            }

            // 每个节页码是否设置（for打印)
            // 若超过一定页数的文档，建议设置页码
            num1 = document.ComputeStatistics(Word.WdStatistic.wdStatisticPages); // 统计数

            if (num1 > 10) 
            {
                if (document.TablesOfContents.Count == 0)
                {
                    category = "建议增加目录";
                    Word.Paragraph para2 = document.Paragraphs[1];
                    insertRecord(priority, category, para2); // 添加记录
                }

                bRet = false;
                int hdPageNumAlignment = -1, ftPageNumAlignment = -1;

                // 是否设置了页码
                foreach (Word.Section sec in document.Sections) // 遍历各节
                {
                    hdPageNumAlignment = -1;
                    ftPageNumAlignment = -1;

                    if (sec.Headers.Count > 0)
                    {   // 页眉
                        bRet = bRet || (sec.Headers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers.Count > 0);
                    }

                    if (sec.Footers.Count > 0)
                    {   // 页脚
                        bRet = bRet || (sec.Footers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers.Count > 0);
                    }

                    if (!bRet)
                    {
                        category = "建议本节设置页码";

                        insertRecord(priority, category, sec); // 添加记录
                    }

                    // 每节页码的样式、对齐是否一致
                    // xxx
                    // 页脚的页数
                    if (sec.Headers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers.Count > 0)
                    {   // 遍历
                        foreach (Word.PageNumber pg in sec.Headers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers)
                        {
                            if (hdPageNumAlignment == -1)
                            {
                                hdPageNumAlignment = (int)pg.Alignment;
                            }
                            else
                            {
                                if (hdPageNumAlignment != (int)pg.Alignment) // 未对齐
                                {
                                    category = "本节页码未对齐";

                                    insertRecord(priority, category, sec); // 添加记录
                                }
                            }
                        }
                    }//

                    // 当前节的页数大于0
                    if (sec.Footers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers.Count > 0)
                    {   // 遍历当前节的页码
                        foreach (Word.PageNumber pg in sec.Footers[Word.WdHeaderFooterIndex.wdHeaderFooterPrimary].PageNumbers)
                        {
                            if (ftPageNumAlignment == -1)
                            {
                                ftPageNumAlignment = (int)pg.Alignment;
                            }
                            else
                            {
                                if (ftPageNumAlignment != (int)pg.Alignment)
                                {
                                    category = "本节页码未对齐";

                                    insertRecord(priority, category, sec); // 添加记录
                                }
                            }
                        }
                    }//

                } //

            }// 


            // 目录是否引用失配
            if (document.TablesOfContents.Count >= 1)
            {
                // 目录中页码是否正确，若不正确则提示更新
                int nAdjustPageNum = -1;
                // 遍历目录的段落
                foreach (Word.Paragraph tmpPara in document.TablesOfContents[1].Range.Paragraphs)
                {
                    if (tmpPara.Range.End - tmpPara.Range.Start <= 1)
                    {
                        continue;
                    }

                    String[] strItems = tmpPara.Range.Text.Split('\t'); // 分割

                    try
                    {
	                    nAdjustPageNum = Int16.Parse(strItems[strItems.Length - 1]); // 转换
                    }
                    catch (System.Exception ex)
                    {
                        continue;
                    }

                    strNamePage = tmpPara.Range.Text.Replace("\t", "");
                    strNamePage = strNamePage.Replace("\r", "");

                    if (paraNamePageHash.Contains(strNamePage)) // 若包括
                    {
                        paraInfo = (ParaInfo)paraNamePageHash[strNamePage];

                        // if diff then record error
                        // 
                        if (paraInfo.AdjustedPageNum != nAdjustPageNum) // 目录的页码与对应标题的页码不再对应
                        {
                            category = "目录页码需更新";
                            insertRecord(priority, category, tmpPara); // 添加记录
                            //break;
                        }

                    }
                    else
                    {
                        // error
                        category = "目录需更新"; // 无对应的标题项
                        insertRecord(priority, category, tmpPara); // 添加记录
                        //break;
                    }
                }
            }// 

            progbarCheck.Visible = false; // 进展bar消失

            // create tree
            // 若有编号，是否各级编号正确（按顺序)

//             int arrIndex = -1;
// 
//             MLNode<Word.Paragraph> tree = new MLNode<Word.Paragraph>();
//             tree.Data = null;
//             arrIndex = CreateTree(tree, document.Paragraphs, paraArray, ++arrIndex, 0);
// 
//             PreOrder(tree, 0, 0);

        }

        private void btnCheck_Click(object sender, EventArgs e)
        {
            checkDoc(); // 检查doc
            checkResetSearch(); // 重置search
        }
        /// <summary>
        /// 同步显示的对象
        /// </summary>
        /// <param name="selNode"></param>
        private void selSyncShowObject(TreeNode selNode)
        {
            Object obj = selNode.Tag;

            if (obj == null)
            {
                return;
            }

            if (obj is Word.Range)
            {
                Word.Range rng = (Word.Range)obj;
                // rng.GoTo();
                GotoThere(rng); // 跳转
            }

        }

        private void tvCheckedItems_AfterSelect(object sender, TreeViewEventArgs e)
        {
            selSyncShowObject(e.Node);
        }

        /// <summary>
        /// 移动忽略列表中
        /// </summary>
        private void move2IgnoreCategory()
        {
            TreeNode selNode = tvCheckedItems.SelectedNode;
            if (selNode == null)
            {
                MessageBox.Show("请先选中节点项");
                return;
            }

            if (selNode.Level == 1)
            {
                MessageBox.Show("此为分类节点项，请选中内容节点项");
                return;                
            }

            TreeNode ignoreCategoryNode = null;

            foreach(TreeNode catNode in tvCheckedItems.Nodes) // 遍历
            {
                ignoreCategoryNode = FindOneNode(catNode, "忽略", true, false); // 查找
            }

            if (ignoreCategoryNode == null) // 
            {
                // create one
                ignoreCategoryNode = new TreeNode("忽略");
                tvCheckedItems.Nodes.Add(ignoreCategoryNode); // 添加新节点
            }

            ignoreCategoryNode.Nodes.Add(selNode); // 添加新节点
            selNode.Remove();

            return;
        }

        private void btnCheckIgnore_Click(object sender, EventArgs e)
        {
            move2IgnoreCategory(); // 添加到忽略类节点下
            checkResetSearch(); // 重置search
        }


        private int m_nCheckSearchResultIndex = -1;
        private System.Collections.ArrayList m_checkResultArrlist = new System.Collections.ArrayList();
        // 重置检查search
        private void checkResetSearch()
        {
            m_nCheckSearchResultIndex = -1; // 重置

            TreeNode fnNd;
            for (int i = 0; i < m_checkResultArrlist.Count; i++)  // 重置
            {
                fnNd = (TreeNode)m_checkResultArrlist[i];  // 重置
                fnNd.ForeColor = Color.Black;  // 重置
            }
            m_checkResultArrlist.Clear();  // 重置

            btnCheckSearch.Visible = true;  // 重置
            btnCheckSearchPrev.Visible = false;  // 重置
            btnCheckSearchNext.Visible = false;  // 重置

            txtCheckSearchKeyWord.Text = "";  // 重置
        }

        private void btnCheckReset_Click(object sender, EventArgs e)
        {
            txtCheckSearchKeyWord.Text = "";
            checkResetSearch();
        }
        /// <summary>
        /// 检查的查找
        /// </summary>
        private void checkSearch()
        {
            String strKeyWord = txtCheckSearchKeyWord.Text;
            foreach(TreeNode nd in tvCheckedItems.Nodes) // 遍历
            {
                FindNode(nd,strKeyWord,ref m_checkResultArrlist); // 查找节点
            }
            // 查找到的结果若存在
            if (m_checkResultArrlist.Count > 0)
            {
                btnCheckSearch.Visible = false;
                btnCheckSearchPrev.Visible = true;
                btnCheckSearchNext.Visible = true;
  
                m_nCheckSearchResultIndex = 0;
                TreeNode fnNd = (TreeNode)m_checkResultArrlist[0];

                fnNd.ForeColor = Color.Red; // 设置第一个显著

                fnNd.EnsureVisible();
                tvCheckedItems.SelectedNode = fnNd;
            }
        }


        private void btnCheckSearch_Click(object sender, EventArgs e)
        {
            checkSearch();
        }

        /// <summary>
        /// 查找下一个
        /// </summary>
        /// <param name="bDirection"></param>
        private void checkSearchNext(Boolean bDirection)
        {
            if (bDirection) // 方向
            {
                m_nCheckSearchResultIndex++; // 下一个
                if (m_nCheckSearchResultIndex > m_checkResultArrlist.Count - 1) // wrap
                    m_nCheckSearchResultIndex = 0;
            }
            else
            {
                m_nCheckSearchResultIndex--; // 前一个
                if (m_nCheckSearchResultIndex < 0) // wrap
                    m_nCheckSearchResultIndex = m_checkResultArrlist.Count - 1;
            }

            TreeNode fnNd = (TreeNode)m_checkResultArrlist[m_nCheckSearchResultIndex]; // 取下一个
            fnNd.ForeColor = Color.Red; // 显著标识
            fnNd.EnsureVisible();
            tvCheckedItems.SelectedNode = fnNd; // 设置为选择节点

        }

        private void btnCheckSearchPrev_Click(object sender, EventArgs e)
        {
            checkSearchNext(false); // 查找下一个
        }

        private void btnCheckSearchNext_Click(object sender, EventArgs e)
        {
            checkSearchNext(true); // 查找下一个
        }

        /// <summary>
        /// 创建树
        /// </summary>
        /// <param name="ParentTree"></param>
        /// <param name="paras"></param>
        /// <param name="paraArray"></param>
        /// <param name="arrIndex"></param>
        /// <param name="parentParaLevel"></param>
        /// <returns></returns>
        int CreateTree(MLNode<Word.Paragraph> ParentTree, Word.Paragraphs paras,
                        System.Collections.ArrayList paraArray,
                        int arrIndex, int parentParaLevel)
        {
            int curIndex = arrIndex;
            Word.Paragraph curPara;

            while (curIndex < paraArray.Count) // 遍历
            {
                curPara = paras[(int)paraArray[curIndex]]; // 取值

                if ((int)curPara.OutlineLevel > parentParaLevel) // 大纲级别判断
                {
                    MLNode<Word.Paragraph> subTree = new MLNode<Word.Paragraph>(); // 新建子树
                    subTree.Data = curPara;
                    ParentTree.Childs.Add(subTree); // 添加

                    curIndex = CreateTree(subTree, paras, paraArray, ++curIndex, (int)curPara.OutlineLevel); // 递归
                }
                else
                {
                    return curIndex;
                }

                // curIndex = curIndex + 1;
            }

            return curIndex;

        } // createTree

        //先序遍历
        //结点->结点左子树->结点右子树 
        public void PreOrder(MLNode<Word.Paragraph> tree, int ParentLevel, int ParentValue)
        {
            String priority = "1", category = "xxx";

            Word.Paragraph para;

            // @TODO,ListString为空，但手动有编号的情况？
            // 

            // ListString不为空的情况
            if (tree.Data != null)
            {
                para = ((Word.Paragraph)tree.Data);
                // Console.WriteLine( para.Range.ListFormat.ListString);

                if (para.Range.ListFormat.ListLevelNumber - ParentLevel != 1)
                {
                    // level不匹配
                    category = "编号层级与本节层级不一致";

                    insertRecord(priority, category, para); // 添加记录
                }
                else if (!para.Range.ListFormat.ListString.Equals(""))
                {
                    // 前缀是否延自于父级节点
                    char[] sep = { '.' };
                    String[] substr = para.Range.ListFormat.ListString.Split(sep);

                    if (substr.Length == 0)
                    {
                        // 没有使用'.'级联编号
                        category = "未使用\'.\'级联编号";

                        insertRecord(priority, category, para); // 添加记录
                    }
                    else if (substr.Length == para.Range.ListFormat.ListLevelNumber)
                    {
                        if (Int32.Parse(substr[ParentLevel]) != ParentValue)
                        {
                            // 父级编号不一致
                            category = "编号与父级编号不一致";

                            insertRecord(priority, category, para); // 添加记录
                        }
                    }
                    else
                    {
                        category = "编号数与本节层级数不一致";

                        insertRecord(priority, category, para); // 添加记录
                    }
                }

                for (int i = 0; i < tree.Childs.Count; i++) // 子树节点
                {
                    if (((Word.Paragraph)((MLNode<Word.Paragraph>)tree.Childs[i]).Data).Range.ListFormat.ListValue != (i + 1))
                    {
                        // 本级编号不正确（应为i+1）
                        category = "本级编号应为" + (i + 1);

                        insertRecord(priority, category, para);  // 添加记录
                    }
                    // 前序遍历
                    PreOrder(((MLNode<Word.Paragraph>)tree.Childs[i]), (int)para.OutlineLevel, para.Range.ListFormat.ListValue);
                }
            }
            else
            {
                for (int i = 0; i < tree.Childs.Count; i++)
                {
                    // 前序遍历
                    PreOrder((MLNode<Word.Paragraph>)tree.Childs[i], ParentLevel, ParentValue);
                }
            }


        }// PreOrder

        /// <summary>
        /// 添加记录
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="sel"></param>
        /// <returns></returns>
        int insertRecord(String priority, String category, Word.Selection sel)
        {
            String desc = "";
            int numBrief = 0, nRet = 0;

            numBrief = Math.Min(5, sel.Text.Length - 1); // 取概要
            desc = sel.Text.Substring(0, numBrief) + "...";

            TreeNode foundNode = null;
            foreach(TreeNode checkNode in tvCheckedItems.Nodes) // 遍历
            {
                foundNode = FindOneNode(checkNode,category,false,false); // 查找节点
            }

            if (foundNode == null)
            {
                foundNode = new TreeNode(category); // 新建
                tvCheckedItems.Nodes.Add(foundNode);
            }

            TreeNode newNode = new TreeNode(desc); // 新建树节点
            newNode.Tag = sel.Range;

            foundNode.Nodes.Add(newNode); // 添加树节点

            return nRet;
        }

        private Hashtable m_CateHashtable = new Hashtable();
        private Hashtable m_subCateHashtable = new Hashtable();
        /// <summary>
        /// 添加子记录
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="para"></param>
        /// <returns></returns>
        int insertSubRecord(String priority, String category, Word.Paragraph para)
        {
            String desc = "";
            int numBrief = 0, nRet = 0;

            const int minLen = 18;

            int nLen = para.Range.Text.Length - 1;
            numBrief = Math.Min(minLen, nLen); // 提取概要

            if (numBrief < nLen) // 
            {
                desc = para.Range.Text.Substring(0, numBrief) + "...";
            }
            else
            {
                desc = para.Range.Text.Substring(0, numBrief);
            }

            TreeNode foundNode = null;
            foundNode = (TreeNode)m_CateHashtable[category];

            if (foundNode == null)
            {
                foundNode = new TreeNode(category); // 新建节点
                tvCheckedItems.Nodes.Add(foundNode); // 添加节点
                m_CateHashtable.Add(category, foundNode); 
            }

            String strFnd = (int)para.OutlineLevel + "级";

            TreeNode subNode = null;

            subNode = (TreeNode)m_subCateHashtable[strFnd]; // 查找父节点

            if (subNode == null) 
            {
                subNode = new TreeNode(strFnd); // 新建节点
                foundNode.Nodes.Add(subNode);   // 添加到父节点下
                m_subCateHashtable.Add(strFnd, subNode); // 添加到hash表中
            }

            TreeNode newNode = new TreeNode(desc); // 新建子节点
            newNode.Tag = para.Range;

            subNode.Nodes.Add(newNode); // 添加

            return nRet;
        }

        /// <summary>
        /// 添加记录，支持段落
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="para"></param>
        /// <param name="strText"></param>
        /// <returns></returns>
        int insertRecord(String priority, String category, Word.Paragraph para, String strText)
        {
            int nRet = 0;

            TreeNode foundNode = null;
            foundNode = (TreeNode)m_CateHashtable[category];

            if (foundNode == null)
            {
                foundNode = new TreeNode(category); // 新建节点
                tvCheckedItems.Nodes.Add(foundNode);
                m_CateHashtable.Add(category, foundNode);
            }

            TreeNode newNode = new TreeNode(strText); // 新建子节点
            newNode.Tag = para.Range; // 赋值记录

            foundNode.Nodes.Add(newNode); // 添加记录

            return nRet;
        }

        /// <summary>
        /// 添加记录
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="para"></param>
        /// <returns></returns>
        int insertRecord(String priority, String category, Word.Paragraph para)
        {
            String desc = "";
            int numBrief = 0, nRet = 0;

            const int minLen = 18;

            int nLen = para.Range.Text.Length - 1;
            numBrief = Math.Min(minLen, nLen);

            if (numBrief < nLen) // 提取概要
            {
                desc = para.Range.Text.Substring(0, numBrief) + "...";
            }
            else
            {
                desc = para.Range.Text.Substring(0, numBrief);
            }

            TreeNode foundNode = null;
            foundNode = (TreeNode)m_CateHashtable[category];

            if (foundNode == null)
            {
                foundNode = new TreeNode(category); // 新建节点
                tvCheckedItems.Nodes.Add(foundNode);
                m_CateHashtable.Add(category, foundNode);
            }

            TreeNode newNode = new TreeNode(desc); // 新建子节点
            newNode.Tag = para.Range;

            foundNode.Nodes.Add(newNode); // 添加

            return nRet;
        }

        /// <summary>
        /// 添加记录，支持Field
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="fld"></param>
        /// <returns></returns>
        int insertRecord(String priority, String category, Word.Field fld)
        {
            String desc = "";
            int numBrief = 0, nRet = 0;
            const int minLen = 18;

            int nLen = fld.Result.Text.Length - 1;
            numBrief = Math.Min(minLen, nLen);

            if (numBrief < nLen) // 提取概要
            {
                desc = fld.Result.Text.Substring(0, numBrief) + "...";
            }
            else
            {
                desc = fld.Result.Text.Substring(0, numBrief);
            }

            TreeNode foundNode = null;
            foundNode = (TreeNode)m_CateHashtable[category];

            if (foundNode == null)
            {
                foundNode = new TreeNode(category);// 新建节点
                tvCheckedItems.Nodes.Add(foundNode);
                m_CateHashtable.Add(category, foundNode);
            }

            TreeNode newNode = new TreeNode(desc); // 新建子节点
            newNode.Tag = fld.Result;

            foundNode.Nodes.Add(newNode); // 添加

            return nRet;
        }
        /// <summary>
        /// 添加记录，支持section
        /// </summary>
        /// <param name="priority"></param>
        /// <param name="category"></param>
        /// <param name="sec"></param>
        /// <returns></returns>
        int insertRecord(String priority, String category, Word.Section sec)
        {
            String desc = "";
            int numBrief = 0, nRet = 0;
            const int minLen = 18;

            int nLen = sec.Range.Text.Length - 1;
            numBrief = Math.Min(minLen, nLen);

            if (numBrief < nLen) // 提取概要
            {
                desc = sec.Range.Text.Substring(0, numBrief) + "...";
            }
            else
            {
                desc = sec.Range.Text.Substring(0, numBrief);
            }

            TreeNode foundNode = null;
            foundNode = (TreeNode)m_CateHashtable[category];

            if (foundNode == null)
            {
                foundNode = new TreeNode(category); // 新建节点
                tvCheckedItems.Nodes.Add(foundNode);
                m_CateHashtable.Add(category, foundNode);
            }

            TreeNode newNode = new TreeNode(desc); // 新建子节点
            newNode.Tag = sec.Range;

            foundNode.Nodes.Add(newNode); // 添加

            return nRet;
        }
        /// <summary>
        /// 在文档中选择
        /// </summary>
        private void selectInDoc()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (curDoc == null)
                return;

            Word.Selection sel = curDoc.ActiveWindow.Selection;
            sel.Collapse();

            foreach (TreeNode nd in m_tvOrganize.Nodes) // 遍历节点
            {
                addAllSelItemsInSel(nd); // 添加
            }

            m_addin.m_commTools.ExecMultiSel(curDoc);
            // m_addin.Application.ScreenUpdating = true;
            return;
        }

        private void m_tvOrganize_Click(object sender, System.EventArgs e)
        {
            selectInDoc(); // 选择
        }

        private void m_tvOrganize_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // jump to that object
            TreeNode nd = m_tvOrganize.SelectedNode;

            if (nd == null || nd.Tag == null)
            {
                return;
            }

            if( nd.Tag is Word.Paragraph) // 判断对象类型
            {
                Word.Paragraph para = (Word.Paragraph)nd.Tag;
                // para.Range.GoTo();
                GotoThere(para.Range); // 跳转
            }
            else if (nd.Tag is Word.Section)
            {
                Word.Section sec = (Word.Section)nd.Tag;
                // sec.Range.GoTo();
                GotoThere(sec.Range); // 跳转
            }
            else if (nd.Tag is Word.Table) 
            {
                Word.Table tbl = (Word.Table)nd.Tag;
                // tbl.Range.GoTo();
                GotoThere(tbl.Range);// 跳转
            }
            else if (nd.Tag is Word.InlineShape)
            {
                Word.InlineShape inshape = (Word.InlineShape)nd.Tag;
                // tbl.Range.GoTo();
                GotoThere(inshape.Range);// 跳转
            }
            else if (nd.Tag is Word.Shape)
            {
                Word.Shape shp = (Word.Shape)nd.Tag;
                shp.Select();

                GotoThere(shp);// 跳转

// 
//                 Word.Document doc = m_addin.Application.ActiveDocument;
//                 if (doc == null)
//                     return;
// 
//                 Word.ShapeRange shpRng = doc.Shapes.Range(shp.Name);
// 
//                 if (shpRng != null)
//                 {
//                     MessageBox.Show("Not Support");
//                     // shpRng.Activate();//not support
//                 }
//                 // shp.Select();
//                 // GotoThere(shp.Range);
            }
            else if (nd.Tag is Word.Bookmark)
            {
                Word.Bookmark bkmk = (Word.Bookmark)nd.Tag;
                // bkmk.Range.GoTo();
                GotoThere(bkmk.Range);// 跳转
            }
            else if (nd.Tag is Word.Comment)
            {
                Word.Comment cmt = (Word.Comment)nd.Tag;
                // cmt.Range.GoTo();
                GotoThere(cmt.Range);// 跳转
            }
            else if (nd.Tag is Word.Footnote)
            {
                Word.Footnote ftnt = (Word.Footnote)nd.Tag;
                // ftnt.Range.GoTo();
                GotoThere(ftnt.Range);// 跳转
            }
            else if (nd.Tag is Word.Endnote)
            {
                Word.Endnote endnt = (Word.Endnote)nd.Tag;
                // endnt.Range.GoTo();
                GotoThere(endnt.Range);// 跳转
            }
            else if (nd.Tag is Word.ContentControl)
            {
                Word.ContentControl ctrl = (Word.ContentControl)nd.Tag;
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range);// 跳转
            }
            else if (nd.Tag is Word.Field)
            {
                Word.Field fld = (Word.Field)nd.Tag;
                // fld.Result.GoTo();
                GotoThere(fld.Result);// 跳转
            }
            else if (nd.Tag is Word.Hyperlink)
            {
                Word.Hyperlink lnk = (Word.Hyperlink)nd.Tag;
                // lnk.Range.GoTo();
                GotoThere(lnk.Range);// 跳转
            }
            else if (nd.Tag is Word.Index)
            {
                Word.Index indx = (Word.Index)nd.Tag;
                // indx.Range.GoTo();
                GotoThere(indx.Range);// 跳转
            }

        }

        private void orgSelectAllLevels()
        {
            for (int i = 0; i < chkSelCategory.Items.Count; i++) // 取选择的类型值
            {
                chkSelCategory.SetItemChecked(i, true); // 全选
                m_bOrganizeArrLevels[i+1] = true; // 选中
            }
        }

        private void btnSelAll_Click(object sender, EventArgs e)
        {
            orgSelectAllLevels(); // 全选
            updateOrganizeTree(); // 更新树
        }

        private void orgClearAllLevels()
        {
            for (int i = 0; i < chkSelCategory.Items.Count; i++) // 全部遍历
            {
                chkSelCategory.SetItemChecked(i, false); // 设置不选
                m_bOrganizeArrLevels[i+1] = false; // 设置不选
            }
        }


        private void btnSelClear_Click(object sender, EventArgs e)
        {
            orgClearAllLevels(); // 清空
            updateOrganizeTree(); // 更新
        }

        private void updateOrganizeTree() // 更新树
        {
            TreeNode trnd = (TreeNode)m_hashOrgTreeNodes["章节"];

            Boolean bSelChild = m_bOrganizeArrLevels[chkSelCategory.Items.Count]; // 提取最后一项

            foreach (TreeNode nd in trnd.Nodes) // 遍历
            {
                setOrganSelState(nd, m_bOrganizeArrLevels, bSelChild); // 设置状态
            }

            selectInDoc(); // 在文档中选择

        }
 
        private Boolean[] m_bOrganizeArrLevels = new Boolean[20];// bigger than UI list items, start from 1 not 0

        private void chkCategory_SelectedIndexChanged(object sender, EventArgs e)
        {
            CheckedListBox ck = (CheckedListBox)sender;

            m_bOrganizeArrLevels[ck.SelectedIndex+1] = ck.GetItemChecked(ck.SelectedIndex); // 取选择状态

            updateOrganizeTree(); // 更新树
        }
        /// <summary>
        /// 设置选择状态
        /// </summary>
        /// <param name="curNode"></param>
        /// <param name="bArrLevel"></param>
        /// <param name="bChildren"></param>
        private void setOrganSelState(TreeNode curNode, Boolean[] bArrLevel, Boolean bChildren)
        {
            Word.Paragraph para = (Word.Paragraph)curNode.Tag;

            if (para == null)
                return;

            if (bChildren)
            {
                curNode.Checked = false;
                foreach (TreeNode childNode in curNode.Nodes) // 遍历
                {
                    setOrganSelState(childNode, bArrLevel, bChildren); // 设置状态
                }

                if (bArrLevel[(int)para.OutlineLevel]) // 判断选中状态
                {
                    curNode.Checked = true; // 设置选中
                    foreach (TreeNode childNode in curNode.Nodes) // 遍历
                    {
                        setOrganChildSelState(childNode, curNode.Checked); // 设置子节点状态
                    }
                }

            }
            else
            {
                curNode.Checked = bArrLevel[(int)para.OutlineLevel];
                foreach (TreeNode childNode in curNode.Nodes) // 遍历当前节点
                {
                    setOrganSelState(childNode, bArrLevel, bChildren); // 设置状态
                }
            }

            return;
        }


        private void setOrganChildSelState(TreeNode curNode, Boolean bChk)
        {
            curNode.Checked = bChk;
            foreach (TreeNode childNode in curNode.Nodes) // 遍历子节点
            {
                setOrganChildSelState(childNode, bChk); // 设置选中状态
            }

            return;
        }

        /// <summary>
        /// 添加节点到选中区
        /// </summary>
        /// <param name="nd"></param>
        private void addNodeIntoSelection(TreeNode nd)
        {
            if (nd.Tag == null || !nd.Checked)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (nd.Tag is Word.Paragraph) // 判断各个对象
            {
                Word.Paragraph para = (Word.Paragraph)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(para.Range);
            }
            else if (nd.Tag is Word.Section) // 判断各个对象
            {
                Word.Section sec = (Word.Section)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(sec.Range);
            }
            else if (nd.Tag is Word.Table) // 判断各个对象
            {
                Word.Table tbl = (Word.Table)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(tbl.Range);
            }
            else if (nd.Tag is Word.Shape) // 判断各个对象
            {
                Word.Shape shp = (Word.Shape)nd.Tag; // 转换
                // not support.
            }
            else if (nd.Tag is Word.Bookmark) // 判断各个对象
            {
                Word.Bookmark bkmk = (Word.Bookmark)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(bkmk.Range);
            }
            else if (nd.Tag is Word.Comment) // 判断各个对象
            {
                Word.Comment cmt = (Word.Comment)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(cmt.Range);
            }
            else if (nd.Tag is Word.Footnote) // 判断各个对象
            {
                Word.Footnote ftnt = (Word.Footnote)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(ftnt.Range);
            }
            else if (nd.Tag is Word.Endnote) // 判断各个对象
            {
                Word.Endnote endnt = (Word.Endnote)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(endnt.Range);
            }
            else if (nd.Tag is Word.ContentControl) // 判断各个对象
            {
                Word.ContentControl ctrl = (Word.ContentControl)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(ctrl.Range);
            }
            else if (nd.Tag is Word.Field) // 判断各个对象
            {
                Word.Field fld = (Word.Field)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(fld.Result);
            }
            else if (nd.Tag is Word.Hyperlink) // 判断各个对象
            {
                Word.Hyperlink lnk = (Word.Hyperlink)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(lnk.Range);
            }
            else if (nd.Tag is Word.Index) // 判断各个对象
            {
                Word.Index indx = (Word.Index)nd.Tag; // 转换
                m_addin.m_commTools.RecordMultiSel(indx.Range);
            }            

            return;
        }

        /// <summary>
        /// 加到选择区中
        /// </summary>
        /// <param name="rootNd"></param>
        private void addAllSelItemsInSel(TreeNode rootNd)
        {
            foreach (TreeNode nd in rootNd.Nodes) // 递归
            {
                addNodeIntoSelection(nd); // 添加节点到选择区 
                addAllSelItemsInSel(nd); //  加入选择区
            }
        }


        private void m_tvOrganize_AfterCheck(object sender, TreeViewEventArgs e)
        {
            if (e.Action != TreeViewAction.Unknown) 
            {
                Boolean bSelChild = chkSelCategory.GetItemChecked(chkSelCategory.Items.Count - 1); // 取子节点选项

                if (bSelChild && e.Node.Nodes.Count > 0) // 若子节点
                {
                    setOrganChildSelState(e.Node, e.Node.Checked); // 设置子选择项
                }

                selectInDoc(); // 在文档中选择
            }

            return;
        }


        private System.Collections.Hashtable m_hashOrgTreeNodes = new System.Collections.Hashtable();
        /// <summary>
        /// 初始化类型选项
        /// </summary>
        private void initOrganizeCategory()
        {
            String[] strSelCats = { "1级","2级","3级",
                                    "4级","5级","6级",
                                    "7级","8级","9级",
                                    /*"正文",*/   "包含子章节" };

            chkSelCategory.Items.Clear();
            foreach (String str in strSelCats) // 遍历
            {
                chkSelCategory.Items.Add(str); // 添加到UI
            }

        }

        /// <summary>
        /// 初始化结构图
        /// </summary>
        private void initOrganizePage()
        {
            String[] strRootName = { "章节","表格","分节",/* "分隔符", */
                                     "图形","批注",  
                                     /*"题注",*/ "脚注", "尾注",
                                     /*"目录",*/ /*"对象",*/ "书签", 
                                     /*"封面封底",*/ "内容控件", "域" ,
                                     "超链接","索引"/*,"编号段落"*/};

            m_hashOrgTreeNodes.Clear();
            m_tvOrganize.Nodes.Clear();
            foreach (String str in strRootName) // 遍历
            {
                TreeNode nd = m_tvOrganize.Nodes.Add(str); // 添加
                m_hashOrgTreeNodes.Add(str, nd); // 添加
            }
        }

        /// <summary>
        /// 重建段落树
        /// </summary>
        /// <param name="bIncludeBody"></param>
        private void buildChapterTree(Boolean bIncludeBody)
        {
            const UInt16 uMaxLength = 18;
            UInt16 uLen = 0;
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode rootNode = (TreeNode)m_hashOrgTreeNodes["章节"];

            rootNode.Nodes.Clear();
            
            TreeNode preNode = rootNode;

            String strItem = "", strPrefix = "";
            Boolean bIsInTable = false;

            int i = 0;
            // 章节
            foreach (Word.Paragraph para in curDoc.Paragraphs) // 全文段落
            {
                OrgProgressBar.Value ++;

                if (!bIncludeBody && para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                {
                    continue; // 忽略正文
                }

                bIsInTable = para.Range.get_Information(Word.WdInformation.wdWithInTable);
                if (bIsInTable) // 忽略表格
                {
                    continue;
                }

                if (!para.Range.ListFormat.ListString.Equals("")) // 全文
                {
                    strPrefix = para.Range.ListFormat.ListString;
                }
                else
                {
                    strPrefix = "";
                }

                uLen = (UInt16)Math.Min(para.Range.Text.Length, uMaxLength);
                strItem = strPrefix + para.Range.Text.Substring(0, uLen); // 概要
                i++;
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    strItem = "段落" + i;
                }

                if (para.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = null;
                switch (para.OutlineLevel)
                {
                    case Word.WdOutlineLevel.wdOutlineLevel1: // 1级标题
                        newNode = new TreeNode(strItem); // 新建节点
                        newNode.Name = strItem; // 记录
                        newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel; // 记录
                        newNode.Tag = para; // 记录对象

                        rootNode.Nodes.Add(newNode); // 添加到节点
                        preNode = newNode; // 记录前节点
                        break;

                    case Word.WdOutlineLevel.wdOutlineLevel2:
                    case Word.WdOutlineLevel.wdOutlineLevel3:
                    case Word.WdOutlineLevel.wdOutlineLevel4:
                    case Word.WdOutlineLevel.wdOutlineLevel5:
                    case Word.WdOutlineLevel.wdOutlineLevel6:
                    case Word.WdOutlineLevel.wdOutlineLevel7:
                    case Word.WdOutlineLevel.wdOutlineLevel8:
                    case Word.WdOutlineLevel.wdOutlineLevel9:
                    case Word.WdOutlineLevel.wdOutlineLevelBodyText:
                        if (para.Range.Start == para.Range.End - 1)
                        {
                            // how to handle this kind of situation?
                            continue;
                        }

                        while (preNode != rootNode) // 寻找上级
                        {
                            Word.Paragraph prePara = (Word.Paragraph)preNode.Tag;
                            if ((int)para.OutlineLevel - (int)prePara.OutlineLevel == 1)
                            {
                                break;
                            }
                            else if ((int)para.OutlineLevel - (int)prePara.OutlineLevel > 0)
                            {
                                break;
                            }
                            preNode = preNode.Parent; // 向上搜
                        }
                        newNode = new TreeNode(strItem); // 新节点
                        newNode.Name = strItem; // 记录
                        newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel; // 记录
                        newNode.Tag = para; // 记录
                        preNode.Nodes.Add(newNode); // 添加
                        preNode = newNode;// 记录前节点
                        break;

                }// switch

            }
        }
        /// <summary>
        /// 建立组织整树
        /// </summary>
        /// <param name="bIncludeBody"></param>
        private void buildOrganizeWholeTree(Boolean bIncludeBody)
        {
            const UInt16 uMaxLength = 18;
            UInt16 uLen = 0;
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode rootNode = (TreeNode)m_hashOrgTreeNodes["章节"];
            TreeNode preNode = rootNode;

            String strItem = "";

            OrgProgressBar.Maximum += curDoc.Paragraphs.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Sections.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Tables.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Shapes.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.InlineShapes.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Bookmarks.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Comments.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Footnotes.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Endnotes.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.ContentControls.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Fields.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Hyperlinks.Count; // 设置进度条各项数值
            OrgProgressBar.Maximum += curDoc.Indexes.Count; // 设置进度条各项数值
            // OrgProgressBar.Maximum += curDoc.ListParagraphs.Count;

            int i = 0;
            // buildChapterTree(bIncludeBody);
//             // 章节
//             foreach (Word.Paragraph para in curDoc.Paragraphs)
//             {
//                 if (!para.Range.ListFormat.ListString.Equals(""))
//                 {
//                     strPrefix = para.Range.ListFormat.ListString;
//                 }
//                 else
//                 {
//                     strPrefix = "";
//                 }
// 
//                 uLen = (UInt16)Math.Min(para.Range.Text.Length, uMaxLength);
//                 strItem = strPrefix + para.Range.Text.Substring(0, uLen);
//                 i++;
//                 strItem.Replace(Environment.NewLine, "");
// 
//                 if (strItem.Trim().Equals(""))
//                 {
//                     strItem = "段落" + i;
//                 }                
// 
//                 if (para.Range.Text.Length > uLen)
//                 {
//                     strItem += "...";
//                 }
// 
//                 TreeNode newNode = null;
// 
//                 switch (para.OutlineLevel)
//                 {
//                     case Word.WdOutlineLevel.wdOutlineLevel1:
//                         newNode = new TreeNode(strItem);
//                         newNode.Name = strItem;
//                         newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel;
//                         newNode.Tag = para;
//                         
//                         rootNode.Nodes.Add(newNode);
//                         preNode = newNode;
//                         break;
// 
//                     case Word.WdOutlineLevel.wdOutlineLevel2:
//                     case Word.WdOutlineLevel.wdOutlineLevel3:
//                     case Word.WdOutlineLevel.wdOutlineLevel4:
//                     case Word.WdOutlineLevel.wdOutlineLevel5:
//                     case Word.WdOutlineLevel.wdOutlineLevel6:
//                     case Word.WdOutlineLevel.wdOutlineLevel7:
//                     case Word.WdOutlineLevel.wdOutlineLevel8:
//                     case Word.WdOutlineLevel.wdOutlineLevel9:
//                     case Word.WdOutlineLevel.wdOutlineLevelBodyText:
//                         if (para.Range.Start == para.Range.End - 1)
//                         {
//                             // how to handle this kind of situation?
//                             continue;
//                         }
// 
//                         while (preNode != rootNode)
//                         {
//                             Word.Paragraph prePara = (Word.Paragraph)preNode.Tag;
//                             if ( (int)para.OutlineLevel - (int)prePara.OutlineLevel == 1)
//                             {
//                                 break;
//                             }
//                             else if ((int)para.OutlineLevel - (int)prePara.OutlineLevel > 0)
//                             {
//                                 break;
//                             }
//                             preNode = preNode.Parent;
//                         }
//                         newNode = new TreeNode(strItem);
//                         newNode.Name = strItem;
//                         newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel;
//                         newNode.Tag = para;
//                         preNode.Nodes.Add(newNode);
//                         preNode = newNode;
//                         break;
// 
//                 }// switch
// 
//             }
           

            // 分节
            rootNode = (TreeNode)m_hashOrgTreeNodes["分节"];
            i = 0;
            foreach (Word.Section sec in curDoc.Sections) // 遍历分节部分
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(sec.Range.Text.Length, uMaxLength);
                strItem = sec.Range.Text.Substring(0, uLen); // 概要
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "分节" + i;
                }

                if (sec.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 创建节点
                newNode.Name = strItem; // 记录值
                newNode.Tag = sec; // 记录对象

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 表格
            rootNode = (TreeNode)m_hashOrgTreeNodes["表格"];

            i = 0;
            foreach (Word.Table tbl in curDoc.Tables)  // 遍历表格
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(tbl.Range.Text.Length, uMaxLength);
                strItem = tbl.Range.Text.Substring(0, uLen);
                strItem.Replace(Environment.NewLine, ""); // 产生摘要

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "表格" + i;
                }

                if (tbl.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = tbl;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 图形
            rootNode = (TreeNode)m_hashOrgTreeNodes["图形"];
            i = 0;
            foreach (Word.Shape shp in curDoc.Shapes) // 图形
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(shp.Name.Length, uMaxLength);
                strItem = shp.Name.Substring(0, uLen);
                strItem.Replace(Environment.NewLine, ""); // 摘要

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "图形" + i;
                }

                if (shp.Name.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = shp;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            foreach (Word.InlineShape inshp in curDoc.InlineShapes) // 图形
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(inshp.Range.Text.Length, uMaxLength);
                strItem = inshp.Range.Text.Substring(0, uLen);
                strItem.Replace(Environment.NewLine, ""); // 摘要
                strItem = strItem.Trim();

                if (strItem.Equals("") || strItem.Equals("/"))
                {
                    i++;
                    strItem = "图形" + i;
                }

                if (inshp.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = inshp;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 章节
            TreeNode chapterNode = (TreeNode)m_hashOrgTreeNodes["章节"];
            TreeNode tree = m_commonTools.buildOutlineTree(curDoc); // 建立tree

            OrgProgressBar.Value += curDoc.Paragraphs.Count;
            foreach (TreeNode childNode in tree.Nodes)
            {
                chapterNode.Nodes.Add(childNode); // 添加节点
            }


            // 书签
            rootNode = (TreeNode)m_hashOrgTreeNodes["书签"];
            i = 0;
            foreach (Word.Bookmark bkmk in curDoc.Bookmarks) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(bkmk.Range.Text.Length, uMaxLength);
                strItem = bkmk.Range.Text.Substring(0, uLen); // 摘要

                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "书签" + i;
                }

                if (bkmk.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = bkmk;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 分隔符
            // Word.Breaks, document no breaks
            // 

            // 批注
            rootNode = (TreeNode)m_hashOrgTreeNodes["批注"];
            i = 0;
            foreach (Word.Comment cmt in curDoc.Comments) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(cmt.Range.Text.Length, uMaxLength);
                strItem = cmt.Range.Text.Substring(0, uLen); // 摘要

                strItem.Replace(Environment.NewLine, "");
                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "批注" + i;
                }

                if (cmt.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = cmt;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 脚注
            rootNode = (TreeNode)m_hashOrgTreeNodes["脚注"];
            i = 0;
            foreach (Word.Footnote fts in curDoc.Footnotes) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(fts.Range.Text.Length, uMaxLength);
                strItem = fts.Range.Text.Substring(0, uLen); // 摘要
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "脚注" + i;
                }

                if (fts.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = fts;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 尾注
            rootNode = (TreeNode)m_hashOrgTreeNodes["尾注"];
            i = 0;
            foreach (Word.Endnote endnts in curDoc.Endnotes) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(endnts.Range.Text.Length, uMaxLength);
                strItem = endnts.Range.Text.Substring(0, uLen); // 摘要
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "尾注" + i;
                }

                if (endnts.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = endnts;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 题注
            // no


            // 对象
            // no


            // 封面封底
            // no


            // 内容控件
            rootNode = (TreeNode)m_hashOrgTreeNodes["内容控件"];
            i = 0;
            foreach (Word.ContentControl ctrl in curDoc.ContentControls) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(ctrl.Range.Text.Length, uMaxLength);
                strItem = ctrl.Range.Text.Substring(0, uLen); // 摘要
                strItem.Replace(Environment.NewLine, "");
                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "内容控件" + i; // 赋名
                }

                if (ctrl.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = ctrl;

                rootNode.Nodes.Add(newNode); // 添加节点
            }


            // 域
            Boolean bInToc = false;
            rootNode = (TreeNode)m_hashOrgTreeNodes["域"];
            i = 0;
            foreach (Word.Field fld in curDoc.Fields) // 遍历
            {
                OrgProgressBar.Value++;

                bInToc = false;
                foreach(Word.TableOfContents tocs in curDoc.TablesOfContents) // 遍历
                {
                    if (fld.Result.InRange(tocs.Range)) // 判断是否在区域内
                    {
                        bInToc = true;
                    }
                }

                if (bInToc)
                {
                    continue; // 跳过
                }

                uLen = (UInt16)Math.Min(fld.Result.Text.Length, uMaxLength);
                strItem = fld.Result.Text.Substring(0, uLen); // 摘要
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "域" + i; // 赋名
                }

                if (fld.Result.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = fld;

                rootNode.Nodes.Add(newNode); // 添加节点
            }


            // 超链接
            rootNode = (TreeNode)m_hashOrgTreeNodes["超链接"];
            i = 0;
            foreach (Word.Hyperlink lnk in curDoc.Hyperlinks) // 遍历
            {
                OrgProgressBar.Value++;

                bInToc = false;
                foreach (Word.TableOfContents tocs in curDoc.TablesOfContents) // 遍历
                {
                    if (lnk.Range.InRange(tocs.Range)) // 判断若在区域范围内
                    {
                        bInToc = true;
                    }
                }

                if (bInToc)
                {
                    continue; // 跳过
                }

                uLen = (UInt16)Math.Min(lnk.Range.Text.Length, uMaxLength);
                strItem = lnk.Range.Text.Substring(0, uLen); // 摘要
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "超链接" + i;
                }

                if (lnk.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = lnk;

                rootNode.Nodes.Add(newNode); // 添加节点
            }

            // 索引
            rootNode = (TreeNode)m_hashOrgTreeNodes["索引"];
            i = 0;
            foreach (Word.Index indx in curDoc.Indexes) // 遍历
            {
                OrgProgressBar.Value++;

                uLen = (UInt16)Math.Min(indx.Range.Text.Length, uMaxLength);
                strItem = indx.Range.Text.Substring(0, uLen);
                strItem.Replace(Environment.NewLine, ""); // 赋名摘要

                if (strItem.Trim().Equals(""))
                {
                    i++;
                    strItem = "索引" + i;
                }

                if (indx.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = new TreeNode(strItem); // 新建节点
                newNode.Name = strItem;
                newNode.Tag = indx;

                rootNode.Nodes.Add(newNode); // 添加节点
            }


//             // 编号段落
//             rootNode = (TreeNode)m_hashOrgTreeNodes["编号段落"];
//             i = 0;
// 
//             for (int j = curDoc.ListParagraphs.Count; j > 0; j-- )
//             {
//                 OrgProgressBar.Value++;
// 
//                 Word.Paragraph para = curDoc.ListParagraphs[j];
//                 if (!para.Range.ListFormat.ListString.Equals(""))
//                 {
//                     strPrefix = para.Range.ListFormat.ListString;
//                 }
//                 else
//                 {
//                     strPrefix = "";
//                 }
// 
//                 uLen = (UInt16)Math.Min(para.Range.Text.Length, uMaxLength);
//                 strItem = strPrefix + para.Range.Text.Substring(0, uLen);
//                 i++;
//                 strItem.Replace(Environment.NewLine, "");
// 
//                 if (strItem.Trim().Equals(""))
//                 {
//                     strItem = "编号段落" + i;
//                 }
// 
//                 if (para.Range.Text.Length > uLen)
//                 {
//                     strItem += "...";
//                 }
// 
//                 TreeNode newNode = new TreeNode(strItem);
//                 newNode.Name = strItem;
//                 newNode.Tag = para;
// 
//                 rootNode.Nodes.Add(newNode);
//             }

            return;
        }

        // @TODO,2016-01-21
        // while content change(paragraphs) then update
        // how to get word changes message?
        private void updateOrganizeWholeTree()
        {
            // Word.Document = m_addin.Application.ActiveDocument.ActiveWindow
        }

        private static Boolean m_bOrganizeCatLoaded = false; // 标记是否loaded

        private void btnOrganizeRefresh_Click(object sender, EventArgs e)
        {

            OrgProgressBar.Left = txtOrganKeyWord.Left; // 初始化进度条
            OrgProgressBar.Top = txtOrganKeyWord.Top;
            OrgProgressBar.Width = txtOrganKeyWord.Width;
            OrgProgressBar.Height = txtOrganKeyWord.Height;
            
            OrgProgressBar.Visible = true;
            OrgProgressBar.Value = 0;
            OrgProgressBar.Maximum = 0;

            if(!m_bOrganizeCatLoaded) // 未load
            {
                initOrganizeCategory(); // 初始化类型
                orgClearAllLevels(); // 初始化
                m_bOrganizeCatLoaded = true;
            }

            initOrganizePage(); // 初始化页面
            buildOrganizeWholeTree(chkOrgShowBody.Checked);// 建立树型结构
            ResetOrganFound(); // 重置查找项
            // 

            OrgProgressBar.Visible = false; // 初始化
            OrgProgressBar.Value = 0;

        }

        private void btnExpandSelChild_Click(object sender, EventArgs e)
        {
            // Expand
            TreeNode selNode = m_tvOrganize.SelectedNode; // 选中节点
            if (selNode == null)
                return;

            selNode.ExpandAll(); // 展开

        }

        private void btnCollapseSel_Click(object sender, EventArgs e)
        {
            // Collapse
            TreeNode selNode = m_tvOrganize.SelectedNode; // 选中节点
            if (selNode == null)
                return;

            selNode.Collapse(false);// 收缩
        }


        private int m_nOrganFoundIndex = -1;
        private System.Collections.ArrayList m_nOrganFoundTreeNodes = new System.Collections.ArrayList();
        /// <summary>
        /// 重置查找
        /// </summary>
        private void ResetOrganFound()
        {
            txtOrganKeyWord.Text = ""; // 清空
            m_nOrganFoundIndex = -1; // 重置

            TreeNode foundNode;
            for (int i = 0; i < m_nOrganFoundTreeNodes.Count; i++) // 重置
            {
                foundNode = (TreeNode)m_nOrganFoundTreeNodes[i];
                foundNode.ForeColor = Color.Black; // 重置
            }
            m_nOrganFoundTreeNodes.Clear();  // 清空

            btnOrganSearch.Visible = true;  // 重置
            btnOrganBack.Visible = false; // 重置
            btnOrganNext.Visible = false; // 重置
        }

        private void OrganSearch(String strKeyword) // 根据关键记事查找
        {
            if (m_nOrganFoundIndex == -1) 
            {
                m_nOrganFoundTreeNodes.Clear(); // 清空
                // search tree node via name/content/op rules

                TreeNode catNode = null;
                System.Collections.IDictionaryEnumerator enumRator = m_hashOrgTreeNodes.GetEnumerator();
                while (enumRator.MoveNext()) // 遍历
                {
                    catNode = (TreeNode)enumRator.Current; // 转换
                    foreach (TreeNode nxNode in catNode.Nodes) // 遍历
                    {
                        FindNode(nxNode, strKeyword, ref m_nOrganFoundTreeNodes); // 查找
                    }
                }
               
                if (m_nOrganFoundTreeNodes.Count > 0) // 找到
                {
                    btnOrganSearch.Visible = false;
                    btnOrganBack.Visible = true;
                    btnOrganNext.Visible = true;

                    m_nOrganFoundIndex = 0;
                    TreeNode foundNode = ((TreeNode)m_nOrganFoundTreeNodes[m_nOrganFoundIndex]);
                    foundNode.ForeColor = Color.Red; // 显著标记
                    foundNode.EnsureVisible();
                    m_tvOrganize.SelectedNode = foundNode; // 设置
                }
            }

            return;
        }

        private void btnOrganSearch_Click(object sender, EventArgs e)
        {
            String strKeyWord = txtOrganKeyWord.Text.Trim();
            if (strKeyWord.Equals(""))
                return;

            OrganSearch(strKeyWord); // 查找
        }

        private void btnOrganResetSearch_Click(object sender, EventArgs e)
        {
            txtOrganKeyWord.Text = "";
            ResetOrganFound(); // 重置
        }

        private void btnOrganBack_Click(object sender, EventArgs e)
        {
            TreeNode foundNode = SearchTreeNext(false,ref m_nOrganFoundIndex,ref m_nOrganFoundTreeNodes); // 向下找
            if (foundNode != null)
            {
                foundNode.ForeColor = Color.Red; // 显著标记
                foundNode.EnsureVisible();
                m_tvOrganize.SelectedNode = foundNode; // 设置选中
            }
        }

        private void btnOrganNext_Click(object sender, EventArgs e)
        {
            TreeNode foundNode = SearchTreeNext(true, ref m_nOrganFoundIndex, ref m_nOrganFoundTreeNodes); // 向下找
            if (foundNode != null) 
            {
                foundNode.ForeColor = Color.Red; // 显著标记
                foundNode.EnsureVisible();
                m_tvOrganize.SelectedNode = foundNode; // 设置选中
            }
        }

        private void btnRelSetStyle_Click(object sender, EventArgs e)
        {
            // @TODO
            // set locked content control's style
            MessageBox.Show("Not implement yet :P");
        }

        /// <summary>
        /// 取得文本的描述
        /// </summary>
        /// <param name="node"></param>
        /// <param name="arrList"></param>
        /// <param name="bOp"></param>
        private void getRelsTxtDescrip( TreeNode node, 
                                        ref System.Collections.ArrayList arrList,
                                        Boolean bOp)
        {
            const UInt16 uMaxLength = 15;
            UInt16 uLen = 0;

            // "类别：名称：公式：内容：说明";
            String strCategory = "", strName = "", strOpRules = "", strCnt = "";
            String strMemo = "";
            String strDescripLine = "";

            if (bOp) 
            {
                strCategory = m_strRelCalcNodeName; // 计算节点
            }
            else
            {
                strCategory = m_strRelDefNodeName; // 定义节点
            }

            NodeInfo ndInfo = null;
            foreach (TreeNode childNode in node.Nodes) // 遍历
            {
                ndInfo = (NodeInfo)childNode.Tag;
                strName = childNode.Name; // 取值

                Word.ContentControl cntCtrl = (Word.ContentControl)ndInfo.objContentCtrl;

                if (cntCtrl != null)
                {
                    uLen = (UInt16)Math.Min(cntCtrl.Range.Text.Length, uMaxLength);
                    strCnt = cntCtrl.Range.Text.Substring(0, uLen); // 摘要
                    if (cntCtrl.Range.Text.Length > uLen)
                    {
                        strCnt += "...";
                    }
                }


                if (bOp)
                {
                    strOpRules = ndInfo.strOpRules; // 运算
                }
                else
                {
                    strOpRules = "";
                }

                if (childNode.Level == 1)
                {
                    // 
                    if (bOp)
                    {
                        strMemo = @"运算定义"; // 名称
                    }
                    else
                    {
                        strMemo = @"变量定义"; // 名称
                    }
                }
                else if (childNode.Level == 2)
                {
                    // 
                    strMemo = childNode.Parent.Name + @"的直接引用";  // 名称
                }

                // "类别：名称：公式：内容：说明";
                strDescripLine = strCategory + "|" + strName + "|" + strOpRules + "|" + strCnt + "|" + strMemo;
                arrList.Add(strDescripLine); // 组合

                getRelsTxtDescrip(childNode, ref arrList, bOp); // 递归
            }
        }


        private void ShowAllRelsInText()
        {
            FormAllRelTxtOut fmAllRelsTxtOut = new FormAllRelTxtOut(); // 初始UI

            System.Collections.ArrayList strArrDescripList = new System.Collections.ArrayList();

            // 类别：名称：公式：内容：说明
            String strTitle = @"类别|名称|公式|内容|说明";  // 名称列
            strArrDescripList.Add(strTitle);

            getRelsTxtDescrip(m_tvRel.Nodes[m_strRelDefNodeName], ref strArrDescripList, false); // 获取节点内容
            getRelsTxtDescrip(m_tvRel.Nodes[m_strRelCalcNodeName], ref strArrDescripList, true); // 获取节点内容

            String strCnt = "";
            for (int i = 0; i < strArrDescripList.Count; i++) // 遍历
                strCnt += (String)strArrDescripList[i] + Environment.NewLine; // 组合内容

            fmAllRelsTxtOut.SetContent(strCnt); // 设置
            fmAllRelsTxtOut.ShowDialog(); // UI显示
        }

        private void btnRelAllTxtOut_Click(object sender, EventArgs e)
        {
            ShowAllRelsInText(); // 显示关联变量所有信息
        }


        private System.Collections.Hashtable m_hashFormCtrls = new System.Collections.Hashtable();

        private void buildFormItems() // 表单项目
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            UInt16 uCnt = 0;
            System.Collections.ArrayList arrList = new System.Collections.ArrayList();

            m_hashFormCtrls.Clear();
            tblFormLayoutPanel.Controls.Clear();

            foreach (Word.ContentControl cntCtrl in curDoc.ContentControls) // 内容控件
            {
                // support writtable control
                if (cntCtrl.LockContents) // 跳过lock
                {
                    continue;
                }

                switch (cntCtrl.Type)
                {
                    case Word.WdContentControlType.wdContentControlGroup: // 内容控件类型
                        // not support
                        break;

                    case Word.WdContentControlType.wdContentControlBuildingBlockGallery: // 内容控件类型
                        // not support
                        break;

                    case Word.WdContentControlType.wdContentControlComboBox: // 内容控件类型
                        break; // not support
//                         uCnt++;
//                         arrList.Add(cntCtrl);
//                         break;

                    case Word.WdContentControlType.wdContentControlDropdownList: // 内容控件类型
                        break;
//                         uCnt++;
//                         arrList.Add(cntCtrl);
//                         break;

                    case Word.WdContentControlType.wdContentControlDate: // 内容控件类型
                        break;
//                         uCnt++;
//                         arrList.Add(cntCtrl);
//                         break;

                    case Word.WdContentControlType.wdContentControlPicture: // 内容控件类型
                        break;
//                         uCnt++;
//                         arrList.Add(cntCtrl);
//                         break;

                    case Word.WdContentControlType.wdContentControlRichText: // 内容控件类型
                    case Word.WdContentControlType.wdContentControlText: // 内容控件类型

                        if (cntCtrl.PlaceholderText.Value.EndsWith("]@")) // 特征匹配
                        {
                            uCnt++;
                            arrList.Add(cntCtrl); // 记录
                        }
                        break;

                    default:
                        break;
                }
            }

            tblFormLayoutPanel.RowCount = 0;
            tblFormLayoutPanel.RowCount = arrList.Count;
            for (int i = 0; i < uCnt; i++) // 遍历
            {
                Word.ContentControl ctrl = (Word.ContentControl)arrList[i];
                LinkLabel linklbl = new LinkLabel();
                linklbl.Text = ctrl.Title;

                if (linklbl.Text == null || linklbl.Text.Trim().Equals("")) // 赋名
                {
                    // or previous content control's title such as label
                    linklbl.Text = "表单项" + i;
                }

                linklbl.Tag = ctrl; // 建立匹配
                linklbl.LinkClicked += new LinkLabelLinkClickedEventHandler(formlinklbl_LinkClicked);
                linklbl.Anchor = AnchorStyles.Left; // 设置属性
                linklbl.AutoSize = true;

                tblFormLayoutPanel.Controls.Add(linklbl, 0, i); // 添加到UI

                Size sz = new Size(259, 112);
                Control addCtrl = null;
                switch (ctrl.Type)
                {
                    case Word.WdContentControlType.wdContentControlGroup: // 控件类型
                        // not support, since group's content not definite
                        break;

                    case Word.WdContentControlType.wdContentControlBuildingBlockGallery: // 控件类型
                        // not support, reason as Group's
                        break;

                    case Word.WdContentControlType.wdContentControlComboBox: // 控件类型
                        ComboBox cmbBox = new ComboBox();

                        cmbBox.Tag = ctrl; // 设置
                        cmbBox.Enter += new EventHandler(formCmbBox_Enter); 
                        cmbBox.TextChanged += new EventHandler(formCmbBox_TextChanged);

                        cmbBox.DropDownStyle = ComboBoxStyle.DropDown;// 控件类型
                        foreach (Word.ContentControlListEntry item in ctrl.DropdownListEntries)
                        {
                            cmbBox.Items.Add(item.Text);// 添加
                        }
                        cmbBox.Size = sz;
                        addCtrl = cmbBox;
                        break;

                    case Word.WdContentControlType.wdContentControlDropdownList: // 控件类型
                        ComboBox cmbBox2 = new ComboBox(); // 新建

                        cmbBox2.Tag = ctrl;

                        cmbBox2.Enter += new EventHandler(formCmbBox_Enter); // 设置
                        cmbBox2.TextChanged += new EventHandler(formCmbBox_TextChanged); // 设置

                        cmbBox2.DropDownStyle = ComboBoxStyle.DropDownList;// 设置
                        foreach (Word.ContentControlListEntry item in ctrl.DropdownListEntries) // 遍历
                        {
                            cmbBox2.Items.Add(item.Text); // 添加
                        }
                        cmbBox2.Size = sz;
                        addCtrl = cmbBox2;
                        break;

                    case Word.WdContentControlType.wdContentControlDate: // 控件类型
                        DateTimePicker dtPicker = new DateTimePicker();

                        if (!ctrl.Range.Text.Equals(""))
                        {
                            try
                            {
                                dtPicker.Value = DateTime.Parse(ctrl.Range.Text); // 取值
                            }
                            catch (System.Exception ex)
                            {
                                // dtPicker.Value = DateTime.Today;
                            }
                        }

                        dtPicker.Tag = ctrl; // 设置
                        dtPicker.Enter += new EventHandler(formDtPicker_Enter); // 设置
                        dtPicker.ValueChanged += new EventHandler(formDtPicker_ValueChanged); // 设置
                        dtPicker.Size = sz;
                        addCtrl = dtPicker;

                        break;

                    case Word.WdContentControlType.wdContentControlPicture: // 控件类型

                        // @TODO
                        // only support to index to content control in doc.
                        // user must click content control in doc to load picture
                        PictureBox picBox = new PictureBox(); // 设置
                        picBox.InitialImage = OfficeAssist.Properties.Resources.picChoose;
                        picBox.Click += new EventHandler(formPicBox_Click); // 设置
                        picBox.GotFocus += new EventHandler(formPicBox_GotFocus); // 设置
                        picBox.Tag = ctrl;
                        picBox.Size = sz;
                        addCtrl = picBox;
                        break;

                    case Word.WdContentControlType.wdContentControlRichText: // 控件类型
                    case Word.WdContentControlType.wdContentControlText: // 控件类型
                        RichTextBox richTxtBox = new RichTextBox(); // 设置
                        richTxtBox.Multiline = true;//ctrl.MultiLine;
                        richTxtBox.WordWrap = true; // 设置
                        richTxtBox.Text = ctrl.Range.Text; // 设置
                        richTxtBox.Tag = ctrl; // 设置
                        richTxtBox.Enter += new EventHandler(formRichTxtBox_Enter); // 设置
                        richTxtBox.Leave += new EventHandler(formRichTxtBox_Leave); // 设置
                        richTxtBox.TextChanged += new EventHandler(formRichTxtBox_TextChanged); // 设置
                        richTxtBox.KeyPress += new KeyPressEventHandler(formRichTxtBox_KeyPress); // 设置
                        
                        richTxtBox.Size = sz;
                        //richTxtBox.AcceptsEnter = false;

                        addCtrl = richTxtBox;
                        break;

                    default:
                        break;
                }

                if (addCtrl != null)
                {
                    //@TODO, how to make control fill out panel cell
                    // addCtrl.Dock = DockStyle.Fill;
                    tblFormLayoutPanel.Controls.Add(addCtrl, 1, i); // 添加
                    m_hashFormCtrls.Add(ctrl.ID, addCtrl); // 添加ID
                }
            }
        }

        void formRichTxtBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == '\n' || e.KeyChar == '\r') // 限制
            {
                MessageBox.Show("暂不支持多段落", "注意");
                return;
            }
        }

        void formRichTxtBox_TextChanged(object sender, EventArgs e)
        {
            RichTextBox curCtrl = (RichTextBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag; 
            char[] chArr = {'\r','\n'};
            String strInput = curCtrl.Text;// 取值

            if (ctrl != null)
            {
                if (strInput.IndexOfAny(chArr) != -1) // 查找
                {
                    strInput = strInput.Replace("\r", ""); // 取代
                    strInput = strInput.Replace("\n", ""); // 取代
                    curCtrl.Text = strInput;
                }
                ctrl.Range.Text = curCtrl.Text; // 重置
            }

        }

        private void refreshFormItems()
        {
            buildFormItems(); // 建立表项目
            if (m_hashFormCtrls.Count == 0)
            {
//                 formLinkLabelSample.Visible = true;
//                 formLinkLabelSample.Enabled = false;
//                 formRichTextBoxSample.Visible = true;
//                 formRichTextBoxSample.Enabled = false;
            }
            else
            {
//                 formLinkLabelSample.Visible = false;
//                 formRichTextBoxSample.Visible = false;
            }

            return;
        }


        private void btnFormRefresh_Click(object sender, EventArgs e)
        {
            refreshFormItems();// 刷新
        }

        void formPicBox_GotFocus(object sender, EventArgs e)
        {
            PictureBox curCtrl = (PictureBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range); // 跳转
                ctrl.Range.Select(); // 选中
            }
        }

        void formPicBox_Click(object sender, EventArgs e)
        {
            // .Filter = "所有图片|*.emf;*.wmf;*.jpg;*.jpeg;*.jfif;*.jpe;*.png;*.bmp;*.dib;*.rle;*.bmz;*.gif;*.gfa;*.emz;*.wmz;*.pcz;*.tif;*.tiff;*.cgm;*.eps;*.pct;*.pict;*.wpg";
            MessageBox.Show("请在文档中的对应图片控件上点击"); 
        }

        void formDtPicker_Enter(object sender, EventArgs e)
        {
            DateTimePicker curCtrl = (DateTimePicker)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range); // 跳转
                ctrl.Range.Select(); // 选择
            }
        }

        void formDtPicker_ValueChanged(object sender, EventArgs e)
        {
            DateTimePicker curCtrl = (DateTimePicker)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;// 转换

            if (ctrl != null)
            {
                Boolean bLock = ctrl.LockContents; // 保留
                ctrl.LockContents = false;
                ctrl.Range.Text = curCtrl.Text; // 设置
                ctrl.LockContents = bLock; // 恢复
            }
        }

        void formCmbBox_Enter(object sender, EventArgs e)
        {
            ComboBox curCtrl = (ComboBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range); // 跳转
                ctrl.Range.Select(); // 选择
            }
        }

        void formCmbBox_TextChanged(object sender, EventArgs e)
        {
            ComboBox curCtrl = (ComboBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;
            //@TODO,
            // need to be test if value could be sync.
            // and locked content whether happen?
            if (ctrl != null)
            {
                Boolean bLock = ctrl.LockContents; // 保留
                ctrl.LockContents = false; // unlock
                ctrl.Range.Text = curCtrl.Text; // 设置
                ctrl.LockContents = bLock; // 恢复
            }

        }

        void formRichTxtBox_Enter(object sender, EventArgs e)
        {
            RichTextBox curCtrl = (RichTextBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range); // 跳转
                ctrl.Range.Select(); // 选择
            }
            
        }

        void formRichTxtBox_Leave(object sender, EventArgs e)
        {
            RichTextBox curCtrl = (RichTextBox)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                Boolean bLock = ctrl.LockContents; // 保留
                ctrl.LockContents = false; // unlock
                ctrl.Range.Text = curCtrl.Text; // 设置
                ctrl.LockContents = bLock; // 恢复
            }
        }

        void formlinklbl_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            LinkLabel curCtrl = (LinkLabel)sender;

            Word.ContentControl ctrl = (Word.ContentControl)curCtrl.Tag;

            if (ctrl != null)
            {
                // ctrl.Range.GoTo();
                GotoThere(ctrl.Range); // 跳转
                ctrl.Range.Select(); // 选择
            }
        }


        private int m_nFormSearchIndex = -1;
        private System.Collections.ArrayList m_arrFormResult = new System.Collections.ArrayList();

        private void formSearch()
        {
            String strKeyWord = txtFormKeyWord.Text;

            if (String.IsNullOrWhiteSpace(strKeyWord)) // 判断
            {
                return;
            }

            m_arrFormResult.Clear();
            m_nFormSearchIndex = -1;

            System.Collections.IEnumerator iter = tblFormLayoutPanel.Controls.GetEnumerator();
            Control ctrl = null;
            while (iter.MoveNext()) // 遍历
            {
                ctrl = (Control)iter.Current;
                if (ctrl.Text.IndexOf(strKeyWord) != -1) // 查找
                {
                    m_arrFormResult.Add(ctrl); // 加入
                }
            }

            if (m_arrFormResult.Count > 0) // 若有值
            {
                m_nFormSearchIndex = 0;

                ctrl = (Control)m_arrFormResult[m_nFormSearchIndex]; 

                tblFormLayoutPanel.ScrollControlIntoView(ctrl); // 跳转到第一项

                btnFormSearch.Visible = false; // 初始化
                btnFormPrevSearch.Visible = true; // 初始化
                btnFormNextSearch.Visible = true; // 初始化
            }
        }


        private void btnFormSearch_Click(object sender, EventArgs e)
        {
            formSearch(); // 查找
        }

        private void formResetSearch() // 重置查找
        {
            m_arrFormResult.Clear(); // 清空
            m_nFormSearchIndex = -1; // 初始化

            btnFormSearch.Visible = true; // 初始化
            btnFormPrevSearch.Visible = false; // 初始化
            btnFormNextSearch.Visible = false; // 初始化

            txtFormKeyWord.Text = ""; // 初始化
        }

        private void btnFormReset_Click(object sender, EventArgs e)
        {
            txtFormKeyWord.Text = "";
            formResetSearch(); // 重置
        }

        private void formSearchNext(Boolean bDirection)
        {
            Control ctrl = null;
            if (bDirection) // 方向
            {
                m_nFormSearchIndex++; // 向下

                if (m_nFormSearchIndex > m_arrFormResult.Count - 1) // wrap
                    m_nFormSearchIndex = 0;

                ctrl = (Control)m_arrFormResult[m_nFormSearchIndex]; // 提取
            }
            else
            {
                m_nFormSearchIndex--; // 向后

                if (m_nFormSearchIndex < 0)
                    m_nFormSearchIndex = m_arrFormResult.Count - 1; // wrap

                ctrl = (Control)m_arrFormResult[m_nFormSearchIndex]; // 提取
            }

            tblFormLayoutPanel.ScrollControlIntoView(ctrl); // 跳转

        }

        private void btnFormNextSearch_Click(object sender, EventArgs e)
        {
            formSearchNext(true); // 向下
        }

        private void btnFormPrevSearch_Click(object sender, EventArgs e)
        {
            formSearchNext(false); // 向后
        }


        private String m_strLibRules =
        "规则：\r\n" +
        "[1].板块下只能新建文件夹，不能上传文件（文件只能上传到文件夹中）。\r\n" +
        "[2].顶层及第一层板块下不能新建文件夹，大于第一层的板块可以。\r\n" +
        "[3].针对板块不能做增删改等操作。\r\n" +
        "[4].个人库第一层不能上传文件（既：文件只能上传到文件夹中）\r\n" +
        "[5].顶层节点不能更改及删除";
        
        // "1）个人库第一层可以创建多个文件夹（相对老系统变更）。\r\n" +

        private Boolean IsMatchRules(TreeNode selNode, TreeNode parentNode, String strOp,ref int nRuleNum)
        {
            ShareContributorOper.TypeNode ndTag = (ShareContributorOper.TypeNode)selNode.Tag;
            ShareContributorOper.TypeNode parentNdTag = null;

            nRuleNum = 1;

            if (strOp.Equals("createFile"))
            {
                // parent node
                if (parentNode == null)
                {
                    return false;
                }
                else
                {
                    parentNdTag = (ShareContributorOper.TypeNode)parentNode.Tag;

                    if (parentNdTag == null)
                    {
                        if (parentNode.FullPath.StartsWith("公共库"))
                        {
                            nRuleNum = 1;
                            return false;
                        }
                        else if (parentNode.FullPath.StartsWith("个人库"))
                        {
                            nRuleNum = 4;
                            return false;
                        }
                    }
                    else
                    {
                        if (parentNdTag.type.Equals("1"))
                        {
                            nRuleNum = 1;
                            return false;
                        }
                        else if (parentNode.FullPath.StartsWith("个人库"))
                        {
                            if (parentNode.Level == 0)
                            {
                                nRuleNum = 4;
                                return false;
                            }
                        }
                    }
                }
            }
            else if(strOp.Equals("createFolder"))
            {
                // parent node
                if (parentNode == null)
                {
                    return false;
                }
                else
                {
                    parentNdTag = (ShareContributorOper.TypeNode)parentNode.Tag;

                    if (parentNdTag == null)
                    {
                        if (parentNode.FullPath.StartsWith("公共库"))
                        {
                            nRuleNum = 2;
                            return false;
                        }
                    }
                    else
                    {
                        if (parentNdTag.type.Equals("1"))
                        {
                            if (parentNode.Level <= 1)
                            {
                                nRuleNum = 2;
                                return false;
                            }
                        }
                    }
                }
            }
            else if (strOp.Equals("updateFile"))
            {
                if (ndTag == null)
                {
                    if(selNode.Level == 0)
                    {
                        nRuleNum = 5;
                        return false;
                    }
                }
                else if (ndTag.type.Equals("1")) // 
                {
                    nRuleNum = 3;
                    return false;
                }
            }
            else if (strOp.Equals("updateFolder"))
            {
                if (ndTag == null)
                {
                    if (selNode.Level == 0)
                    {
                        nRuleNum = 5;
                        return false;
                    }
                }
                else if (ndTag.type.Equals("1")) // 
                {
                    nRuleNum = 3;
                    return false;
                }
            }
            else if (strOp.Equals("deleteFile"))
            {
                if (ndTag == null)
                {
                    if (selNode.Level == 0)
                    {
                        nRuleNum = 5;
                        return false;
                    }
                }
                else if (ndTag.type.Equals("1")) // 
                {
                    nRuleNum = 3;
                    return false;
                }
            }
            else if (strOp.Equals("deleteFolder"))
            {
                if (ndTag == null)
                {
                    if (selNode.Level == 0)
                    {
                        nRuleNum = 5;
                        return false;
                    }
                }
                else if (ndTag.type.Equals("1")) // 
                {
                    nRuleNum = 3;
                    return false;
                }
            }
            else
            {
                
            }

            return true;
        }


        private void AddOneShareItem(String strExternalFileName)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (tvShareLib.SelectedNode == null) // 判断
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                String strTmpFullPath = tvShareLib.SelectedNode.FullPath;

                if (strTmpFullPath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("本地暂不支持此操作");
                    return;
                }
                
            }


            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            TreeNode selNd = null, parentNd = null;
            String strCurNdTag = null, strCurNdType = "", strCurNdId = "";
            String strParentNdTag = null, strParentNdType = "", strParentNdId = "";

            ShareContributorOper.TypeNode ndTag = null, parentNdTag = null;


            selNd = tvShareLib.SelectedNode;

            if (selNd == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                ndTag = (ShareContributorOper.TypeNode)selNd.Tag;

                if (ndTag != null)
                {
                    strCurNdType = ndTag.type;
                    strCurNdId = ndTag.id;
                }

//                 strCurNdTag = (String)selNd.Tag;
//                 if (strCurNdTag != null) // 取值
//                 {
//                     strCurNdType = strCurNdTag.Substring(0, 1);// 取值
//                     strCurNdId = strCurNdTag.Substring(1);// 取值
//                 }

            }

            // if (strCurNdTag == null) // root node
            //
            if (ndTag == null)
            {
                parentNdTag = null;
                // strParentNdTag = null; // 初始化
                parentNd = selNd; // 取值
            }
            else
            {
                if (strCurNdType.Equals("1") || strCurNdType.Equals("2")) // folder
                {
                    parentNd = selNd;// 即本节点
                }
                else
                {
                    parentNd = selNd.Parent; // 向上找                    
                }

//                 if (strCurNdType.Equals("$")) // 特定类型
//                 {
//                     parentNd = selNd.Parent; // 向上找
//                 }
//                 else if (strCurNdType.Equals("#"))// 特定类型
//                 {
//                     parentNd = selNd;// 即本节点
//                 }
//                 else
//                 {
//                     MessageBox.Show("Never be here");
//                     return;
//                 }

                if (parentNd == null)
                {
                    parentNd = selNd;
                }

//                 strParentNdTag = (String)parentNd.Tag;
//                 if (strParentNdTag != null)
//                 {
//                     strParentNdType = strParentNdTag.Substring(0, 1);// 取值
//                     strParentNdId = strParentNdTag.Substring(1);// 取值
//                 }

                parentNdTag = (ShareContributorOper.TypeNode)parentNd.Tag;
                if (parentNdTag != null)
                {
                    strParentNdType = parentNdTag.type;
                    strParentNdId = parentNdTag.id;
                }

            }

            String strSelNodePath = selNd.FullPath;

            TreeNode retNode = null;
            String strRetMsg = "", strItemName="";
            String strCurrentUser = m_addin.m_strLoginedUser;

            Boolean bMatchRules = false;


            if (chkBoxCategory.Checked && String.IsNullOrWhiteSpace(strExternalFileName)) // 分类
            {
                int nRuleNum = -1;

                bMatchRules = IsMatchRules(selNd, parentNd, "createFolder",ref nRuleNum);

                if (!bMatchRules)
                {
                    String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                    MessageBox.Show(strTmp);
                    return;
                }

                if (strSelNodePath.StartsWith("个人库"))
                {

                }
                else // 公共库
                {

                    if (m_addin.m_hashFilePermission.Contains(strParentNdId)) // 权限允许
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strParentNdId]; // 查找权限

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFolderPermission.fpCreateFolder] == 0 &&
                            values[(int)ThisAddIn.DocRepositoryFolderPermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户在此目录无权限上传");
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("当前用户在此目录无权限上传");
                        return;
                    }
                }

                strItemName = txtShareName.Text.Trim();
                if (strItemName.Equals(""))
                {
                    MessageBox.Show("请输入名称");
                    return;
                }
                String orderId = "1";
                // 创建目录
                String parentType = strParentNdType, libType = "0";

                if (strSelNodePath.StartsWith("公共库"))
                {
                    libType = "1";
                }

                retNode = m_scOper.AddType(strParentNdId, strCurrentUser, strItemName, parentType, libType,
                                            ref strRetMsg,ref m_addin.m_hashFilePermission);

                if (retNode == null)
                {
                    MessageBox.Show(strRetMsg, "错误");
                    return;
                }

                parentNd.Nodes.Add(retNode); // 添加节点

                // SYNC同步
                m_addin.SyncOperationPanelTreeUI(m_curDoc, "文库", 1, parentNd.FullPath,retNode);

            }
            else
            {
                int nRuleNum = -1;

                bMatchRules = IsMatchRules(selNd, parentNd, "createFile", ref nRuleNum);

                if (!bMatchRules)
                {
                    String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                    MessageBox.Show(strTmp);
                    return;
                }

                if (strSelNodePath.StartsWith("个人库"))
                {

                }
                else // 公共库
                {

                    if (m_addin.m_hashFilePermission.Contains(strParentNdId)) // 权限允许
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strParentNdId]; // 查找权限

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFolderPermission.fpCreateFile] == 0 &&
                            values[(int)ThisAddIn.DocRepositoryFolderPermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户在此目录无权限上传");
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("当前用户在此目录无权限上传");
                        return;
                    }
                }

                // if no selection, prompt current whole doc will upload
                // save selection/whole doc into temp file
                String strFileUrl = strExternalFileName;

                if (strExternalFileName.Equals(""))
                {
                    //Word.Application app = m_addin.Application;

                    // how to copy to currrent active document?
                    //Word.Application app = Globals.ThisAddIn.Application;
                    Word.Document curDoc = null;

                    try
                    {
                        curDoc = app.ActiveDocument;
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("无活动文档，不能应用");
                        return;
                    }
                    finally
                    {
                    }

                    Word.Selection sel = curDoc.ActiveWindow.Selection;


                    strItemName = txtShareName.Text.Trim(); // 取值
                    String strCurFileName = curDoc.FullName;// 取值
                    String strCurFilePath = Path.GetFullPath(curDoc.FullName);// 取值
                    String strCurFileExtName = Path.GetExtension(curDoc.FullName);// 取值
                    String strCurFileShortName = Path.GetFileNameWithoutExtension(curDoc.FullName);// 取值

                    if (strItemName.Equals(""))
                    {
                        if (strCurFileExtName.Equals("")) // not save, new file
                        {
                            MessageBox.Show("请输入文件名称");
                            return;
                        }
                        else // saved
                        {
                            strFileUrl = curDoc.FullName; // 取路径值
                            curDoc.Save(); // 文档先保存
                        }
                    }
                    else
                    {
                        if (strCurFileExtName.Equals(""))
                        {
                            strFileUrl = m_scOper.m_cfgTempFileLoc + strItemName + ".docx";

                            DialogResult res = MessageBox.Show("当前文件没有保存，将以文件名："+strFileUrl + "进行保存后再上传，是否确认？","确认",MessageBoxButtons.YesNo);

                            if (res == DialogResult.No)
                            {
                                return;
                            }

                            if (File.Exists(strFileUrl)) // 另存一名称
                            {
                                try
                                {
                                    File.SetAttributes(strFileUrl, FileAttributes.Normal); // 设置属性
                                    File.Delete(strFileUrl); // 删除同名文件
                                }
                                catch (System.Exception ex)
                                {
                                    MessageBox.Show(strFileUrl + ":" + ex.Message, "error");
                                    return;
                                }
                            }

                            if (File.Exists(strFileUrl))
                            {
                                MessageBox.Show("不能清除原来文件:" + strFileUrl);
                                return;
                            }

                            curDoc.SaveAs(strFileUrl); // 保存成文件

                        }
                        else
                        {
                            if (!strCurFileShortName.Equals(strItemName))
                            {
                                String strQuestion = "输入与文件名称不一致，请确定使用哪一个？\r\n是：输入的名称(\"" + strItemName + "\")\r\n否：文件本身名称(\"" + strCurFileShortName + "\")\r\n取消：取消";

                                DialogResult res = MessageBox.Show(strQuestion, "确认", MessageBoxButtons.YesNoCancel);

                                if (res == DialogResult.Cancel)
                                {
                                    return;
                                }

                                if (res == DialogResult.Yes)
                                {
                                    // 
                                    strFileUrl = m_scOper.m_cfgTempFileLoc + strItemName + ".docx";

                                    if (File.Exists(strFileUrl)) // 取一名
                                    {
                                        try
                                        {
                                            File.SetAttributes(strFileUrl, FileAttributes.Normal); // 设置属性
                                            File.Delete(strFileUrl); // 删除
                                        }
                                        catch (System.Exception ex)
                                        {
                                            MessageBox.Show(strFileUrl + ":" + ex.Message, "错误");
                                            return;
                                        }
                                    }

                                    if (File.Exists(strFileUrl))
                                    {
                                        MessageBox.Show("不能清除原来文件:" + strFileUrl);
                                        return;
                                    }

                                    curDoc.Save();

                                    try
                                    {
                                    	File.Copy(curDoc.FullName, strFileUrl);
                                    }
                                    catch (System.Exception ex)
                                    {
                                        MessageBox.Show(strFileUrl + ":" + ex.Message, "错误");
                                        return;
                                    }
                                    finally
                                    {
                                    }

                                }
                                else
                                {
                                    // 
                                    strFileUrl = curDoc.FullName;
                                    curDoc.Save(); // 保存文件 
                                }

                            }
                        }
                    }
                }
                else
                {
                    // int nStart = strFileUrl.LastIndexOf('\\');
                    // strItemName = strFileUrl.Substring(nStart + 1); // 取文件名
                    strItemName = Path.GetFileName(strFileUrl);
                }

                //upload
                // 上传
                retNode = m_scOper.uploadFile(strParentNdId,"", strCurrentUser, strFileUrl, ref strRetMsg,ref m_addin.m_hashFilePermission);

                if (retNode == null)
                {
                    MessageBox.Show(strRetMsg, "错误");
                    return;
                }

                parentNd.Nodes.Add(retNode); // 加节点
                // SYNC
                m_addin.SyncOperationPanelTreeUI(m_curDoc, "文库", 1, parentNd.FullPath, retNode);
            }

            tvShareLib.SelectedNode = retNode; // 设置成当前节点

            /*
            if (tvShareLib.Nodes.Count > 0)
            {
                m_addin.ReSyncRefreshShareLibTree(doc, tvShareLib.Nodes);
            }
            */

            MessageBox.Show("完成新增");

            return;
        }


        private void UpdateOneShareItem(String strExternalFileName)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            
            if (tvShareLib.SelectedNode == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                String strTmpFullPath = tvShareLib.SelectedNode.FullPath;

                if (strTmpFullPath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("本地暂不支持此操作");
                    return;
                }

            }

            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            TreeNode selNd = null, parentNd = null;
            String strCurNdTag = null, strCurNdType = "", strCurNdId = "";
            String strParentNdTag = null, strParentNdType = "", strParentNdId = "";

            ShareContributorOper.TypeNode ndTag = null, parentNdTag = null;


            selNd = tvShareLib.SelectedNode;

            if (selNd == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                ndTag = (ShareContributorOper.TypeNode)selNd.Tag;

                if (ndTag != null)
                {
                    strCurNdType = ndTag.type;
                    strCurNdId = ndTag.id;
                }

//                 strCurNdTag = (String)selNd.Tag;
//                 if (strCurNdTag != null)
//                 {
//                     strCurNdType = strCurNdTag.Substring(0, 1); // 取值名称
//                     strCurNdId = strCurNdTag.Substring(1); // 取值名称
//                 }
            }

            if (strCurNdTag == null) // root node
            {
                // strParentNdTag = null;
                parentNdTag = null;
                parentNd = selNd; // 当前节点
            }
            else
            {
                if (strCurNdType.Equals("1") || strCurNdType.Equals("2")) // 节点类型
                {
                    parentNd = selNd; // 当前节点
                }
                else // if (strCurNdType.Equals("#")) // 节点类型
                {
                    parentNd = selNd.Parent; // 向上的节点
                }
//                 else
//                 {
//                     MessageBox.Show("Never be here");
//                     return;
//                 }

                if (parentNd == null)
                {
                    parentNd = selNd;
                }

                parentNdTag = (ShareContributorOper.TypeNode)parentNd.Tag;
                if (parentNdTag != null)
                {
                    strParentNdType = parentNdTag.type;
                    strParentNdId = parentNdTag.id;
                }
                
//                 strParentNdTag = (String)parentNd.Tag;
//                 if (strParentNdTag != null)
//                 {
//                     strParentNdType = strParentNdTag.Substring(0, 1); // 父节点的值名称等
//                     strParentNdId = strParentNdTag.Substring(1); // 父节点的值名称等
//                 }
            }

            String strSelNodePath = selNd.FullPath;

            if (strSelNodePath.StartsWith("个人库"))
            {

            }
            else // 公共库
            {
                if (strCurNdType.Equals("1") || strCurNdType.Equals("2")) // folder
                {
                    if (m_addin.m_hashFilePermission.Contains(strParentNdId)) // 权限检查
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strParentNdId];

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFolderPermission.fpUpdateFile] == 0 &&
                            values[(int)ThisAddIn.DocRepositoryFolderPermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户无权限更新此目录");
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("当前用户无权限更新此目录");
                        return;
                    }
                }
                else // if (strCurNdType.Equals("$")) // file
                {
                    if (m_addin.m_hashFilePermission.Contains(strCurNdId)) // 权限检查
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strCurNdId];

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFilePermission.fpUpdate] == 0 ||
                            values[(int)ThisAddIn.DocRepositoryFilePermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户无权限更新此文件");
                            return;
                        }
                    }
                    else
                    {
                        MessageBox.Show("当前用户无权限更新此文件");
                        return;
                    }
                }
//                 else
//                 {
//                     MessageBox.Show("不能识别的节点");
//                     return;
//                 }
                
            }

            TreeNode retNode = null;
            String strRetMsg = "", strItemName = "", strFileUrl = "";
            String strCurrentUser = m_addin.m_strLoginedUser;

            Boolean bMatchRules = false;

            if (ndTag != null)
            {
                String strNodeType = ndTag.type; // strCurNdTag.Substring(0, 1); // 取节点类型
                if (!(strNodeType.Equals("1") || strNodeType.Equals("2"))) // file
                {
                    int nRuleNum = -1;

                    bMatchRules = IsMatchRules(selNd, parentNd, "updateFile", ref nRuleNum);

                    if (!bMatchRules)
                    {
                        String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                        MessageBox.Show(strTmp);
                        return;
                    }

                    String fileId = ndTag.id;// strCurNdTag.Substring(1);
                    // nRet = m_scOper.removeFile(strCurrentUserName, fileId, ref strRetMessage);

                    // nRet = m_scOper.updateFile(strParentNdId, fileId, strCurrentUser, ref strRetMessage);
                    // how to copy to currrent active document?
                    // Word.Application app = Globals.ThisAddIn.Application;
                    Word.Document curDoc = null;

                    try
                    {
                        curDoc = app.ActiveDocument;
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("无活动文档，不能应用");
                        return;
                    }
                    finally
                    {
                    }

                    Word.Selection sel = curDoc.ActiveWindow.Selection;

                    if (curDoc.FullName != null && !curDoc.FullName.Equals(""))
                    {
                        String strPath = Path.GetDirectoryName(curDoc.FullName);
                        String strOnlyFileName = Path.GetFileName(curDoc.FullName);

                        if (!selNd.Text.Equals(strOnlyFileName))
                        {
                            MessageBox.Show("文件名与选中节点名称不同，不能更新");
                            return;
                        }

                        if (strPath.Equals("")) // no path
                        {
                            String strFileWithPath = Path.GetTempPath() + curDoc.FullName; // 构建临时文件

                            DialogResult res = MessageBox.Show("当前文件没有保存，将以文件名：" + strFileWithPath + "进行保存后再更新，是否确认？", "确认", MessageBoxButtons.YesNo);

                            if (res == DialogResult.No)
                            {
                                return;
                            }

                            if (File.Exists(strFileWithPath)) // 另存一名称
                            {
                                try
                                {
                                    File.SetAttributes(strFileWithPath, FileAttributes.Normal); // 设置属性
                                    File.Delete(strFileWithPath); // 删除同名文件
                                }
                                catch (System.Exception ex)
                                {
                                    MessageBox.Show(strFileWithPath + ":" + ex.Message, "error");
                                    return;
                                }
                            }

                            if (File.Exists(strFileWithPath))
                            {
                                MessageBox.Show("不能清除原来文件:" + strFileWithPath);
                                return;
                            }

                            curDoc.SaveAs(strFileWithPath); // 保存
                            strFileUrl = strFileWithPath;
                        }
                        else
                        {
                            curDoc.Save(); // 保存
                            strFileUrl = curDoc.FullName;
                        }
                    }
                    // 更新原文件
                    retNode = m_scOper.updateFile(strCurNdId, strCurrentUser, strFileUrl, ref strRetMsg,ref m_addin.m_hashFilePermission);

                    if (retNode == null)
                    {
                        MessageBox.Show(strRetMsg, "error");
                        return;
                    }

                }
                else // if (strNodeType.Equals("#")) // type 
                {

                    int nRuleNum = -1;

                    bMatchRules = IsMatchRules(selNd, parentNd, "updateFolder", ref nRuleNum);

                    if (!bMatchRules)
                    {
                        String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                        MessageBox.Show(strTmp);
                        return;
                    }

                    strItemName = txtShareName.Text.Trim();
                    if (strItemName.Equals(""))
                    {
                        MessageBox.Show("请输入名称");
                        return;
                    }

                    String typeId = ndTag.id;// strCurNdTag.Substring(1);
                    // nRet = m_scOper.removeType(typeId, ref strRetMessage);
                    retNode = m_scOper.updateType(typeId, strCurrentUser, strItemName, ref strRetMsg);
                }
//                 else
//                 {
//                     MessageBox.Show("Never be here");
//                     return;
//                 }
            }


            /*
            if (chkBoxCategory.Checked) // 分类
            {
                strItemName = txtShareName.Text.Trim();
                if (strItemName.Equals(""))
                {
                    MessageBox.Show("请输入名称");
                    return;
                }
                String orderId = "1";

                retNode = m_scOper.AddType(strParentNdId, "", strCurrentUser, "", ref strRetMsg);

                if (retNode == null)
                {
                    MessageBox.Show(strRetMsg, "error");
                    return;
                }

                parentNd.Nodes.Add(retNode);
            }
            else
            {

                // if no selection, prompt current whole doc will upload
                // save selection/whole doc into temp file
                String strFileUrl = strExternalFileName;

                if (strExternalFileName.Equals(""))
                {
                    strItemName = txtShareName.Text.Trim();
                    if (strItemName.Equals(""))
                    {
                        MessageBox.Show("请输入名称");
                        return;
                    }

                    // strFileUrl = m_scOper.m_cfgTempFileLoc + strItemName + DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss-ff") + ".docx";
                    strFileUrl = m_scOper.m_cfgTempFileLoc + strItemName + ".docx";

                    if (File.Exists(strFileUrl))
                    {
                        try
                        {
                            File.SetAttributes(strFileUrl, FileAttributes.Normal);
                            File.Delete(strFileUrl);
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show(strFileUrl + ":" + ex.Message, "error");
                            return;
                        }
                    }

                    if (File.Exists(strFileUrl))
                    {
                        MessageBox.Show("不能清除原来文件:" + strFileUrl);
                        return;
                    }

                    Word.Application app = m_addin.Application;

                    // how to copy to currrent active document?
                    Word.Document curDoc = app.ActiveDocument; // app.Documents.Add();
                    Word.Selection sel = curDoc.ActiveWindow.Selection;

                    if (curDoc.FullName != null && !curDoc.FullName.Equals(""))
                    {
                        String strPath = Path.GetDirectoryName(curDoc.FullName);
                        String strOnlyFileName = Path.GetFileName(curDoc.FullName);

                        if (!selNd.Text.Equals(strOnlyFileName))
                        {
                            MessageBox.Show("文件名与选中节点名称不同，不能更新");
                            return;
                        }

                        if (strPath.Equals("")) // no path
                        {
                            String strFileWithPath = Path.GetTempPath() + curDoc.FullName;
                            curDoc.SaveAs(strFileWithPath);
                            strFileUrl = strFileWithPath;
                        }
                        else
                        {
                            curDoc.Save();
                            strFileUrl = curDoc.FullName;
                        }
                    }

                    /*
                                        if (sel.Range.End - sel.Range.Start == 0)
                                        {
                                            DialogResult ret = MessageBox.Show("当前文档未选择任何内容，要上传整个文档？", "确认上传范围",
                                                                                MessageBoxButtons.YesNo);
                                            if (ret == DialogResult.No)
                                            {
                                                return;
                                            }
                                            sel.WholeStory();
                                            sel.Copy();
                                            sel.Collapse();
                                        }
                                        else
                                        {
                                            sel.Copy();
                                        }

                                        Object fileName = strFileUrl;
                                        Object isVisible = false;
                                        Object readOnly = false;
                                        Object miss = Type.Missing;
                                        Object fileFormat = Word.WdSaveFormat.wdFormatDocumentDefault;

                                        Word.Document rdDoc = app.Documents.Add(ref miss, ref miss, ref miss, ref isVisible);

                                        //@TODO, may be problematic, picture not be supported
                                        //
                                        rdDoc.ActiveWindow.Selection.PasteAndFormat(Word.WdRecoveryType.wdFormatOriginalFormatting);
                                        rdDoc.SaveAs(ref fileName, ref fileFormat);
                                        rdDoc.Close();
                     * /
                }
                else
                {
                    int nStart = strFileUrl.LastIndexOf('\\');
                    strItemName = strFileUrl.Substring(nStart + 1);
                }

                //upload
                //@TODO, get current login user

                retNode = m_scOper.updateFile(strParentNdId, strCurNdId, strCurrentUser, strFileUrl, ref strRetMsg);

                if (retNode == null)
                {
                    MessageBox.Show(strRetMsg, "error");
                    return;
                }

                selNd.Text = retNode.Text;
                selNd.Name = retNode.Name;
                selNd.Tag = retNode.Tag;

                // parentNd.Nodes.Add(retNode);
            }
            */

            if (retNode == null)
            {
                MessageBox.Show(strRetMsg, "错误");
                return;
            }

            selNd.Text = retNode.Text; // 更新值内容
            selNd.Name = retNode.Name; // 更新值内容

            ShareContributorOper.TypeNode tNd = (ShareContributorOper.TypeNode)selNd.Tag;
            tNd.name = retNode.Name;
            selNd.Tag = tNd; // 更新值内容


            // SYNC同步
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "文库", 2, selNd.FullPath, selNd);

            // tvShareLib.SelectedNode = retNode;
            /*
            if (tvShareLib.Nodes.Count > 0)
            {
                m_addin.ReSyncRefreshShareLibTree(doc, tvShareLib.Nodes);
            }
            */

            MessageBox.Show("完成更新");

            return;
        }




        /* 
        private void AddOneShareItem(String strExternalFileName)
        {
            // prepare values of column 
            String strItemName = "";
            String strLibCat = "个人库";
            String strType = "文档";
            String strItemCat = "内容节点";
            String strAttachmentType = "docx";

            if (chkBoxCommonLib.Checked)
            {
                strLibCat = "公共库";
            }

            if (strExternalFileName.Equals(""))
            {
                strItemName = txtShareName.Text.Trim();
                if (strItemName.Equals(""))
                {
                    MessageBox.Show("请输入名称");
                    return;
                }

                if (chkBoxCategory.Checked)
                {
                    strItemCat = "分类节点";
                    strType = "分类";
                }
            }
            else
            {
                strItemCat = "内容节点";
            }

            String parentId = "";
            String ownerId = "1000"; // @TODO,get current login account id
            String ownerAccount = "lidong"; // @TODO, get current login account id

            // permission to control
            // 
            TreeNode selNode = tvShareLib.SelectedNode;
            if (selNode != null)
            {
                TreeNode[] nds = tvShareLib.Nodes.Find("公共库", false);
                TreeNode cmnd = nds[0];
                TreeNode[] fndNds = cmnd.Nodes.Find(selNode.Name, true);
                if (fndNds.GetLength(0) > 0) // found
                {
                    // @TODO,
                    // if permission is NOT allowed
                    // MessageBox.Show("不允许在公共库下创建");
                    // return;
                }

                String strKey = (String)selNode.Tag;
                String[] strArr = strKey.Split('_');
                String strItemCate = strArr[1];

                while (!strItemCate.Equals("分类节点"))
                {
                    selNode = selNode.Parent;

                    strKey = (String)selNode.Tag;
                    strArr = strKey.Split('_');
                    strItemCate = strArr[1];
                }

                parentId = strArr[2];

            }
            else
            {
                MessageBox.Show("请选中一个分类节点");
                return;
            }

            // check duplicate name, prompt
            Boolean bExist = isExistInShareDb(m_strShareDbUrl, strItemName);
            if (bExist)
            {
                MessageBox.Show("名称不唯一，请更改名称");
                return;
            }
            // if no selection, prompt current whole doc will upload
            // save selection/whole doc into temp file
            String strFileUrl = strExternalFileName;

            if (strExternalFileName.Equals(""))
            {
                Word.Application app = m_addin.Application;

                // how to copy to currrent active document?
                Word.Document curDoc = app.ActiveDocument; // app.Documents.Add();
                Word.Selection sel = curDoc.ActiveWindow.Selection;

                if (sel.Range.End - sel.Range.Start == 1)
                {
                    DialogResult ret = MessageBox.Show("当前文档未选择任何内容，要上传整个文档？", "确认上传范围",
                                                        MessageBoxButtons.YesNo);
                    if (ret == DialogResult.No)
                    {
                        return;
                    }
                    sel.WholeStory();
                }

                sel.Copy();

                strFileUrl = m_strShareTempFileUrl + strItemName + DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss-ff") + ".docx";

                Object fileName = strFileUrl;
                Object isVisible = false;
                Object readOnly = false;
                Object miss = Type.Missing;

                Word.Document rdDoc = app.Documents.Open(ref fileName, ref miss,
                                                          ref readOnly, ref miss,
                                                          ref miss, ref miss, ref miss,
                                                          ref miss, ref miss, ref miss,
                                                          ref miss, ref isVisible);

                rdDoc.ActiveWindow.Selection.PasteAndFormat(Word.WdRecoveryType.wdFormatOriginalFormatting);


                Object objFileName = strFileUrl;
                Object objFileFormat = Word.WdSaveFormat.wdFormatDocumentDefault;
                rdDoc.SaveAs(ref objFileName, ref objFileFormat);
                rdDoc.Close();
            }
            else
            {
                int nStart = strFileUrl.LastIndexOf('\\');
                strItemName = strFileUrl.Substring(nStart + 1);

                nStart = strItemName.IndexOf('.');
                strAttachmentType = strItemName.Substring(nStart + 1);
            }

            // insert a record into db
            insertItemIntoShareLib(m_strShareDbUrl, strLibCat, strType, strItemName, strItemCat,
                                    ownerAccount, ownerId, strAttachmentType, strFileUrl,
                                    parentId, ownerId, ownerAccount);

            // get id and fill this node tag
            // 
            String strId = "";
            strId = getShareIdViaName(m_strShareDbUrl, strItemName);

            TreeNode newNode = new TreeNode(strItemName);
            
            String strInfo = strLibCat + "_" + strItemCat + "_" + strId;

            newNode.Tag = strInfo;
            selNode.Nodes.Add(newNode);

            // 

            return;
        }
         * */

        private void btnShareAdd_Click(object sender, System.EventArgs e)
        {
            AddOneShareItem(""); // 增加共享项目
            resetShareSearch(); // 重置查找
        }


        private String RemoveOneShareItem(String dbUrl,String strItemName)
        {
//             OracleTransaction transaction = null;
// 
//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     con.Open();
// 
//                     String block = "DELETE FROM TBLSHARELIB WHERE NAME = :1";// MUST NO ';' in the end!
// 
//                     OracleCommand cmd = new OracleCommand();
//                     cmd.Connection = con;
//                     cmd.CommandText = block;
//                     cmd.CommandType = CommandType.Text;
// 
//                     transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleParameter paramNAME = cmd.Parameters.Add("NAME", OracleDbType.Varchar2);
//                     paramNAME.Direction = ParameterDirection.Input;
//                     paramNAME.Value = strItemName;
// 
//                     cmd.ExecuteNonQuery();
//                     transaction.Commit();
//                     
//                 }
//                 catch (Exception e)
//                 {
//                     try
//                     {
//                         if (transaction != null)
//                         {
//                             transaction.Rollback();
//                         }
//                     }
//                     catch (SqlException ex)
//                     {
//                         if (transaction.Connection != null)
//                         {
//                             Console.WriteLine("An exception of type " + ex.GetType() +
//                                 " was encountered while attempting to roll back the transaction.");
//                         }
//                     }
// 
//                     MessageBox.Show(e.Message);
//                     return e.Message;
//                     
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
//             }//using

            return "OK";
        }

        private void btnShareRemove_Click(object sender, System.EventArgs e)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            
            if (tvShareLib.SelectedNode == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                String strTmpFullPath = tvShareLib.SelectedNode.FullPath;

                if (strTmpFullPath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("本地暂不支持此操作");
                    return;
                }

            }

            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            TreeNode selNode = tvShareLib.SelectedNode;

            if (selNode != null)
            {
                TreeNode[] nds = tvShareLib.Nodes.Find("公共库", false);
                TreeNode cmnd = nds[0];
                TreeNode[] fndNds = cmnd.Nodes.Find(selNode.Name, true);
                if (fndNds.GetLength(0) > 0) // found
                {
                    // @TODO,
                    // if permission is NOT allowed
                    // MessageBox.Show("不允许在公共库下删除");
                    // return;
                }

                if (selNode.Nodes.Count > 0)
                {
                    MessageBox.Show("本节点尚有子节点，不能删除");
                    return;
                }

                //@TODO, get current user name
                String strCurrentUserName = m_addin.m_strLoginedUser;
                String strParentNodeId = "";
                // String strTag = (String)selNode.Tag;
                ShareContributorOper.TypeNode ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

                int nRet = -1;
                String strRetMessage = "";

                if(selNode.Parent != null && selNode.Parent.Tag != null)
                {
                    ShareContributorOper.TypeNode ndTmpTag = (ShareContributorOper.TypeNode)selNode.Parent.Tag;
                    // String strTmp = (String)selNode.Parent.Tag;
                    // strParentNodeId =  strTmp.Substring(1); // 取出节点名称
                    strParentNodeId = ndTmpTag.id;
                }

                String strSelNodePath = selNode.FullPath;

                if (strSelNodePath.StartsWith("个人库"))
                {

                }
                else // 公共库
                {
                    String strCurNdType = "", strCurNdId = "";

//                     if (strTag != null)
//                     {
//                         strCurNdType = strTag.Substring(0, 1);
//                         strCurNdId = strTag.Substring(1);
//                     }

                    if (ndTag != null)
                    {
                        strCurNdType = ndTag.type;
                        strCurNdId = ndTag.id;
                    }


                    if (strCurNdType.Equals("1") || strCurNdType.Equals("2")) // folder
                    {
                        if (m_addin.m_hashFilePermission.Contains(strParentNodeId)) // 权限检查
                        {
                            int[] values = null;

                            values = (int[])m_addin.m_hashFilePermission[strParentNodeId];

                            // 
                            if (values[(int)ThisAddIn.DocRepositoryFolderPermission.fpRemoveFile] == 0 &&
                                values[(int)ThisAddIn.DocRepositoryFolderPermission.fpFullControl] == 0)
                            {
                                MessageBox.Show("当前用户无权限删除此目录");
                                return;
                            }

                        }
                        else
                        {
                            MessageBox.Show("当前用户无权限删除此目录");
                            return;
                        }
                    }
                    else // if (strCurNdType.Equals("$")) // file
                    {
                        if (m_addin.m_hashFilePermission.Contains(strCurNdId)) // 权限检查
                        {
                            int[] values = null;

                            values = (int[])m_addin.m_hashFilePermission[strCurNdId];

                            // 
                            if (values[(int)ThisAddIn.DocRepositoryFilePermission.fpRemove] == 0 ||
                                values[(int)ThisAddIn.DocRepositoryFilePermission.fpFullControl] == 0)
                            {
                                MessageBox.Show("当前用户无权限删除此文件");
                                return;
                            }

                        }
                        else
                        {
                            MessageBox.Show("当前用户无权限删除此文件");
                            return;
                        }
                    }
//                     else
//                     {
//                         MessageBox.Show("不能识别的节点");
//                         return;
//                     }
                }

                if(ndTag != null)
                {
                    String strNodeType = ndTag.type;// strTag.Substring(0, 1);
                    if (!(strNodeType.Equals("1") || strNodeType.Equals("2"))) // file
                    {
                        int nRuleNum = -1;

                        Boolean bMatchRules = IsMatchRules(selNode, selNode.Parent, "deleteFile", ref nRuleNum);

                        if (!bMatchRules)
                        {
                            String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                            MessageBox.Show(strTmp);
                            return;
                        }

                        String fileId = ndTag.id;// strTag.Substring(1);
                        // nRet = m_scOper.removeFile(strCurrentUserName, fileId, ref strRetMessage);
                        // 删除原文件
                        nRet = m_scOper.removeFile(fileId, strCurrentUserName, ref strRetMessage);
                    }
                    else // if(strNodeType.Equals("#")) // type 
                    {
                        int nRuleNum = -1;

                        Boolean bMatchRules = IsMatchRules(selNode, selNode.Parent, "deleteFolder", ref nRuleNum);

                        if (!bMatchRules)
                        {
                            String strTmp = "违反规则[" + nRuleNum + "]\r\n\r\n" + m_strLibRules;
                            MessageBox.Show(strTmp);
                            return;
                        }

                        String typeId = ndTag.id;// strTag.Substring(1);
                        // nRet = m_scOper.removeType(typeId, ref strRetMessage);
                        nRet = m_scOper.removeType(strParentNodeId, typeId, strCurrentUserName, ref strRetMessage);
                    }
//                     else
//                     {
//                         MessageBox.Show("Never be here");
//                         return;
//                     }
                }

                // remove it from DB
                // String strRet = RemoveOneShareItem(m_strShareDbUrl, selNode.Text);

                if (nRet == 0)
                {
                    TreeNode activeNode = selNode.PrevNode;
                    if (activeNode == null)
                    {
                        activeNode = selNode.NextNode; // 移到下一节点
                    }

                    if (activeNode == null)
                    {
                        activeNode = selNode.Parent; // 父节点
                    }

                    // remove current selected node
                    // SYNC 同步
                    m_addin.SyncOperationPanelTreeUI(m_curDoc, "文库", 3, selNode.FullPath);

                    selNode.Remove(); // 删除UI节点
                    tvShareLib.SelectedNode = activeNode; // 设置为当前选择节点

                    MessageBox.Show("删除成功");
                }
                else
                {
                    MessageBox.Show("删除失败：" + strRetMessage);
                }

            }

            /*
            if (tvShareLib.Nodes.Count > 0)
            {
                m_addin.ReSyncRefreshShareLibTree(doc, tvShareLib.Nodes);
            }
            */

            resetShareSearch(); // 重置查找

            return;
        }


        private void tvShareLib_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            // RefShareItem();
            btnShareOpen_Click(null, null);// 调用打开
        }//


//         private Boolean IsSupportFileFormat(String strFileName)
//         {
//             String strFileType = Path.GetExtension(strFileName);
// 
//             if (strFileType == null)
//                 return false;
// 
//             if (!strFileType.ToLower().Equals(".doc") && 
//                 !strFileType.ToLower().Equals(".docx"))
//             {
//                 return false;
//             }
// 
//             return true;
//         }

        private void RefShareItem()
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode selNode = tvShareLib.SelectedNode;
            DialogResult res = DialogResult.OK;
            Boolean bIsWordDoc = false;
            Boolean bIsPic = false;


            if (selNode == null)
            {
                MessageBox.Show("请选中某一节点");
                return;
            }

            if (selNode.FullPath.StartsWith("我的电脑"))
            {
                if (selNode.Level == 0)
                {
                    MessageBox.Show("请选中子节点");
                    return;
                }

                String strFullPath = selNode.FullPath.Replace("我的电脑\\", "");

                if (!strFullPath.Equals(""))
                {
                    bIsWordDoc = m_addin.IsInsertbleFileFormat(strFullPath); // 判断文件格式

                    if (!bIsWordDoc)
                    {
                        bIsPic = m_addin.IsPicFileFormat(strFullPath); // 判断图片

                        if (!bIsPic)
                        {
                            MessageBox.Show("不支持的文件类型,只支持WORD文档或图片");
                            return;
                        }
                    }

                    res = MessageBox.Show("确认引用此文件到当前文件当前位置？", "确认", MessageBoxButtons.YesNo);

                    if (res == DialogResult.No)
                    {
                        return;
                    }

                    if (!bIsPic) // doc
                    {
                        insertDocIntoCurDoc(strFullPath); // 插入doc文档到当前位置
                    }
                    else
                    {
                        //Word.Application app = m_addin.Application;

                        //Word.Application app = Globals.ThisAddIn.Application;
                        Word.Document curDoc = null;

                        try
                        {
                            curDoc = app.ActiveDocument;
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show("无活动文档，不能应用");
                            return;
                        }
                        finally
                        {
                        }
                        Word.Selection sel = curDoc.ActiveWindow.Selection;

                        Object objLinkToFile = false;
                        Object objSaveWithDocument = true;

                        sel.InlineShapes.AddPicture(strFullPath, objLinkToFile, objSaveWithDocument); // 插入图片

                    }
                }

                return;
            }


            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            ShareContributorOper.TypeNode ndTag = null, parentNdTag = null;
            ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

            // String strTag = (String)selNode.Tag;
            
            String strType = null;

            if (ndTag != null)
            {
                strType = ndTag.type;// strTag.Substring(0, 1);
            }

            if (strType == null || strType.Equals("1") || strType.Equals("2"))
            {
                MessageBox.Show("请选择文件节点");
                return;
            }


            TreeNode parentNd = selNode.Parent;
            String strParentNdId = "";

            if (parentNd != null && parentNd.Tag != null)
            {
                ShareContributorOper.TypeNode item = (ShareContributorOper.TypeNode)parentNd.Tag;
                strParentNdId = item.id;//strItem.Substring(1); // 父节点的信息
            }

            String strSelNodePath = selNode.FullPath;

            if (strSelNodePath.StartsWith("个人库"))
            {

            }
            else // 公共库
            {
                String strCurNdType = "", strCurNdId = "";

                if (ndTag != null)
                {
                    strCurNdType = ndTag.type;// strTag.Substring(0, 1);
                    strCurNdId = ndTag.id;// strTag.Substring(1);
                }


                if (strCurNdType.Equals("1") || strCurNdType.Equals("2")) // folder
                {
                    if (m_addin.m_hashFilePermission.Contains(strParentNdId)) // 权限检查
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strParentNdId];

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFolderPermission.fpDownloadFile] == 0 &&
                            values[(int)ThisAddIn.DocRepositoryFolderPermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户在此目录无权限下载");
                            return;
                        }

                    }
                    else
                    {
                        MessageBox.Show("当前用户在此目录无权限下载");
                        return;
                    }
                }
                else // if (strCurNdType.Equals("$")) // file
                {
                    if (m_addin.m_hashFilePermission.Contains(strCurNdId)) // 权限检查
                    {
                        int[] values = null;

                        values = (int[])m_addin.m_hashFilePermission[strCurNdId];

                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFilePermission.fpDownload] == 0 ||
                            values[(int)ThisAddIn.DocRepositoryFilePermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户在此目录无权限下载");
                            return;
                        }

                    }
                    else
                    {
                        MessageBox.Show("当前用户在此目录无权限下载");
                        return;
                    }
                }

            }

            String strFileId = ndTag.id;// strTag.Substring(1);
            String strFileName = selNode.Text;

            bIsWordDoc = m_addin.IsInsertbleFileFormat(strFileName); // 判断文件格式
            if (!bIsWordDoc)
            {
                bIsPic = m_addin.IsPicFileFormat(strFileName); // 判断是否图片

                if (!bIsPic)
                {
                    MessageBox.Show("不支持的文件类型,只支持WORD文档或图片");
                    return;
                }
            }

            res = MessageBox.Show("确认引用此文件到当前文件当前位置？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }


            int nRet = 0;
            String strLocFileUrl = "";
            strLocFileUrl = m_addin.m_cfgTempFileLoc;

            String strTmpFile = strLocFileUrl + "\\" + selNode.Text;

            if (File.Exists(strTmpFile)) // 临时文件若存在
            {
                // try to delete it

                try
                {
                    File.Delete(strTmpFile);
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("清除原同名文件:" + strTmpFile + "失败，请关闭此打开文件或尝试手动清除再打开", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                finally
                {
                }

            }
            
            // 下载文件
            nRet = m_scOper.downloadFile(m_addin.m_strLoginedUser,strFileId, ref strLocFileUrl);

            if (nRet == 0)
            {
                if (!bIsPic) // doc
                {
                    insertDocIntoCurDoc(strLocFileUrl); // 插入文件到当前位置
                }
                else
                {
                    //Word.Application app = m_addin.Application;
                    // Word.Application app = Globals.ThisAddIn.Application;
                    Word.Document curDoc = null;

                    try
                    {
                        curDoc = app.ActiveDocument;
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("无活动文档，不能应用");
                        return;
                    }
                    finally
                    {
                    }

                    Word.Selection sel = curDoc.ActiveWindow.Selection;

                    Object objLinkToFile = false;
                    Object objSaveWithDocument = true;

                    sel.InlineShapes.AddPicture(strLocFileUrl, objLinkToFile, objSaveWithDocument); // 加入图片到当前位置

                }
            }

            // getRefShareItem(m_strShareDbUrl, m_strShareTempFileUrl, selNode.Text);

            return;
        }


        private void btnShareRef_Click(object sender, System.EventArgs e)
        {
            RefShareItem(); // 插入引用
        }

        private void btnFormStyle_Click(object sender, System.EventArgs e)
        {
            MessageBox.Show("NOT YET");
        }

        private void btnOrganProtect_Click(object sender, System.EventArgs e)
        {
            // 将当前的selection 添加到 content control并且lock
            // 
            MessageBox.Show("NOT YET");
        }

        private void btnOrgCancelProtect_Click(object sender, System.EventArgs e)
        {
            // 将当前的selection 的content control取消lock，并且删除content controls
            // 
            MessageBox.Show("NOT YET");
        }

        /// <summary>
        /// 插入项目到文库
        /// </summary>
        /// <param name="dbUrl"></param>
        /// <param name="strLibCategory"></param>
        /// <param name="strItemType"></param>
        /// <param name="strItemName"></param>
        /// <param name="strItemCategory"></param>
        /// <param name="strContributorAccount"></param>
        /// <param name="strContributorId"></param>
        /// <param name="strAttachmentType"></param>
        /// <param name="strFileUrl"></param>
        /// <param name="strParentID"></param>
        /// <param name="strOwnerID"></param>
        /// <param name="strOwnerAccount"></param>
        /// <returns></returns>
        private String insertItemIntoShareLib(  String dbUrl, String strLibCategory,
                                                String strItemType, String strItemName,
                                                String strItemCategory, String strContributorAccount,
                                                String strContributorId,String strAttachmentType,
                                                String strFileUrl, String strParentID,
                                                String strOwnerID, String strOwnerAccount )
        {
            // String constr = "User Id=standardDoc;Password=standardDoc123;Data Source=ORCL214";
            // String SourceLoc = @"D:\Users\aaa.docx";
//             OracleTransaction transaction = null;
// 
//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     con.Open();
// 
//                     FileStream fs = new FileStream(strFileUrl, FileMode.Open, FileAccess.Read);
//                     UInt32 uSrcLen = (UInt32)fs.Length;
//                     byte[] ImageData = new byte[fs.Length];
//                     fs.Read(ImageData, 0, System.Convert.ToInt32(fs.Length));
//                     fs.Close();
// 
//                     MD5 md5 = new MD5CryptoServiceProvider();
//                     byte[] retVal = md5.ComputeHash(ImageData);
//                     StringBuilder sb = new StringBuilder();
//                     for (int i = 0; i < retVal.Length; i++)
//                     {
//                         sb.Append(retVal[i].ToString("X2"));
//                     }
//                     String strMD5 = sb.ToString();
// 
//                     String block = "INSERT INTO TBLSHARELIB ( " +
//                                    "LIBCATEGORY," +    // 1
//                                    "TYPE," +           // 2
//                                    "NAME," +           // 3
//                                    "ITEMCATEGORY," +   // 4
//                                    "CONTRIBACCOUNT," + // 5
//                                    "CONTRIBID," +      // 6
//                                    "REFCOUNT," +       // 7
//                                    "ATTACHMENTTYPE," + // 8
//                                    "ATTACHMENT," +     // 9
//                                    "ATTACHMENTSIZE," + // 10
//                                    "ORDERSN," +        // 11
//                                    "MD5," +            // 12
//                                    "RECORDTIME," +     // 13
//                                    "PARENTID,"   +     // 14
//                                    "OWNERID," +        // 15
//                                    "OWNERACCOUNT )" +  // 16
//                                    " VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16)";// MUST NO ';' in the end!
// 
//                     OracleCommand cmd = new OracleCommand();
//                     cmd.Connection = con;
//                     cmd.CommandText = block;
//                     cmd.CommandType = CommandType.Text;
// 
//                     transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleParameter paramLIBCATEGORY = cmd.Parameters.Add("LIBCATEGORY", OracleDbType.Varchar2);
//                     paramLIBCATEGORY.Direction = ParameterDirection.Input;
//                     paramLIBCATEGORY.Value = strLibCategory;
// 
//                     OracleParameter paramTYPE = cmd.Parameters.Add("TYPE", OracleDbType.Varchar2);
//                     paramTYPE.Direction = ParameterDirection.Input;
//                     paramTYPE.Value = strItemType;
// 
// 
//                     OracleParameter paramNAME = cmd.Parameters.Add("NAME", OracleDbType.Varchar2);
//                     paramNAME.Direction = ParameterDirection.Input;
//                     paramNAME.Value = strItemName;
// 
//                     OracleParameter paramITEMCATEGORY = cmd.Parameters.Add("ITEMCATEGORY", OracleDbType.Varchar2);
//                     paramITEMCATEGORY.Direction = ParameterDirection.Input;
//                     paramITEMCATEGORY.Value = strItemCategory;
// 
// 
//                     OracleParameter paramCONTRIBACCOUNT = cmd.Parameters.Add("CONTRIBACCOUNT", OracleDbType.Varchar2);
//                     paramCONTRIBACCOUNT.Direction = ParameterDirection.Input;
//                     paramCONTRIBACCOUNT.Value = strContributorAccount;
// 
//                     OracleParameter paramCONTRIBID = cmd.Parameters.Add("CONTRIBID", OracleDbType.Varchar2);
//                     paramCONTRIBID.Direction = ParameterDirection.Input;
//                     paramCONTRIBID.Value = strContributorId;
// 
//                     OracleParameter paramREFCOUNT = cmd.Parameters.Add("REFCOUNT", OracleDbType.Int32);
//                     paramREFCOUNT.Direction = ParameterDirection.Input;
//                     paramREFCOUNT.Value = 0;
// 
//                     OracleParameter paramATTACHMENTTYPE = cmd.Parameters.Add("ATTACHMENTTYPE", OracleDbType.Varchar2);
//                     paramATTACHMENTTYPE.Direction = ParameterDirection.Input;
//                     paramATTACHMENTTYPE.Value = strAttachmentType;
// 
//                     OracleParameter paramATTACHMENT = cmd.Parameters.Add("ATTACHMENT", OracleDbType.Blob);
//                     paramATTACHMENT.Direction = ParameterDirection.Input;
//                     paramATTACHMENT.Value = ImageData;
// 
// 
//                     OracleParameter paramATTACHMENTSIZE = cmd.Parameters.Add("ATTACHMENTSIZE", OracleDbType.Int32);
//                     paramATTACHMENTSIZE.Direction = ParameterDirection.Input;
//                     paramATTACHMENTSIZE.Value = uSrcLen;
// 
//                     OracleParameter paramORDERSN = cmd.Parameters.Add("ORDERSN", OracleDbType.Int32);
//                     paramORDERSN.Direction = ParameterDirection.Input;
//                     paramORDERSN.Value = 0;
// 
//                     OracleParameter paramMD5 = cmd.Parameters.Add("MD5", OracleDbType.Varchar2);
//                     paramMD5.Direction = ParameterDirection.Input;
//                     paramMD5.Value = strMD5;
// 
//                     OracleParameter paramRECORDTIME = cmd.Parameters.Add("RECORDTIME", OracleDbType.Varchar2);
//                     paramRECORDTIME.Direction = ParameterDirection.Input;
//                     paramRECORDTIME.Value = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ff");
// 
//                     OracleParameter paramPARENTID = cmd.Parameters.Add("PARENTID", OracleDbType.Int32);
//                     paramPARENTID.Direction = ParameterDirection.Input;
//                     if (strParentID.Equals(""))
//                     {
//                         paramPARENTID.Value = null;
//                     }
//                     else
//                     {
//                         paramPARENTID.Value = Int32.Parse(strParentID);
//                     }
// 
// 
//                     OracleParameter paramOWNERID = cmd.Parameters.Add("OWNERID", OracleDbType.Varchar2);
//                     paramOWNERID.Direction = ParameterDirection.Input;
//                     paramOWNERID.Value = strOwnerID;
// 
//                     OracleParameter paramOWNERACCOUNT = cmd.Parameters.Add("OWNERACCOUNT", OracleDbType.Varchar2);
//                     paramOWNERACCOUNT.Direction = ParameterDirection.Input;
//                     paramOWNERACCOUNT.Value = strOwnerAccount;
// 
// 
// 
//                     cmd.ExecuteNonQuery();
//                     transaction.Commit();
//                     
//                 }
//                 catch (Exception e)
//                 {
//                     try
//                     {
//                         if (transaction != null)
//                         {
//                             transaction.Rollback();
//                         }
//                     }
//                     catch (SqlException ex)
//                     {
//                         if (transaction.Connection != null)
//                         {
//                             Console.WriteLine("An exception of type " + ex.GetType() +
//                                 " was encountered while attempting to roll back the transaction.");
//                         }
//                     }
// 
//                     MessageBox.Show(e.Message);
//                     return e.Message;
//                     
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
//             }//using

            return "OK";
        }


        private String getShareIdViaName(String dbUrl,String strItemName)
        {
//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     String block = "SELECT ID FROM TBLSHARELIB WHERE NAME='" + strItemName + "'";
//                     con.Open();
//                     OracleCommand cmd = con.CreateCommand();
//                     cmd.CommandText = block;
//                     //cmd.CommandType = CommandType.Text;
//                     OracleTransaction transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleDataReader rder = cmd.ExecuteReader();
//                     rder.Read();
// 
//                     OracleDecimal dbItemId = rder.GetDecimal(0);
//                     
//                     rder.Close();
//                     transaction.Commit();
// 
//                     return dbItemId.ToString();
//                 }
//                 catch (System.Exception ex)
//                 {
//                     MessageBox.Show(ex.Message);
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
// 
//             }//using

            return "";
        }

        private Boolean isExistInShareDb(String dbUrl, String strItemName)
        {
//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     String block = "SELECT NAME FROM TBLSHARELIB WHERE NAME='" + strItemName + "'";
//                     con.Open();
//                     OracleCommand cmd = con.CreateCommand();
//                     cmd.CommandText = block;
//                     //cmd.CommandType = CommandType.Text;
//                     OracleTransaction transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleDataReader rder = cmd.ExecuteReader();
//                     rder.Read();
// 
//                     OracleString dbItemName = rder.GetOracleString(0);
//                     
//                     rder.Close();
//                     transaction.Commit();
// 
//                     return (!dbItemName.IsNull);
//                 }
//                 catch (System.Exception ex)
//                 {
//                     MessageBox.Show(ex.Message);
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
// 
//             }//using

            return false;
        }

        private void getRefShareItem(String dbUrl, String tempLoc, String strItemName)
        {
            //  String constr = "User Id=standardDoc;Password=standardDoc123;Data Source=ORCL214";
            // String tempLoc = @"D:\Users\temp";

//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     Word.Document curDoc = m_addin.Application.ActiveDocument;
//                     if (curDoc == null)
//                         return;
// 
//                     Word.Selection sel = curDoc.ActiveWindow.Selection;
// 
// 
//                     String block = "SELECT NAME,ATTACHMENT,ATTACHMENTSIZE,MD5,ATTACHMENTTYPE FROM TBLSHARELIB WHERE NAME='" + strItemName + "'";
//                     con.Open();
//                     OracleCommand cmd = con.CreateCommand();
//                     cmd.CommandText = block;
//                     //cmd.CommandType = CommandType.Text;
//                     OracleTransaction transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleDataReader rder = cmd.ExecuteReader();
//                     rder.Read();
// 
//                     OracleString dbItemName = rder.GetOracleString(0);
//                     OracleBlob dbItemAttachLob = rder.GetOracleBlob(1);
//                     OracleDecimal dbItemSize = rder.GetOracleDecimal(2);
//                     OracleString dbItemMD5 = rder.GetOracleString(3);
//                     OracleString dbItemAttachmentType = rder.GetOracleString(4);
//                     rder.Close();
// 
//                     Boolean bGetFromLocal = false;
// 
//                     // find filename in temp directory
//                     String[] filePaths = Directory.GetFiles(tempLoc, dbItemName.ToString() + "_*." + dbItemAttachmentType.ToString());
//                     // if found
//                     if (filePaths.GetLength(0) > 0)
//                     {
//                         String strFile = filePaths[0];// Get first one
// 
//                         int nStart = strFile.LastIndexOf('_');
//                         int nEnd = strFile.IndexOf('.', nStart);
// 
//                         String strMD5InFileName = strFile.Substring(nStart + 1, nEnd - nStart - 1);
// 
//                         strMD5InFileName = strMD5InFileName.ToUpper();
// 
//                         if (dbItemMD5.ToString().ToUpper().Equals(strMD5InFileName) )
//                         {
//                             bGetFromLocal = true;
//                             // if(fileexist and is doc type)
//                             // sel.InsertFile(strFile);
//                             insertDocIntoCurDoc(strFile);
//                         }
//                     }
// 
//                     if (!bGetFromLocal)
//                     {
//                         String strNewFile = "";
// 
//                         if (tempLoc.LastIndexOf("\\") == tempLoc.Length - 1)
//                         {
//                             strNewFile = tempLoc + dbItemName.ToString() + "_" + dbItemMD5.ToString() + "." + dbItemAttachmentType.ToString();
//                         }
//                         else
//                         {
//                             strNewFile = tempLoc + "\\" + dbItemName.ToString() + "_" + dbItemMD5.ToString() + "." + dbItemAttachmentType.ToString();
//                         }
//                         
//                         FileStream fs = new FileStream(strNewFile, FileMode.OpenOrCreate, FileAccess.Write);
// 
//                         int length = 1048576;
//                         byte[] Buffer = new byte[length];
//                         int i;
//                         while ((i = dbItemAttachLob.Read(Buffer, 0, length)) > 0)
//                         {
//                             fs.Write(Buffer, 0, i);
//                         }
// 
//                         fs.Close();
// 
//                         // sel.InsertFile(strNewFile); // not support non-text insertion
//                         insertDocIntoCurDoc(strNewFile);
//                     }
// 
//                     transaction.Commit();
//                     
//                 }
//                 catch (System.Exception ex)
//                 {
//                     MessageBox.Show(ex.Message);
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
// 
//             }//using

            return;            
        }

        /// <summary>
        /// 插入文档到当前文档当前位置
        /// </summary>
        /// <param name="strFileName"></param>
        private void insertDocIntoCurDoc(String strFileName)
        {
//             String strFileType = "";
//             int nStart = strFileName.LastIndexOf('.');
//             strFileType = strFileName.Substring(nStart + 1);
// 
//             if (!strFileType.ToLower().Equals("doc") && !strFileType.ToLower().Equals("docx"))
//             {
//                 MessageBox.Show("不支持的文件类型");
//                 return;
//             }

            Word.Application app = m_addin.Application;

            // how to copy to currrent active document?
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            //Word.Range oldRange = sel.Range;
            int nOStart = sel.Start; // 当前位置
            int nOEnd = sel.Start;  // 当前位置

//            Word.Bookmarks bks = curDoc.Bookmarks;
//             String strBkmkName = "bkmk" + DateTime.Now.ToString("yyyyMMddhhmmssff");
//             Word.Range rng = sel.Range;
//             Word.Bookmark posBkmk = bks.Add(strBkmkName);

            //Word.Style oldStyle = oldRange.Paragraphs.get_Style();
            String strTmpFile = CopyTmpDocFile(strFileName);

            if (strTmpFile == null || !File.Exists(strTmpFile))
            {
                MessageBox.Show("使用此文件的临时文件出错，请检查是否磁盘是否不足");
                return;
            }

            // Object objFileName = strFileName;
            Object objFileName = strTmpFile;
            Object objConvert = true;
            Object objReadonly = true;

            Word.Range firstPos = sel.Range.Characters.First.Previous();
            Word.Range lastPos  = sel.Range.Characters.Last.Next();
            
            curDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdOutlineView; // 大纲视图

            //sel.Paragraphs.OutlineDemoteToBody();
            //sel.InsertParagraphAfter();
            sel.Paragraphs.OutlineDemoteToBody(); // 保证正文
            // 加入文件
            Word.Subdocument subDoc = sel.Range.Subdocuments.AddFromFile(ref objFileName, ref objConvert, ref objReadonly);
            sel.MoveUp();
            sel.Range.Subdocuments.Delete(); // 删除
            curDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView; // 恢复视图

            if (subDoc != null)
            {
                subDoc.Delete(); // 删除关联
            }

            // remove the break symbol

            // goto the previous character before delete
            // 
            if (firstPos != null)
            {
                firstPos.Select();
                sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd); // 移动位置
                sel.MoveLeft(); // 移动
            }
            else
            {
                Word.WdUnits pos = Word.WdUnits.wdStory;
                sel.HomeKey(pos); // 移到前端
            }

            sel.Find.ClearFormatting();

            Object FindText = "^b"; // 查找
            Object MatchCase = Type.Missing;
            Object MatchWholeWord = Type.Missing;
            Object MatchWildcards = Type.Missing;
            Object MatchSoundsLike = Type.Missing;
            Object MatchAllWordForms = Type.Missing;
            Object Forward = true;
            Object Wrap = false;
            Object Format = false;
            Object ReplaceWith = "";
            Object Replace = true;

            Object MatchKashida = Type.Missing;
            Object MatchDiacritics = Type.Missing;
            Object MatchAlefHamza = Type.Missing;
            Object MatchControl = Type.Missing;
            Object MatchPrefix = Type.Missing;
            Object MatchSuffix = Type.Missing;
            Object MatchPhrase = Type.Missing;
            Object IgnoreSpace = Type.Missing;
            Object IgnorePunct = Type.Missing;

            // 
            // 查找
            sel.Find.Execute2007(ref FindText, ref MatchCase, ref MatchWholeWord, ref MatchWildcards, 
                                 ref MatchSoundsLike, ref MatchAllWordForms, ref Forward, 
                                 ref Wrap, ref Format, ref ReplaceWith, ref Replace,
                                 ref MatchKashida, ref MatchDiacritics, ref MatchAlefHamza, 
                                 ref MatchControl, ref MatchPrefix, ref MatchSuffix,
                                 ref MatchPhrase, ref IgnoreSpace, ref IgnorePunct );
            
            // goto subdoc last 

            if (lastPos != null)
            {
                lastPos.Select();
                sel.Collapse(Word.WdCollapseDirection.wdCollapseStart); // 移动位置
            }
            else
            {
                Word.WdUnits pos = Word.WdUnits.wdStory;
                sel.EndKey(pos); // 未页
            }

            sel.Find.ClearFormatting();
            Forward = false;
            // 查找
            sel.Find.Execute2007(ref FindText, ref MatchCase, ref MatchWholeWord, ref MatchWildcards,
                                 ref MatchSoundsLike, ref MatchAllWordForms, ref Forward,
                                 ref Wrap, ref Format, ref ReplaceWith, ref Replace,
                                 ref MatchKashida, ref MatchDiacritics, ref MatchAlefHamza,
                                 ref MatchControl, ref MatchPrefix, ref MatchSuffix,
                                 ref MatchPhrase, ref IgnoreSpace, ref IgnorePunct);
            
            //oldRange.Paragraphs.set_Style(oldStyle);//@TODO, maybe error

            // return
            //Object miss = Type.Missing;
            //sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, posBkmk.Name);

            sel.Start = nOStart; // 恢复
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo(); // 跳转
            curDoc.ActiveWindow.ScrollIntoView(sel.Range); // 恢复视角到初始状态
            
            //curDoc.ActiveWindow.ScrollIntoView(posBkmk.Range);
            //posBkmk.Delete(); 

            return;
        }


        Word.Paragraph FindPrevSameLevelPara(Word.Paragraph para)
        {
            Word.Paragraph prevPara = para.Previous(); // 查找前一同级段落

            while (prevPara != null && prevPara.OutlineLevel != para.OutlineLevel) // 判断
            {
                prevPara = prevPara.Previous(); // 前移
            }

            return prevPara;
        }


        private void btnTest_Click(object sender, System.EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection; // 测试使用
            
            // auto numbering with paras above
            // 
            //Word.WdListApplyTo wApply = Word.WdListApplyTo.wdListApplyToWholeList;
            //Word.ListTemplate oTemp= m_addin.Application.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery].ListTemplates[1];
            //sel.Range.ListFormat.ApplyListTemplateWithLevel(oTemp, true, wApply);

            Word.Paragraph curPara = sel.Paragraphs[1]; // 测试使用

            if (curPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText) // 测试使用
            {
                MessageBox.Show("请先设置段落级别"); // 测试使用
                return;
            }

            Word.Paragraph prevPara = FindPrevSameLevelPara(curPara); // 测试使用

            if (prevPara != null)
            {
                Word.ListTemplate prevListTemplate = prevPara.Range.ListFormat.ListTemplate; // 测试使用
                if (prevListTemplate != null)
                {
                    curPara.Range.ListFormat.ApplyListTemplate(prevListTemplate); // 测试使用

                    prevPara.Range.Select(); // 测试使用
                    sel.CopyFormat(); // 测试使用
                    curPara.Range.Select(); // 测试使用
                    sel.PasteFormat(); // 测试使用
                }
                else
                {
                    MessageBox.Show("前一个同级段落未定义编号，请建立其编号以便本段落进行复制");
                }

            }
            else
            {
                MessageBox.Show("无前同级段落定义编号可以复制，本段落是本级首段落，请建立编号");
            }

            // find previous the same level paragraph
            // get that list template 
            // and apply to current selected paragraph
            // 
        }

        private void btnShareExternalFile_Click(object sender, System.EventArgs e)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            
            if (tvShareLib.SelectedNode == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                String strTmpFullPath = tvShareLib.SelectedNode.FullPath;

                if (strTmpFullPath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("本地暂不支持此操作");
                    return;
                }

            }


            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            String SourceLoc = "";
            OpenFileDialog dig = new OpenFileDialog();

            dig.Filter = "(*.docx;*.doc)|*.docx;*.doc|(*.*)|*.*"; // 外部文档
            dig.InitialDirectory = Settings.Default.strFavDir;

            if (dig.ShowDialog() == DialogResult.OK)
            {
                SourceLoc = dig.FileName;

                m_strInitDir = Path.GetDirectoryName(SourceLoc); // 取文件
                Settings.Default.strFavDir = m_strInitDir;
                //Settings.Default.Save();
            }
            else
            {
                return;
            }

//             if (!m_addin.IsWordDocFileFormat(SourceLoc))
//             {
//                 MessageBox.Show("不支持非WORD文档");
//                 return;
//             }

            AddOneShareItem(SourceLoc); // 加入项目
            resetShareSearch(); // 重置查找项目

            return;
        }



        private void reloadShareLib(String dbUrl, String strOwnerId, String strOwnerAccount)
        {
            
//             using (OracleConnection con = new OracleConnection(dbUrl))
//             {
//                 try
//                 {
//                     String block = "SELECT ID,PARENTID,LIBCATEGORY,TYPE,NAME,ITEMCATEGORY,OWNERID,OWNERACCOUNT FROM TBLSHARELIB " +
//                                    "WHERE LIBCATEGORY='公共库' OR (LIBCATEGORY='个人库' AND OWNERID= " + strOwnerId +
//                                    "AND OWNERACCOUNT= '" + strOwnerAccount + "')";
//                     con.Open();
//                     OracleCommand cmd = con.CreateCommand();
//                     cmd.CommandText = block;
//                     //cmd.CommandType = CommandType.Text;
//                     OracleTransaction transaction = cmd.Connection.BeginTransaction();
//                     cmd.Transaction = transaction;
// 
//                     OracleDataReader rder = cmd.ExecuteReader();
// 
//                     System.Collections.Hashtable idTreeNodeHash = new System.Collections.Hashtable();
//                     String strLibCat = "", strId = "", strKey = "";
// 
//                     tvShareLib.Nodes.Clear();
// 
//                     TreeNode commonLibRootNd = new TreeNode("公共库");
//                     strKey = "公共库_" + "分类节点_" + "";
//                     commonLibRootNd.Tag = strKey;
//                     commonLibRootNd.Name = "公共库";
// 
//                     TreeNode privLibRootNd = new TreeNode("个人库");
//                     strKey = "个人库_" + "分类节点_" + "";
//                     privLibRootNd.Tag = strKey;
//                     privLibRootNd.Name = "个人库";
// 
//                     tvShareLib.Nodes.Add(commonLibRootNd);
//                     tvShareLib.Nodes.Add(privLibRootNd);
// 
//                     while (rder.Read())
//                     {
//                         OracleDecimal dbId = rder.GetDecimal(0);
//                         OracleDecimal dbParentId = rder.GetDecimal(1);
// 
//                         OracleString dbLibCategory = rder.GetOracleString(2);
//                         OracleString dbType = rder.GetOracleString(3);
//                         OracleString dbItemName = rder.GetOracleString(4);
//                         OracleString dbItemCategory = rder.GetOracleString(5);
// 
//                         OracleDecimal dbOwnerId = rder.GetDecimal(6);
//                         OracleString dbOwnerAccount = rder.GetOracleString(7);
// 
//                         strKey = dbLibCategory.ToString() + "_" + dbItemCategory.ToString() + "_" + dbId.ToString();
//                         TreeNode newNd = new TreeNode(dbItemName.ToString());
//                         newNd.Tag = strKey;
//                         idTreeNodeHash.Add(strKey, newNd);
//                     }
//                     
//                     System.Collections.IDictionaryEnumerator enumRator = idTreeNodeHash.GetEnumerator();
//                     while (enumRator.MoveNext())
//                     {
//                         TreeNode nd = (TreeNode)enumRator.Current;
//                         // build relation between parent and children
//                         // 
//                         strKey = (String)nd.Tag;
//                         String []strArr = strKey.Split('_');
// 
//                         strId = strArr[2];
//                         strLibCat = strArr[0];
// 
//                         if (strId == null || strId.Equals(""))
//                         {
//                             if(strLibCat.Equals("公共库"))
//                             {
//                                 commonLibRootNd.Nodes.Add(nd);
//                             }
//                             else if(strLibCat.Equals("个人库"))
//                             {
//                                 privLibRootNd.Nodes.Add(nd);
//                             }
//                             else 
//                             {
//                                 // 
//                             }
//                         }
//                         else
//                         {
//                             // search 
//                             TreeNode parentNd = (TreeNode)idTreeNodeHash[strKey];
//                             if (parentNd != null)
//                             {
//                                 parentNd.Nodes.Add(nd);
//                             }
//                         }
// 
//                     }
//                     
//                     tvShareLib.Nodes.Add(commonLibRootNd);
//                     tvShareLib.Nodes.Add(privLibRootNd);
// 
//                     rder.Close();
//                     transaction.Commit();
// 
//                 }
//                 catch (System.Exception ex)
//                 {
//                     MessageBox.Show(ex.Message);
//                 }
//                 finally
//                 {
//                     con.Close();
//                 }
// 
//             }//using
        }

        /// <summary>
        /// 刷新本地文件夹在UI上的节点显示
        /// </summary>
        public void  refreshMyComputerFolders()
        {
            TreeNode[] myComputerRootNode = tvShareLib.Nodes.Find("我的电脑", false);

            // must exist
            TreeNode nd = myComputerRootNode[0];
            nd.ImageIndex = nd.SelectedImageIndex = 20; // icon index
            nd.Nodes.Clear();
            // add "my computer" folders
            ListDrivers(ref nd); // 显示驱动器

            resetShareSearch(); // 重置共享查找

            return;
        }


        public void btnShareRefresh_Click(object sender, System.EventArgs e)
        {
//             String dbUrl = "User Id=standardDoc;Password=standardDoc123;Data Source=ORCL214";
//             String ownerId = ""; //@TODO,get current login account id
//             String ownerAccount = "lidong"; //@TODO, get current login account id
// 
//             reloadShareLib(dbUrl, ownerId, ownerAccount);
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode[] commonNd = tvShareLib.Nodes.Find("公共库",false);
            TreeNode[] privNd = tvShareLib.Nodes.Find("个人库",false);
            

            if (m_addin.m_bLoginedStatus)
            {
                //MessageBox.Show("请先登录");
                //return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

                if (commonNd != null && commonNd.GetLength(0) > 0 &&
                    privNd != null && privNd.GetLength(0) > 0)
                {
                    commonNd[0].Nodes.Clear(); // 清空
                    privNd[0].Nodes.Clear(); // 清空
                    m_addin.m_hashFilePermission.Clear();


                    ShareContributorOper.TypeNode ndTag = null;
                    String strObjId = "";
                    String strObjType = "";

                    TreeNode privLibNode = new TreeNode();
                    TreeNode tmpNode = new TreeNode();

                    TreeNode dataNode = m_scOper.getNodes(m_addin.m_strLoginedUser, "", "", "", ref privLibNode, ref m_addin.m_hashFilePermission); // 获取节点

                    if (dataNode != null)
                    {
                        foreach (TreeNode newNd in dataNode.Nodes) // 遍历
                        {
                            ndTag = (ShareContributorOper.TypeNode)newNd.Tag;

                            if (ndTag.isLeaf != 1)
                            {
                                TreeNode tmp2Node = new TreeNode();
                                tmp2Node.Tag = ndTag;

                                newNd.Nodes.Add(tmp2Node);
                            }

                            /*
                            strObjId = ndTag.id;
                            strObjType = ndTag.type;

                            TreeNode childNode = m_scOper.getNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref tmpNode, ref m_addin.m_hashFilePermission); // 获取节点

                            if (childNode != null)
                            {
                                foreach (TreeNode childNd in childNode.Nodes)
                                {
                                    newNd.Nodes.Add(childNd);
                                }
                            }
                            */

                            commonNd[0].Nodes.Add(newNd); // 添加
                        }
                    }


                    //TreeNode privChildNode = new TreeNode();

//                     if (privLibNode.Nodes.Count == 1)
//                     {
//                         TreeNode privNode = privLibNode.Nodes[0];
//                         ndTag = (ShareContributorOper.TypeNode)privNode.Tag;
// 
//                         privNd[0].Tag = ndTag;
// 
//                         strObjId = ndTag.id;
//                         strObjType = ndTag.type;
// 
//                         TreeNode tmp2Node = m_scOper.getNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref privChildNode, ref m_addin.m_hashFilePermission); // 获取节点
//                     }

                    //TreeNode tmp3Node = new TreeNode();

                    foreach (TreeNode newNd in privLibNode.Nodes) // 遍历
                    {
                        ndTag = (ShareContributorOper.TypeNode)newNd.Tag;

                        if (ndTag.isLeaf != 1)
                        {
                            TreeNode tmp2Node = new TreeNode();
                            tmp2Node.Tag = ndTag;

                            newNd.Nodes.Add(tmp2Node);
                        }

                        /*
                        strObjId = ndTag.id;
                        strObjType = ndTag.type;

                        TreeNode trNd = new TreeNode();

                        TreeNode childNode = m_scOper.getNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref trNd, ref m_addin.m_hashFilePermission); // 获取节点

                        foreach (TreeNode childNd in trNd.Nodes)
                        {
                            newNd.Nodes.Add(childNd);
                        }
                        */

                        privNd[0].Nodes.Add(newNd);

//                         foreach (TreeNode n3rdNd in newNd.Nodes) // 遍历
//                         {
//                             privNd[0].Nodes.Add(n3rdNd); // 添加
//                         }
                    }
                }
            }

            resetShareSearch(); // 重置查找

            if (tvShareLib.Nodes.Count > 0)
            {
                m_addin.ReSyncRefreshShareLibTree(doc, tvShareLib.Nodes); // 刷新树节点
            }

            return;
        }



        private void btnShareExpand_Click(object sender, System.EventArgs e)
        {
            TreeNode selNode = tvShareLib.SelectedNode;

            if (selNode != null)
            {
                selNode.Collapse(true); // 折叠
            }

            return;
        }

        private void btnShareCollapse_Click(object sender, System.EventArgs e)
        {
            TreeNode selNode = tvShareLib.SelectedNode;

            DialogResult res = MessageBox.Show("确定要展开此节点下所有子节点？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            if (selNode != null)
            {
                selNode.ExpandAll(); // 扩展树
            }

            selNode.EnsureVisible(); // 使可见

            return;
        }

        private int m_shareSearchIndex = -1;
        private System.Collections.ArrayList m_shareFoundNodes = new System.Collections.ArrayList();

        private void resetShareSearch() // 重置查找
        {
            m_shareSearchIndex = -1; // 初始化

            TreeNode nd;
            for (int i = 0; i < m_shareFoundNodes.Count; i++) // 遍历
            {
                nd = (TreeNode)m_shareFoundNodes[i];
                nd.ForeColor = Color.Black; // 颜色重置
            }
            m_shareFoundNodes.Clear(); // 清空

            // 
            btnShareSearch.Visible = true; // 重置可见
            btnSharePrevSearch.Visible = false;
            btnShareNextSearch.Visible = false;

            return;
        }

        /// <summary>
        /// 查找子节点
        /// </summary>
        /// <param name="nd"></param>
        /// <param name="strKeyWord"></param>
        /// <param name="bAccurateMatch"></param>
        /// <param name="foundResultArrList"></param>
        private void shareSearchChildren(TreeNode nd, String strKeyWord, Boolean bAccurateMatch,
                                         ref System.Collections.ArrayList foundResultArrList )
        {
            foreach (TreeNode childNd in nd.Nodes) // 遍历
            {
                if (bAccurateMatch) 
                {
                    if (childNd.Text.Equals(strKeyWord)) // 完全相等
                    {
                        foundResultArrList.Add(childNd); // 加入记录
                    }
                }
                else
                {
                    if (childNd.Text.IndexOf(strKeyWord) != -1) // 模糊匹配
                    {
                        foundResultArrList.Add(childNd); // 加入记录
                    }
                }
                // 递归查找
                shareSearchChildren(childNd, strKeyWord, bAccurateMatch, ref foundResultArrList);
            }

            return;
        }

        private void shareSearch()
        {
            String strKeyWord = txtShareKeyWord.Text.Trim();

            if (strKeyWord.Equals(""))
            {
                MessageBox.Show("请输入查找关键词");
                txtShareKeyWord.Focus();
                return;
            }

            TreeNode selNode = tvShareLib.SelectedNode;

            if (selNode != null)
            {
                String strSelNodePath = selNode.FullPath;

                if (strSelNodePath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("不支持对本地资源查找", "不支持");
                    return;
                }

                DialogResult res = MessageBox.Show("确定要查找此节点下所有子节点？", "确认", MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    return;
                }

                foreach (TreeNode nd in selNode.Nodes) // 遍历
                {
                    shareSearchChildren(nd, strKeyWord, false, ref m_shareFoundNodes); // 查找子节点
                }
            }
            else
            {
                foreach (TreeNode nd in tvShareLib.Nodes) // 遍历
                {
                    if (nd.FullPath.StartsWith("我的电脑"))
                    {
                        continue;
                    }

                    shareSearchChildren(nd, strKeyWord, false, ref m_shareFoundNodes); // 查找子节点
                }

            }


            if (m_shareFoundNodes.Count > 0)
            {
                TreeNode nd = getNextShareSearchResult(true); // 查找下一个
                nd.ForeColor = Color.Red; // 显著颜色
                tvShareLib.SelectedNode = nd; // 设置当前节点

                btnShareSearch.Visible = false;
                btnSharePrevSearch.Visible = true;
                btnShareNextSearch.Visible = true;
            }
        }

        private void btnShareSearch_Click(object sender, System.EventArgs e)
        {
            shareSearch();// 查找
        }

        private void btnShareSearchReset_Click(object sender, System.EventArgs e)
        {
            txtShareKeyWord.Text = "";
            resetShareSearch(); // 重置查找
        }


        private TreeNode getNextShareSearchResult(Boolean bDirection)
        {
           if (bDirection) // next
           {
               m_shareSearchIndex++; // 向下
               if (m_shareSearchIndex >= m_shareFoundNodes.Count) // wrap
                   m_shareSearchIndex = 0;
           }
           else
           {
               m_shareSearchIndex--; // 向后
               if (m_shareSearchIndex < 0)
                   m_shareSearchIndex = m_shareFoundNodes.Count - 1; // wrap
           }

           TreeNode nd = (TreeNode)m_shareFoundNodes[m_shareSearchIndex]; // 取匹配查找的结果
           return nd;
        }

        private void btnShareNextSearch_Click(object sender, System.EventArgs e)
        {
            TreeNode nd = getNextShareSearchResult(true); // 取下一个查找结果
            nd.ForeColor = Color.Red; // 显著标记
            tvShareLib.SelectedNode = nd; // 设置为当前节点
        }

        private void btnSharePrevSearch_Click(object sender, System.EventArgs e)
        {
            TreeNode nd = getNextShareSearchResult(false); // 取下一个查找结果
            nd.ForeColor = Color.Red; // 显著标记
            tvShareLib.SelectedNode = nd; // 设置为当前节点
        }

        private void btnTestProperty_Click(object sender, System.EventArgs e)
        {
            Word.Application app = m_addin.Application; // 测试使用
            //app.CommandBars["TabDeveloper"].Controls["ControlProperties"].Execute();

            Microsoft.Office.Core.CommandBar devBar = app.CommandBars["Control Toolbox"];// 测试使用
            Microsoft.Office.Core.CommandBarControl cbc = devBar.Controls["属性​​(&I)"];// 测试使用

            if (cbc != null)// 测试使用
            {
                cbc.Execute();// 测试使用
            }


//             //Create a new txt file to record controls' list
//             StreamWriter sw = System.IO.File.CreateText(@"C:\wbb2.txt");
// 
//             //loop through wordApp.CommandBars to get all CommandBars
//             //foreach (Microsoft.Office.Core.CommandBar cb in app.CommandBars)
//             Microsoft.Office.Core.CommandBar cb = app.CommandBars["Ribbon"];
//             {
//                 sw.WriteLine(cb.Name);
//                 //loop through each CommandBar's Controls collection to get all controls
//                 foreach (Microsoft.Office.Core.CommandBarControl cbc in cb.Controls)
//                 {
//                     sw.WriteLine("\t" + cbc.Caption + "," + cbc.accName);
//                 }
//             }
//             sw.Flush();
//             sw.Close();

        }

        private void btnTestUpgrade_Click(object sender, System.EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;// 测试使用

            sel.Paragraphs.OutlinePromote();// 测试使用

            /*
            foreach(Word.Paragraph para in sel.Paragraphs)
            {
                if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevel1)
                {
                    continue;
                }

                para.OutlineLevel--;

            }
            */

        }

        private void btnTestDowngrade_Click(object sender, System.EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;// 测试使用

            sel.Paragraphs.OutlineDemote();// 测试使用

            /*
            foreach (Word.Paragraph para in sel.Paragraphs)
            {
                if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                {
                    continue;
                }

                para.OutlineLevel++;

            }*/
            
        }

        private void orgNodePromote()
        {
            TreeNode nd = m_tvOrganize.SelectedNode;
            if (nd == null || nd.Tag == null)
            {
                return;
            }

            Word.Paragraph para = (Word.Paragraph)nd.Tag;
            if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevel1) // 顶级大纲级别
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode rootNode = (TreeNode)m_hashOrgTreeNodes["章节"]; // 章节节点

            TreeNode[] fndNodes = rootNode.Nodes.Find(nd.Name, true); // 查找名称
            if (fndNodes.GetLength(0) == 0)
            {
                return;
            }

            para.Range.Select(); // 选中此段落
            curDoc.ActiveWindow.Selection.Paragraphs.OutlinePromote(); // 上升一级

            nd.ImageIndex = nd.SelectedImageIndex = (int)para.OutlineLevel; // ICON INDEX

            TreeNode parentNode = nd.Parent; // 父节点
            TreeNode gradeFatherNode = nd.Parent.Parent; // 父父节点

            if (parentNode == rootNode)
            {
                return;
            }

            parentNode.Nodes.Remove(nd); // 删除
            gradeFatherNode.Nodes.Add(nd); // 增加
            m_tvOrganize.Refresh(); // 刷新
            nd.EnsureVisible(); // 保证可见
            m_tvOrganize.SelectedNode = nd; // 设置为当前节点
            return;
        }

        private void btnOrgPromote_Click(object sender, System.EventArgs e)
        {
            orgNodePromote(); // 节点升级
        }

        private void orgNodeDemote()
        {
            TreeNode nd = m_tvOrganize.SelectedNode;
            if (nd == null || nd.Tag == null)
            {
                return;
            }

            Word.Paragraph para = (Word.Paragraph)nd.Tag;
            if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText) // lowest node level
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            TreeNode rootNode = (TreeNode)m_hashOrgTreeNodes["章节"];

            TreeNode[] fndNodes = rootNode.Nodes.Find(nd.Name, true);
            if (fndNodes.GetLength(0) == 0)
            {
                return;
            }

            para.Range.Select(); // 选中
            curDoc.ActiveWindow.Selection.Paragraphs.OutlineDemote(); // 降级
            nd.ImageIndex = nd.SelectedImageIndex = (int)para.OutlineLevel;

            // 
            TreeNode parentNode = nd.Parent;
            TreeNode previousNode = nd.PrevNode;

            if (previousNode == null)
            {
                return;
            }

            parentNode.Nodes.Remove(nd); // 父节点删除此节点
            previousNode.Nodes.Add(nd); // 前节点加此节点

            m_tvOrganize.Refresh(); // 刷新
            nd.EnsureVisible(); // 使可见
            m_tvOrganize.SelectedNode = nd; // 使成当前节点
            return;
        }

        private void btnOrgDemote_Click(object sender, System.EventArgs e)
        {
            orgNodeDemote(); // 节点降级
        }

        private void chkOrgShowBody_CheckedChanged(object sender, System.EventArgs e)
        {
            OrgProgressBar.Left = txtOrganKeyWord.Left; // 设置进度条位置
            OrgProgressBar.Top = txtOrganKeyWord.Top; // 设置进度条位置
            OrgProgressBar.Width = txtOrganKeyWord.Width; // 设置进度条位置
            OrgProgressBar.Height = txtOrganKeyWord.Height; // 设置进度条位置
            OrgProgressBar.Visible = true; // 设置进度条可见
            OrgProgressBar.Value = 0;  // 设置进度条初始值
            OrgProgressBar.Maximum = 0;  // 设置进度条初始值

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            OrgProgressBar.Maximum += curDoc.Paragraphs.Count;

            buildChapterTree(chkOrgShowBody.Checked); // 建立节点树

            OrgProgressBar.Visible = false;
            OrgProgressBar.Value = 0;

        }

        private void btnTestSelSave2File_Click(object sender, System.EventArgs e)
        {

        }


        public static string HttpDownloadFile(string url, string path)
        {
            // 设置参数
            HttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;

            //发送请求并获取相应回应数据
            HttpWebResponse response = request.GetResponse() as HttpWebResponse;
            //直到request.GetResponse()程序才开始向目标网页发送Post请求
            Stream responseStream = response.GetResponseStream();

            //创建本地文件写入流
            Stream stream = new FileStream(path, FileMode.Create);

            byte[] bArr = new byte[1024];
            int size = responseStream.Read(bArr, 0, (int)bArr.Length); // 读取数据
            while (size > 0)
            {
                stream.Write(bArr, 0, size); // 写入数据
                size = responseStream.Read(bArr, 0, (int)bArr.Length); // 读取下一块数据
            }
            stream.Close(); // 流关闭
            responseStream.Close(); // 流关闭
            return path;
        }


        private void btnShareDownload_Click(object sender, EventArgs e)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }


            if (tvShareLib.SelectedNode == null)
            {
                MessageBox.Show("请选择一个节点");
                return;
            }
            else
            {
                String strTmpFullPath = tvShareLib.SelectedNode.FullPath;

                if (strTmpFullPath.StartsWith("我的电脑"))
                {
                    MessageBox.Show("本地操作无需下载，可直接操作");
                    return;
                }
            }


            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }


            TreeNode selNode = tvShareLib.SelectedNode;

            ShareContributorOper.TypeNode ndTag = null, parentNdTag = null;

            ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

            // String strTag = (String)selNode.Tag;
            String strType = null;

            if (ndTag != null)
            {
                strType = ndTag.type;
            }

//             if (strTag != null)
//             {
//                 strType = strTag.Substring(0, 1);
//             }

            if (strType == null || strType.Equals("1") || strType.Equals("2"))
            {
                MessageBox.Show("请选择文件节点");
                return;
            }

            // select loc dir
            String strLocFileUrl = "";
            FolderBrowserDialog fbd = new FolderBrowserDialog();

            if (!m_strLocalPath.Equals(""))
            {
                fbd.SelectedPath = m_strLocalPath; // 初始值
            }

            if (fbd.ShowDialog() == DialogResult.OK)
            {
                strLocFileUrl = fbd.SelectedPath;  // 初始值
                m_strLocalPath = fbd.SelectedPath; // 初始值
            }
            else
            {
                return;
            }

            TreeNode parentNd = selNode.Parent;
            String strParentNdId = "";

            if (parentNd != null && parentNd.Tag != null)
            {
                parentNdTag = (ShareContributorOper.TypeNode)parentNd.Tag;
                strParentNdId = parentNdTag.id;

                // String strItem = (String)parentNd.Tag;
                // strParentNdId = strItem.Substring(1); // 取父节点ND
            }
            
            String strSelNodePath = selNode.FullPath;

            if (strSelNodePath.StartsWith("个人库"))
            {

            }
            else // 公共库
            {
                String strCurNdType = "", strCurNdId = "";

                if (ndTag != null)
                {
                    strCurNdType = ndTag.type;// strTag.Substring(0, 1);
                    strCurNdId = ndTag.id; // strTag.Substring(1);
                }

                if (m_addin.m_hashFilePermission.Contains(strCurNdId)) // 权限检查
                {
                    int[] values = null;

                    values = (int[])m_addin.m_hashFilePermission[strCurNdId];

                    if(strType.Equals("1") || strType.Equals("2")) // folder 
                    {
                        // 
                        
                    }
                    else // if(strType.Equals("$")) // file 
                    {
                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFilePermission.fpDownload] == 0 ||
                            values[(int)ThisAddIn.DocRepositoryFilePermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户无权限下载此文件");
                            return;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("当前用户无权限下载此文件");
                    return;
                }
            }

            String strFileId = ndTag.id;// strTag.Substring(1);

            int nRet = 0;
            nRet = m_scOper.downloadFile(m_addin.m_strLoginedUser, strFileId, ref strLocFileUrl); // 下载

            if (nRet == 0)
            {
                MessageBox.Show("下载成功");
            }
            else
            {
                MessageBox.Show("下载失败");
            }

            return;
        }



        private void dataProduce(int nCnt = -1)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            String strSpecTag = @"@@table";

            // get range text of special text
            Word.ContentControls cnts = curDoc.SelectContentControlsByTag(strSpecTag); // 选择控件s
            Word.ContentControl tblCnt = null;

            if (cnts.Count == 0)
            {
                MessageBox.Show("没有指定的内容控件");
                return;
            }
            else if (cnts.Count == 1)
            {
                // 
                tblCnt = cnts[1];
            }
            else
            {
                MessageBox.Show("太多同类内容控件，请只保留一个");
                return;
            }

            // read dataset and repeat fill data
            // 
            ArrayList arrColNameArr = new ArrayList();

            String strPlacerHolderText = "";
            foreach (Word.ContentControl cnt in tblCnt.Range.ContentControls) // 遍历
            {
                strPlacerHolderText = cnt.PlaceholderText.Value;

                if (strPlacerHolderText != null && strPlacerHolderText.StartsWith("@@")) // 特征字
                {
                    String strName = strPlacerHolderText.Substring(2); // 取值
                    arrColNameArr.Add(strName); // 加入列
                }

            }

            // repeat
            //
            // copy ori content control's text into another to prepare copy
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (arrColNameArr.Count > 0)
            {

                Object objUnit = Word.WdUnits.wdStory;
                Object objMv = Word.WdMovementType.wdMove;
                sel.EndKey(objUnit, objMv); // 移动到最后

                // add separator line
                // 
                sel.InsertParagraphAfter(); // 插入段落

                String strDash = "------------------"; 
                DateTime dtTime = DateTime.Now;
                sel.InsertAfter(strDash + dtTime.ToLocalTime().ToString() + strDash); // 插入标识

                sel.InsertParagraphAfter(); // 插入段落

                // return;


                Word.ContentControl childCnt = null;
                String strValue = "";
                int i = 0;

                Hashtable hashChildCnt = new Hashtable();

                foreach (DataTable dt in m_dataDS.Tables) // 遍历数据库
                {
                    foreach (DataRow dr in dt.Rows) // 遍历数据行
                    {
                        i++;
                        // copy ori content control's text into another to prepare copy
                        tblCnt.Range.Select(); // 选择
                        sel.Copy(); // 复制
                        Word.WdUnits pos = Word.WdUnits.wdStory;
                        sel.EndKey(pos); // 移动

                        Word.ContentControl repeatCnt = curDoc.ContentControls.Add();// 增加一项
                        repeatCnt.Tag = strSpecTag + i; // tag命名
                        repeatCnt.Range.Select(); // 选择
                        sel.Paste(); // 粘贴

                        hashChildCnt.Clear(); // 清除

                        strPlacerHolderText = "";
                        foreach (Word.ContentControl cnt in repeatCnt.Range.ContentControls) // 遍历
                        {
                            strPlacerHolderText = cnt.PlaceholderText.Value;

                            if (strPlacerHolderText != null && strPlacerHolderText.StartsWith("@@")) // 特征词
                            {
                                String strName = strPlacerHolderText.Substring(2); // 取值
                                hashChildCnt.Add(strName, cnt); // 加值
                            }

                        }

                        foreach (String strName in arrColNameArr) // 遍历
                        {
                            strValue = dr[strName].ToString(); // 取行值

                            if (m_hashRowCombine.Contains(strName)) 
                            {
                                if (strValue.Trim().Equals(""))
                                {
                                    strValue = (String)m_hashRowCombine[strName]; // 取行值
                                }
                                else
                                {
                                    m_hashRowCombine[strName] = strValue; // 取行值
                                }
                            }

                            // replace content control
                            childCnt = (Word.ContentControl)hashChildCnt[strName];
                            childCnt.Range.Text = strValue; // 赋新值
                            // remove content control and keep content of it
                            // childCnt.Delete(false);
                        }

                        foreach (Word.ContentControl cnt in repeatCnt.Range.ContentControls)// 遍历
                        {
                            cnt.Delete(false); // 删除原控件但保留内容
                        }

                        repeatCnt.Delete(false); // 删除总控件


                        if (nCnt != -1 && i == nCnt) // 计数
                        {
                            break;
                        }

                    }

                }//
            }

            return;
        }

        private void btnTestTable_Click(object sender, EventArgs e)
        {
            dataProduce();// 数据产生
        }

        private class TreeCompareItem // 树型比较结构
        {
            public String strPath;   // 路径
            public String strContent;// 内容
            public int nOutline; // 级别
            public int nOrder; // 序号
            public TreeNode nd; // TreeNode节点
        }

        /// <summary>
        /// 建立纯路径队列
        /// </summary>
        /// <param name="tree"></param>
        /// <param name="stack"></param>
        /// <param name="pathArr"></param>
        /// <param name="nOrder"></param>
        private void buildPlainPathArray(TreeNode tree,ref Stack stack, ref ArrayList pathArr, ref int nOrder)
        {
            int nOutline = tree.ImageIndex;

            stack.Push(tree.Text); // 入栈

            String strFullPath = tree.Text;
//             foreach (String str in stack)
//             {
//                 strFullPath += "/" + str;
//             }

            TreeCompareItem item = new TreeCompareItem(); // 新建对比节点
            item.strPath = strFullPath; // 赋值
            item.strContent = tree.Text; // 赋值
            item.nOutline = nOutline; // 赋值
            item.nOrder = nOrder++; // 赋值
            item.nd = tree; // 赋值

            pathArr.Add(item); // 加入队列

            foreach (TreeNode childNd in tree.Nodes) // 遍历
            {
                buildPlainPathArray(childNd,ref stack, ref pathArr, ref nOrder); // 递归
            }

            stack.Pop(); // 出栈

            return;
        }

        /// <summary>
        /// 建立纯路径hashtable
        /// </summary>
        /// <param name="tree"></param>
        /// <param name="stack"></param>
        /// <param name="pathHash"></param>
        /// <param name="nOrder"></param>
        private void buildPlainPathHash(TreeNode tree, ref Stack stack, ref Hashtable pathHash, ref int nOrder)
        {
            int nOutline = tree.ImageIndex;

            stack.Push(tree.Text); // 入栈

            String strFullPath = tree.Text;
//             foreach (String str in stack)
//             {
//                 strFullPath += "/" + str;
//             }

            TreeCompareItem item = new TreeCompareItem(); // 新建对比节点
            item.strPath = strFullPath; // 赋值
            item.strContent = tree.Text; // 赋值
            item.nOutline = nOutline; // 赋值
            item.nOrder = nOrder++; // 赋值
            item.nd = tree; // 赋值

            pathHash.Add(item.strPath, item); // 入hash表

            foreach (TreeNode childNd in tree.Nodes) // 遍历
            {
                buildPlainPathHash(childNd, ref stack, ref pathHash, ref nOrder); // 递归
            }

            stack.Pop(); // 出栈

            return;
        }

        //@TODO, 2016-06-29，由getcrossreference得到的章节结构是带章节编号的，
        // 这和原方式（从章节段落中取，则无章节编号)则不同。比较的时候，不应该带编号，
        // 而编号是不一定有规律的，如有的写第一部分，有的是1.1
        // 除非可以根据text的章节name定位到章节段落取相应的text，正确的区分出编号和正文，才是彻底的解决办法
        // 否则前导编号必定存在误提取
        private int Compare2StandardTree(TreeNode tree1, TreeNode standardTree,
                                         Boolean bStrictContent,Boolean bStrictOrder,
                                         ref ArrayList contentArrRetMsg,
                                         ref ArrayList orderArrRetMsg,
                                         ref ArrayList nodeArr)
        {
            int nRet = 0;


            Stack stack = new Stack();

            ArrayList standardArr = new ArrayList(); // 新建队列
            int nStandardOrder = 0;
            // 建立纯路径队列
            buildPlainPathArray(standardTree,ref stack, ref standardArr, ref nStandardOrder);
            progBarComp.Value += standardArr.Count;


            Hashtable hash = new Hashtable(); // 新建hash表
            int nOrder = 0;

            stack.Clear(); // 栈清空

            buildPlainPathHash(tree1,ref stack, ref hash, ref nOrder); // 建立纯路径hash表

            progBarComp.Value += hash.Count;

            Boolean bAllContentMatch = true;
            ArrayList tree1Arr = new ArrayList();

            // content comparation
            if(!bStrictContent)
            {
                foreach (TreeCompareItem item in standardArr) // 遍历
                {
                    progBarComp.Value++;
                    if (!hash.Contains(item.strPath)) // 进行查找
                    {
                        contentArrRetMsg.Add("未存在:"+item.strContent); // 加入提示
                        nodeArr.Add(item.nd);
                        bAllContentMatch = false;
                    }
                    else
                    {
                        TreeCompareItem item2 = (TreeCompareItem)hash[item.strPath]; // 找到
                        tree1Arr.Add(item2);
                    }
                }
            }
            else
            {
                foreach (TreeCompareItem item in standardArr) // 遍历
                {
                    progBarComp.Value++;
                    if (!hash.Contains(item.strPath)) // 未存在
                    {
                        contentArrRetMsg.Add("未存在:" + item.strContent);
                        nodeArr.Add(item.nd);
                        bAllContentMatch = false;
                    }
                    else
                    {
                        TreeCompareItem item2 = (TreeCompareItem)hash[item.strPath];

                        if (item.nOutline != item2.nOutline) // 若大纲级别不同
                        {
                            contentArrRetMsg.Add("大纲级别不同:" + item.strContent + ",[1]:" + item.nOutline + ",[2]:" + item2.nOutline);
                            nodeArr.Add(item.nd);
                            nodeArr.Add(item2.nd);
                            bAllContentMatch = false; // 添加到记录
                        }
                        else
                        {
                            tree1Arr.Add(item2); // 添加记录
                        }

                    }
                }                
            }


            // order comparation
            if (bAllContentMatch)
            {
                progBarComp.Maximum += standardArr.Count;
                if (bStrictOrder) // 严格顺序
                {
                    TreeCompareItem preItem = (TreeCompareItem)standardArr[0];
                    TreeCompareItem preItem2 = (TreeCompareItem)tree1Arr[0];

                    int nDiffOrder = 0;
                    progBarComp.Value++;

                    if (preItem2 != null)
                    {
                        nDiffOrder = preItem2.nOrder - preItem.nOrder; // 顺序差
                    }
                    else
                    {
                        orderArrRetMsg.Add("标准无同序对应：" + preItem.strContent);
                        nodeArr.Add(preItem.nd);
                    }

                    for (int i = 1; i < standardArr.Count; i++ )
                    {
                        progBarComp.Value++;

                        TreeCompareItem item = (TreeCompareItem)standardArr[i];
                        TreeCompareItem item2 = (TreeCompareItem)tree1Arr[i];

                        if (item2 != null)
                        {
                            if (item2.nOrder - item.nOrder != nDiffOrder) // 顺序变化
                            {
                                orderArrRetMsg.Add("包括的标准顺序变化：" + item.strContent); // 添加到记录
                                nodeArr.Add(item.nd);
                            }
                        }
                        else
                        {
                            orderArrRetMsg.Add("标准无同序对应：" + item.strContent); // 添加到记录
                            nodeArr.Add(item.nd);
                            break;
                        }

                    }

                }
                else
                {
                    TreeCompareItem preItem = null;

                    if (tree1Arr.Count > 0)
                    {
                        progBarComp.Value++;
                        preItem = (TreeCompareItem)tree1Arr[0]; // 前一项目值
                    }

                    for (int i = 1; i < tree1Arr.Count; i++) // 遍历
                    {
                        progBarComp.Value++;

                        TreeCompareItem item = (TreeCompareItem)tree1Arr[i];

                        if (item.nOrder > preItem.nOrder) // right
                        {

                        }
                        else
                        {
                            orderArrRetMsg.Add("顺序失序："+item.strContent); // 顺序若不对则记录
                            nodeArr.Add(item.nd);
                        }
                        preItem = item;
                    }               
                }
            }

            if (contentArrRetMsg.Count > 0 || orderArrRetMsg.Count > 0) // 错误记录若有一个有值
            {
                nRet = -1;
            }

            return nRet;
        }



        private void btnTestTemp_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            String str = "";

            foreach (Word.ContentControl cnt in curDoc.Content.ContentControls) // 当前文档的所有内容控件
            {
                str = cnt.Title;
                str += "x";
            }

            foreach (Word.Section sec in curDoc.Sections) // 节
            {
                foreach (Word.HeaderFooter hd in sec.Headers) // 页眉
                {
                    foreach (Word.ContentControl cnt in hd.Range.ContentControls) // 区域的内容控件
                    {
                        str = cnt.Title;
                        str += "x";
                    }
                }
                
                foreach(Word.HeaderFooter ft in sec.Footers) // 页脚
                {
                    foreach (Word.ContentControl cnt in ft.Range.ContentControls) // 区域内的内容控件
                    {
                        str = cnt.Title;
                        str += "x";
                    }
                }
            }




            return;
// 
//             // doc.GetCrossReferenceItems(Word.WdReferenceType.wdRefTypeHeading);
// 
//             // doc.StyleSheets
// //             foreach (Word.Style sty in doc.Styles)
// //             {
// //                 txtTest.Text += sty.NameLocal + "\r\n";
// //                 txtTest.Text += sty.Description + "\r\n";
// //             }
//             // Word.WdBuiltinStyle.wdStyleTableOfAuthorities
// 
//             txtTest.Text = "";
//             foreach (Word.Paragraph para in sel.Paragraphs)
//             {
//                 m_testDn = para.get_Style();// sel.Paragraphs.get_Style();
//                 txtTest.Text += m_testDn.NameLocal + "\r\n";
//                 txtTest.Text += m_testDn.Description + "\r\n";
//             }


//             // ApplySrcDocStyle2DstDoc(doc);
//             Word.Document doc = m_addin.Application.ActiveDocument;
//             Word.Selection sel = doc.ActiveWindow.Selection;
// 
//             return;

        }

        private void copyBorders(Word.Borders srcBorders, Word.Borders dstBorders)
        {
            Word.Border srcBd = null, curBd = null;

            for (int i = (int)Word.WdBorderType.wdBorderRight;
                i <= (int)Word.WdBorderType.wdBorderTop; i++) // 遍历
            {
                srcBd = srcBorders[(Word.WdBorderType)i]; // 取源border
                curBd = dstBorders[(Word.WdBorderType)i]; // 目的border

                curBd.ArtStyle = srcBd.ArtStyle; // 赋值
                curBd.ArtWidth = srcBd.ArtWidth; // 赋值
                curBd.Color = srcBd.Color;          // 赋值
                curBd.ColorIndex = srcBd.ColorIndex; // 赋值
                curBd.LineStyle = srcBd.LineStyle; // 赋值
                curBd.LineWidth = srcBd.LineWidth; // 赋值
                curBd.Visible = srcBd.Visible; // 赋值
            }
            // 赋值
            dstBorders.DistanceFrom = srcBorders.DistanceFrom;
            dstBorders.DistanceFromBottom = srcBorders.DistanceFromBottom;
            dstBorders.DistanceFromLeft = srcBorders.DistanceFromLeft;
            dstBorders.DistanceFromRight = srcBorders.DistanceFromRight;
            dstBorders.DistanceFromTop = srcBorders.DistanceFromTop;
            dstBorders.Enable = srcBorders.Enable;
            dstBorders.EnableFirstPageInSection = srcBorders.EnableFirstPageInSection;
            dstBorders.EnableOtherPagesInSection = srcBorders.EnableOtherPagesInSection;

            dstBorders.InsideColor = srcBorders.InsideColor;
            dstBorders.InsideColorIndex = srcBorders.InsideColorIndex;
            dstBorders.InsideLineStyle = srcBorders.InsideLineStyle;
            dstBorders.InsideLineWidth = srcBorders.InsideLineWidth;
            dstBorders.JoinBorders = srcBorders.JoinBorders;
            dstBorders.OutsideColor = srcBorders.OutsideColor;
            dstBorders.OutsideColorIndex = srcBorders.OutsideColorIndex;
            dstBorders.OutsideLineStyle = srcBorders.OutsideLineStyle;
            dstBorders.OutsideLineWidth = srcBorders.OutsideLineWidth;
            dstBorders.Shadow = srcBorders.Shadow;
            dstBorders.SurroundFooter = srcBorders.SurroundFooter;
            dstBorders.SurroundHeader = srcBorders.SurroundHeader;

            return;
        }

//         private void copyFontStyle(Word.Font srcFont, Word.Font curFnt)
//         {
//             curFnt.AllCaps = srcFont.AllCaps;
//             curFnt.Animation = srcFont.Animation;
// 
//             curFnt.Bold = srcFont.Bold;
//             curFnt.BoldBi = srcFont.BoldBi;
//             
//             // copyBorders(srcFont.Borders, curFnt.Borders);
// 
//             curFnt.Color = srcFont.Color;
//             curFnt.ColorIndex = srcFont.ColorIndex;
//             curFnt.ColorIndexBi = srcFont.ColorIndexBi;
// 
//             curFnt.DiacriticColor = srcFont.DiacriticColor;
//             curFnt.DisableCharacterSpaceGrid = srcFont.DisableCharacterSpaceGrid;
//             curFnt.DoubleStrikeThrough = srcFont.DoubleStrikeThrough;
// 
//             curFnt.Emboss = srcFont.Emboss;
//             curFnt.EmphasisMark = srcFont.EmphasisMark;
//             curFnt.Engrave = srcFont.Engrave;
//             curFnt.Hidden = srcFont.Hidden;
//             curFnt.Italic = srcFont.Italic;
//             curFnt.ItalicBi = srcFont.ItalicBi;
//             curFnt.Kerning = srcFont.Kerning;
//             curFnt.Name = srcFont.Name;
//             curFnt.NameAscii = srcFont.NameAscii;
//             curFnt.NameBi = srcFont.NameBi;
//             curFnt.NameFarEast = srcFont.NameFarEast;
//             curFnt.NameOther = srcFont.NameOther;
//             curFnt.Outline = srcFont.Outline;
//             curFnt.Position = srcFont.Position;
//             curFnt.Scaling = srcFont.Scaling;
// 
//             curFnt.Shadow = srcFont.Shadow;
//             curFnt.Size = srcFont.Size;
//             curFnt.SizeBi = srcFont.SizeBi;
//             curFnt.SmallCaps = srcFont.SmallCaps;
//             curFnt.Spacing = srcFont.Spacing;
//             curFnt.StrikeThrough = srcFont.StrikeThrough;
//             curFnt.Subscript = srcFont.Subscript;
//             curFnt.Superscript = srcFont.Superscript;
//             curFnt.Underline = srcFont.Underline;
//             curFnt.UnderlineColor = srcFont.UnderlineColor;
// 
//             return;
//         }
// 
//         private void copyParagraphFormat(Word.ParagraphFormat srcParaFormat, Word.ParagraphFormat dstParaFormat)
//         {
//             dstParaFormat.AddSpaceBetweenFarEastAndAlpha = srcParaFormat.AddSpaceBetweenFarEastAndAlpha;
// 
//             dstParaFormat.AddSpaceBetweenFarEastAndDigit = srcParaFormat.AddSpaceBetweenFarEastAndDigit;
//             dstParaFormat.Alignment = srcParaFormat.Alignment;
// 
//             dstParaFormat.AutoAdjustRightIndent = srcParaFormat.AutoAdjustRightIndent;
//             dstParaFormat.BaseLineAlignment = srcParaFormat.BaseLineAlignment;
// 
//             dstParaFormat.CharacterUnitFirstLineIndent = srcParaFormat.CharacterUnitFirstLineIndent;
//             dstParaFormat.CharacterUnitLeftIndent = srcParaFormat.CharacterUnitLeftIndent;
//             dstParaFormat.CharacterUnitRightIndent = srcParaFormat.CharacterUnitRightIndent;
//             dstParaFormat.DisableLineHeightGrid = srcParaFormat.DisableLineHeightGrid;
//             dstParaFormat.FarEastLineBreakControl = srcParaFormat.FarEastLineBreakControl;
//             dstParaFormat.FirstLineIndent = srcParaFormat.FirstLineIndent;
//             dstParaFormat.HalfWidthPunctuationOnTopOfLine = srcParaFormat.HalfWidthPunctuationOnTopOfLine;
//             dstParaFormat.HangingPunctuation = srcParaFormat.HangingPunctuation;
//             dstParaFormat.Hyphenation = srcParaFormat.Hyphenation;
//             dstParaFormat.KeepTogether = srcParaFormat.KeepTogether;
//             dstParaFormat.KeepWithNext = srcParaFormat.KeepWithNext;
//             dstParaFormat.LeftIndent = srcParaFormat.LeftIndent;
//             dstParaFormat.LineSpacing = srcParaFormat.LineSpacing;
//             dstParaFormat.LineSpacingRule = srcParaFormat.LineSpacingRule;
//             dstParaFormat.LineUnitAfter = srcParaFormat.LineUnitAfter;
//             dstParaFormat.LineUnitBefore = srcParaFormat.LineUnitBefore;
//             dstParaFormat.MirrorIndents = srcParaFormat.MirrorIndents;
//             dstParaFormat.OutlineLevel = srcParaFormat.OutlineLevel;
//             dstParaFormat.NoLineNumber = srcParaFormat.NoLineNumber;
//             dstParaFormat.PageBreakBefore = srcParaFormat.PageBreakBefore;
//             dstParaFormat.ReadingOrder = srcParaFormat.ReadingOrder;
//             dstParaFormat.RightIndent = srcParaFormat.RightIndent;
//             
//             dstParaFormat.SpaceAfter = srcParaFormat.SpaceAfter;
//             dstParaFormat.SpaceAfterAuto = srcParaFormat.SpaceAfterAuto;
//             dstParaFormat.SpaceBefore = srcParaFormat.SpaceBefore;
//             dstParaFormat.SpaceBeforeAuto = srcParaFormat.SpaceBeforeAuto;
//             dstParaFormat.TabStops = srcParaFormat.TabStops;
//             dstParaFormat.TextboxTightWrap = srcParaFormat.TextboxTightWrap;
//             dstParaFormat.WidowControl = srcParaFormat.WidowControl;
//             dstParaFormat.WordWrap = srcParaFormat.WordWrap;
// 			
//             return;
//         }

        /// <summary>
        /// 设置当前模板List
        /// </summary>
        /// <param name="oListLvels"></param>
//         private void setTemplateList(Word.ListLevels oListLvels)
//         {
//             Word.Application app = m_addin.Application;
//             // 自动编号 
//             Word.ListGallery listGallery = app.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];
// 
//             Object objIndex = 1;
//             Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;
// 
// 
//             if (oListLvels != null)
//             {
//                 for (int i = 1; i <= lstLvels.Count; i++) // 遍历
//                 {
//                     lstLvels[i].NumberFormat = oListLvels[i].NumberFormat;  // 赋值
//                     lstLvels[i].TrailingCharacter = oListLvels[i].TrailingCharacter; // 赋值
//                     lstLvels[i].NumberStyle = oListLvels[i].NumberStyle; // 赋值
//                     lstLvels[i].NumberPosition = oListLvels[i].NumberPosition; // 赋值
//                     lstLvels[i].Alignment = oListLvels[i].Alignment; // 赋值
//                     lstLvels[i].TextPosition = oListLvels[i].TextPosition; // 赋值
//                     lstLvels[i].TabPosition = oListLvels[i].TabPosition; // 赋值
//                     lstLvels[i].ResetOnHigher = oListLvels[i].ResetOnHigher; // 赋值
//                     lstLvels[i].StartAt = oListLvels[i].StartAt; // 赋值
//                     lstLvels[i].LinkedStyle = oListLvels[i].LinkedStyle; // 赋值
// 
//                     m_addin.m_commTools.copyFontStyle(oListLvels[i].Font, lstLvels[i].Font);  // 赋font值
//                 }
//             }
//             else
//             {
// 
//                 // Word.Document doc = app.ActiveDocument;
//                 //Word.Selection sel = doc.ActiveWindow.Selection;
// 
//                 // 缺省值，见word的帮助多级列表，下同
//                 lstLvels[1].NumberFormat = "%1";
//                 lstLvels[1].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[1].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[1].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[1].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[1].TextPosition = app.CentimetersToPoints(0.76f);
//                 lstLvels[1].TabPosition = 0f;
//                 lstLvels[1].ResetOnHigher = 0;
//                 lstLvels[1].StartAt = 1;
//                 lstLvels[1].LinkedStyle = "标题 1";
// 
//                 lstLvels[2].NumberFormat = "%1.%2";
//                 lstLvels[2].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[2].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[2].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[2].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[2].TextPosition = app.CentimetersToPoints(1.02f);
//                 lstLvels[2].TabPosition = 0f;
//                 lstLvels[2].ResetOnHigher = 1;
//                 lstLvels[2].StartAt = 1;
//                 lstLvels[2].LinkedStyle = "标题 2";
// 
//                 lstLvels[3].NumberFormat = "%1.%2.%3";
//                 lstLvels[3].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[3].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[3].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[3].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[3].TextPosition = app.CentimetersToPoints(1.27f);
//                 lstLvels[3].TabPosition = 0f;
//                 lstLvels[3].ResetOnHigher = 2;
//                 lstLvels[3].StartAt = 1;
//                 lstLvels[3].LinkedStyle = "标题 3";
// 
//                 lstLvels[4].NumberFormat = "%1.%2.%3.%4";
//                 lstLvels[4].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[4].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[4].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[4].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[4].TextPosition = app.CentimetersToPoints(1.52f);
//                 lstLvels[4].TabPosition = 0f;
//                 lstLvels[4].ResetOnHigher = 3;
//                 lstLvels[4].StartAt = 1;
//                 lstLvels[4].LinkedStyle = "标题 4";
// 
// 
//                 lstLvels[5].NumberFormat = "%1.%2.%3.%4.%5";
//                 lstLvels[5].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[5].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[5].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[5].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[5].TextPosition = app.CentimetersToPoints(1.78f);
//                 lstLvels[5].TabPosition = 0f;
//                 lstLvels[5].ResetOnHigher = 4;
//                 lstLvels[5].StartAt = 1;
//                 lstLvels[5].LinkedStyle = "标题 5";
// 
//                 lstLvels[6].NumberFormat = "%1.%2.%3.%4.%5.%6";
//                 lstLvels[6].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[6].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[6].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[6].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[6].TextPosition = app.CentimetersToPoints(2.03f);
//                 lstLvels[6].TabPosition = 0f;
//                 lstLvels[6].ResetOnHigher = 5;
//                 lstLvels[6].StartAt = 1;
//                 lstLvels[6].LinkedStyle = "标题 6";
// 
//                 lstLvels[7].NumberFormat = "%1.%2.%3.%4.%5.%6.%7";
//                 lstLvels[7].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[7].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[7].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[7].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[7].TextPosition = app.CentimetersToPoints(2.29f);
//                 lstLvels[7].TabPosition = 0f;
//                 lstLvels[7].ResetOnHigher = 6;
//                 lstLvels[7].StartAt = 1;
//                 lstLvels[7].LinkedStyle = "标题 7";
// 
//                 lstLvels[8].NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8";
//                 lstLvels[8].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[8].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[8].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[8].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[8].TextPosition = app.CentimetersToPoints(2.54f);
//                 lstLvels[8].TabPosition = 0f;
//                 lstLvels[8].ResetOnHigher = 7;
//                 lstLvels[8].StartAt = 1;
//                 lstLvels[8].LinkedStyle = "标题 8";
// 
// 
//                 lstLvels[9].NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8.%9";
//                 lstLvels[9].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                 lstLvels[9].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                 lstLvels[9].NumberPosition = app.CentimetersToPoints(0f);
//                 lstLvels[9].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                 lstLvels[9].TextPosition = app.CentimetersToPoints(2.79f);
//                 lstLvels[9].TabPosition = 0f;
//                 lstLvels[9].ResetOnHigher = 8;
//                 lstLvels[9].StartAt = 1;
//                 lstLvels[9].LinkedStyle = "标题 9";
//             }
// 
//             // listGallery.ListTemplates[objIndex].Name = "myList";
// 
//         }

        private void tvShareLib_AfterSelect(object sender, TreeViewEventArgs e)
        {
            txtShareName.Text = e.Node.Text; // 取值
            return;
        }


        private void btnShareOpen_Click(object sender, EventArgs e)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            TreeNode selNode = tvShareLib.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中某一树节点");
                return;
            }

            if (selNode.FullPath.StartsWith("我的电脑"))
            {
                if (selNode.Level == 0)
                {
                    //MessageBox.Show("请选中子节点");
                    System.Diagnostics.Process.Start(@"c:\windows\explorer.exe");
                    return;
                }

                String strFullPath = selNode.FullPath.Replace("我的电脑\\", ""); // 消除前导字符

                if (!strFullPath.Equals(""))
                {
                    System.Diagnostics.Process.Start(strFullPath); // 启动打开
                }

                return;
            }

            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            ShareContributorOper.TypeNode ndTag = null, parentNdTag = null;
            ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

            // String strTag = (String)selNode.Tag;
            
            String strType = null;

            if (ndTag != null)
            {
                strType = ndTag.type;// strTag.Substring(0, 1);
            }

            if (strType == null || strType.Equals("1") || strType.Equals("2"))
            {
                MessageBox.Show("请选择文件节点");
                return;
            }

            // select loc dir
            String strLocFileUrl = "";
/*          FolderBrowserDialog fbd = new FolderBrowserDialog();

            if (!m_strLocalPath.Equals(""))
            {
                fbd.SelectedPath = m_strLocalPath;
            }
            
            if (fbd.ShowDialog() == DialogResult.OK)
            {
                strLocFileUrl = fbd.SelectedPath;
                m_strLocalPath = fbd.SelectedPath;
            }
            else
            {
                return;
            }
 */

//             Boolean bSupport = m_addin.IsSupportFileFormat(selNode.Text);
// 
//             if (!bSupport)
//             {
//                 MessageBox.Show("不支持的文件类型");
//                 return;
//             }


            strLocFileUrl = m_addin.m_cfgTempFileLoc;
            m_strLocalPath = m_addin.m_cfgTempFileLoc; // 临时文件夹

            TreeNode parentNd = selNode.Parent;
            String strParentNdId = "";

            if (parentNd != null && parentNd.Tag != null)
            {
                parentNdTag = (ShareContributorOper.TypeNode)parentNd.Tag;
                strParentNdId = parentNdTag.id;

                // String strItem = (String)parentNd.Tag;
                // strParentNdId = strItem.Substring(1); // 取父节点ID
            }

            String strSelNodePath = selNode.FullPath;

            if (strSelNodePath.StartsWith("个人库"))
            {

            }
            else // 公共库
            {
                String strCurNdType = "", strCurNdId = "";

                if (ndTag != null)
                {
                    strCurNdType = ndTag.type;// strTag.Substring(0, 1);
                    strCurNdId = ndTag.id;// strTag.Substring(1);
                }

                if (m_addin.m_hashFilePermission.Contains(strCurNdId)) // 权限检查
                {
                    int[] values = null;

                    values = (int[])m_addin.m_hashFilePermission[strCurNdId];

                    if (strType.Equals("1") || strType.Equals("2")) // folder 
                    {
                        // 

                    }
                    else// if (strType.Equals("$")) // file 
                    {
                        // 
                        if (values[(int)ThisAddIn.DocRepositoryFilePermission.fpDownload] == 0 ||
                            values[(int)ThisAddIn.DocRepositoryFilePermission.fpFullControl] == 0)
                        {
                            MessageBox.Show("当前用户无权限下载此文件");
                            return;
                        }
                    }
                }
                else
                {
                    MessageBox.Show("当前用户无权限下载此文件");
                    return;
                }
            }


            String strFileId = ndTag.id;// strTag.Substring(1);
            String strTmpFile = strLocFileUrl + "\\" + selNode.Text;

            if (File.Exists(strTmpFile)) // 临时文件
            {
                // try to delete it

                try
                {
                    File.Delete(strTmpFile);
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("清除原同名文件:" + strTmpFile + "失败，请关闭此打开文件或尝试手动清除再打开", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                finally
                {
                }

            }


            int nRet = 0;
            nRet = m_scOper.downloadFile(m_addin.m_strLoginedUser, strFileId, ref strLocFileUrl); // 下载文库文件

            if (nRet == 0)
            {
                // MessageBox.Show("下载成功");
                if (!strLocFileUrl.Equals(""))
                {
                    System.Diagnostics.Process.Start(strLocFileUrl); // 启动打开

//                     // 
//                     bSupport = m_addin.IsSupportFileFormat(strLocFileUrl);
// 
//                     if (!bSupport)
//                     {
//                         MessageBox.Show("不支持的文件类型");
//                         return;
//                     }

//                     // open it
//                     Word.Application wordApplication = new Word.Application();
//                     Word.Document wordDocument = new Word.Document();
//                     Object nothing = System.Reflection.Missing.Value;
//                     Object filePath = strLocFileUrl;
//                     wordApplication.Documents.Open(ref filePath, ref nothing, ref nothing, ref nothing, ref nothing, ref nothing, ref nothing, ref nothing, ref nothing, ref   nothing, ref   nothing, ref   nothing, ref   nothing, ref  nothing, ref   nothing, ref   nothing);
//                     wordDocument = wordApplication.ActiveDocument;
//                     wordApplication.Visible = true;
                }
            }
            else
            {
                MessageBox.Show("下载失败，不能打开");
            }

            return;
        }


        /// <summary>
        /// 信息刷新
        /// </summary>
        public void infoReresh()
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
            Word.Selection sel = m_addin.Application.ActiveWindow.Selection;


            String strText = "";
            

            // 各个信息元素的名称和值
            strText += "名称:" + curDoc.Name + "\r\n";//Environment.CommandLine;
            strText += "路径:" + curDoc.Path + "\r\n";//Environment.CommandLine;
            strText += "全称:" + curDoc.FullName + "\r\n";//Environment.CommandLine;


            Microsoft.Office.Core.DocumentProperties docBuiltInProps;
            docBuiltInProps = (Microsoft.Office.Core.DocumentProperties)curDoc.BuiltInDocumentProperties;
            Microsoft.Office.Core.DocumentProperty prop;

            try
            {
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyCompany];

                strText += "公司:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyAuthor];
                strText += "作者:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertySubject];
                strText += "主题:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyTitle];
                strText += "标题:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyRevision];
                strText += "修订号:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyTimeCreated];
                strText += "创建时间:" + prop.Value + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyTimeLastSaved];
                strText += "最近保存时间:" + prop.Value + "\r\n";//Environment.CommandLine;

                int nTime = 0;
                // 各个信息元素的名称和值
                prop = docBuiltInProps[Word.WdBuiltInProperty.wdPropertyVBATotalEdit];
                if (int.TryParse("" + prop.Value, out nTime))
                {
                    int nHour = nTime / 60;
                    int nMin = nTime - nHour * 60;

                    strText += "总编辑时间:" + nHour + ":" + nMin + ":00" + "\r\n";//Environment.CommandLine;
                }
                else
                {
                    strText += "总编辑时间:" + "00:00:00" + "\r\n";//Environment.CommandLine;
                }

                int nCnt = 0;

                strText += "\r\n【全文】\r\n";

                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);
                strText += "页数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticParagraphs);
                strText += "段落数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticLines);
                strText += "行数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticWords);
                strText += "词数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
                strText += "字数（不计空白):" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticCharactersWithSpaces);
                strText += "字数（计空白):" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = curDoc.ComputeStatistics(Word.WdStatistic.wdStatisticFarEastCharacters);
                strText += "中文字数:" + nCnt + "\r\n";//Environment.CommandLine;

                strText += "\r\n";

                // 目录数
                nCnt = curDoc.TablesOfContents.Count;
                strText += "目录数：" + nCnt + "\r\n";

                // 图表目录数
                nCnt = curDoc.TablesOfFigures.Count;
                strText += "图表目录数：" + nCnt + "\r\n";

                // 表格数
                nCnt = curDoc.Tables.Count;
                strText += "表格数：" + nCnt + "\r\n";

                // 图形数
                nCnt = curDoc.InlineShapes.Count;
                strText += "图形数：" + nCnt + "\r\n";

                // 形状数
                nCnt = curDoc.Shapes.Count;
                strText += "形状数：" + nCnt + "\r\n";

                // 节数
                nCnt = curDoc.Sections.Count;
                strText += "节数：" + nCnt + "\r\n";

                // 书签数
                nCnt = curDoc.Bookmarks.Count;
                strText += "书签数：" + nCnt + "\r\n";

                // 域数
                nCnt = curDoc.Fields.Count;
                strText += "域数：" + nCnt + "\r\n";

                // 内容控件数
                nCnt = curDoc.ContentControls.Count;
                strText += "内容控件数：" + nCnt + "\r\n";

                // 索引数
                nCnt = curDoc.Indexes.Count;
                strText += "索引数：" + nCnt + "\r\n";

                // 批注数
                nCnt = curDoc.Comments.Count;
                strText += "批注数：" + nCnt + "\r\n";

                // 脚注数
                nCnt = curDoc.Footnotes.Count;
                strText += "脚注数：" + nCnt + "\r\n";

                // 尾注数
                nCnt = curDoc.Endnotes.Count;
                strText += "尾注数：" + nCnt + "\r\n";

                // 公式数
                nCnt = curDoc.OMaths.Count;
                strText += "公式数：" + nCnt + "\r\n";

                // 子文档数
                nCnt = curDoc.Subdocuments.Count;
                strText += "子文档数：" + nCnt + "\r\n";

                // 列表段落数
                nCnt = curDoc.ListParagraphs.Count;
                strText += "列表段落数：" + nCnt + "\r\n";

                /*
                strText += "\r\n--------------------\r\n";
                // 字符数
                nCnt = curDoc.Characters.Count;
                strText += "字符数：" + nCnt + "\r\n";

                // 字数
                nCnt = curDoc.Words.Count;
                strText += "字数：" + nCnt + "\r\n";

                // 句子数
                nCnt = curDoc.Sentences.Count;
                strText += "句子数：" + nCnt + "\r\n";

                // 段落数
                nCnt = curDoc.Paragraphs.Count;
                strText += "段落数：" + nCnt + "\r\n";

                // 列表段落数
                nCnt = curDoc.ListParagraphs.Count;
                strText += "列表段落数：" + nCnt + "\r\n";
                */

                // -----------------------------------------
                // 选择区的同样信息
                strText += "\r\n【选择区】\r\n";
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticPages);
                strText += "页数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticParagraphs);
                strText += "段落数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticLines);
                strText += "行数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticWords);
                strText += "词数:" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
                strText += "字数（不计空白):" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharactersWithSpaces);
                strText += "字数（计空白):" + nCnt + "\r\n";//Environment.CommandLine;
                // 各个信息元素的名称和值
                nCnt = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticFarEastCharacters);
                strText += "中文字数:" + nCnt + "\r\n";//Environment.CommandLine;

                strText += "\r\n";

                // 目录数
                //nCnt = sel.Range.TablesOfContents.Count;
                //strText += "目录数：" + nCnt + "\r\n";

                // 图表目录数
                //nCnt = sel.Range.TablesOfFigures.Count;
                //strText += "图表目录数：" + nCnt + "\r\n";

                // 表格数
                nCnt = sel.Range.Tables.Count;
                strText += "表格数：" + nCnt + "\r\n";

                // 图形数
                nCnt = sel.Range.InlineShapes.Count;
                strText += "图形数：" + nCnt + "\r\n";

                // 形状数
                //nCnt = sel.Range.Shapes.Count;
                //strText += "形状数：" + nCnt + "\r\n";

                // 节数
                nCnt = sel.Range.Sections.Count;
                strText += "节数：" + nCnt + "\r\n";

                // 书签数
                nCnt = sel.Range.Bookmarks.Count;
                strText += "书签数：" + nCnt + "\r\n";

                // 域数
                nCnt = sel.Range.Fields.Count;
                strText += "域数：" + nCnt + "\r\n";

                // 内容控件数
                nCnt = sel.Range.ContentControls.Count;
                strText += "内容控件数：" + nCnt + "\r\n";

                // 索引数
                // nCnt = sel.Range.Indexes.Count;
                // strText += "索引数：" + nCnt + "\r\n";

                // 批注数
                nCnt = sel.Range.Comments.Count;
                strText += "批注数：" + nCnt + "\r\n";

                // 脚注数
                nCnt = sel.Range.Footnotes.Count;
                strText += "脚注数：" + nCnt + "\r\n";

                // 尾注数
                nCnt = sel.Range.Endnotes.Count;
                strText += "尾注数：" + nCnt + "\r\n";

                // 公式数
                nCnt = sel.Range.OMaths.Count;
                strText += "公式数：" + nCnt + "\r\n";

                // 子文档数
                nCnt = sel.Range.Subdocuments.Count;
                strText += "子文档数：" + nCnt + "\r\n";

                // 列表段落数
                nCnt = sel.Range.ListParagraphs.Count;
                strText += "列表段落数：" + nCnt + "\r\n";

                /*
                strText += "\r\n--------------------\r\n";
                // 字符数
                nCnt = sel.Range.Characters.Count;
                strText += "字符数：" + nCnt + "\r\n";

                // 字数
                nCnt = sel.Range.Words.Count;
                strText += "字数：" + nCnt + "\r\n";

                // 句子数
                nCnt = sel.Range.Sentences.Count;
                strText += "句子数：" + nCnt + "\r\n";

                // 段落数
                nCnt = sel.Range.Paragraphs.Count;
                strText += "段落数：" + nCnt + "\r\n";

                // 列表段落数
                nCnt = sel.Range.ListParagraphs.Count;
                strText += "列表段落数：" + nCnt + "\r\n";
                */
            }
            catch(Exception ex)
            {
                return;
            }

            // MessageBox.Show(propsValue, "Subject");
            txtInfoBody.Text = strText; // 展现到UI
        }


        private void btnInfoRefresh_Click(object sender, EventArgs e)
        {
            infoReresh();// 信息的刷新
        }

        /// <summary>
        /// 文件打开dialog
        /// </summary>
        /// <param name="strTitle"></param>
        /// <param name="strInitDir"></param>
        /// <param name="strFilter"></param>
        /// <returns></returns>
        private String OpenFileDialog(String strTitle, String strInitDir=@"D:\users",
                                      String strFilter = "(*.docx;*.doc)|*.docx;*.doc")
        {
            OpenFileDialog dig = new OpenFileDialog();

            dig.Title = strTitle;
            dig.Filter = strFilter;
            dig.InitialDirectory = strInitDir; // 初始值

            if (dig.ShowDialog() == DialogResult.OK)
            {
                return dig.FileName;
            }
            else
            {
                return null;
            }            
        }


        private void resetTreeNodebyParaText(TreeNode node) // 重置树节点
        {
            Word.Paragraph para = (Word.Paragraph)node.Tag;

            if (para != null)
            {
                node.Text = para.Range.Text; // 赋值
                node.Name = node.Text; // 赋值
            }

            foreach (TreeNode childNode in node.Nodes) // 遍历
            {
                resetTreeNodebyParaText(node); // 递归
            }
        }

        /// <summary>
        /// 填充TreeView树控件
        /// </summary>
        /// <param name="strDoc"></param>
        /// <param name="strTopText"></param>
        /// <param name="tv"></param>
        private void FillTreeView(String strDoc,String strTopText,ref TreeView tv)
        {
            Word.Document sDoc = null;
            Word.Application app = m_addin.Application;

            if (strDoc == null || strDoc.Equals(""))
            {
                int nCntDoc = app.Documents.Count;
                if (nCntDoc <= 0)
                {
                    return;
                }

                try
                {
                    sDoc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

            }
            else
            {
                Object sDocLoc = strDoc;
                Object nothing = System.Reflection.Missing.Value;
                Object filePath = sDocLoc;
                Object visible = false;
                // 否则打开文档
                sDoc = app.Documents.Open(ref filePath, ref nothing, 
                                          ref nothing, ref nothing,
                                          ref nothing, ref nothing,
                                          ref nothing, ref nothing,
                                          ref nothing, ref nothing, 
                                          ref nothing, ref visible,
                                          ref nothing, ref nothing,
                                          ref nothing, ref nothing);
            }

            if (sDoc != null)
            {

                progBarComp.Left = btnExecCompare.Left; // 进度条准备
                progBarComp.Top  = btnExecCompare.Top;
                progBarComp.Height = btnExecCompare.Height;
                progBarComp.Width  = btnExecCompare.Width;
                progBarComp.Visible = true;

                progBarComp.Maximum = sDoc.Paragraphs.Count;
                progBarComp.Value = 0;
                // 建立大纲级别Tree
                TreeNode tree = m_commonTools.buildOutlineTree(sDoc,true);
                // resetTreeNodebyParaText(tree);
                // TreeNode tree = getHeadingTree(sDoc);

                progBarComp.Visible = false;

                // wordApp1.Quit();
                if (strDoc != null && !strDoc.Equals(""))
                {
                    Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
                    sDoc.Close(ref objSave); // 关闭文档
                }

                tv.Nodes.Clear();
                tv.Nodes.Add(tree); // TreeView加上新建的树节点
                tv.Nodes[0].Text = strTopText; // 赋值
            }

            return;
        }

        private String m_strInitDir = @"D:\users";
        private void btnCompStandardDoc_Click(object sender, EventArgs e)
        {
            String strTitle = "选择标准文档";
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/);

            if (strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc); // 取得目录
            Settings.Default.strFavDir = m_strInitDir; // 设置初始目录
            //Settings.Default.Save();

            Boolean bSupport = m_addin.IsWordDocFileFormat(strDoc); // 判断格式

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            if (strDoc != null)
            {
                txtCompStandardDoc.Text = strDoc;

                // Cursor = Cursors.WaitCursor;

                FillTreeView(strDoc,"文档", ref tvCompStandard); // 填充树节点结构

                TreeNode rootNode = null;

                if (tvCompStandard.Nodes.Count > 0) 
                {
                    rootNode = tvCompStandard.Nodes[0]; // 设置root节点
                }

                if (rootNode != null)
                {
                    rootNode.Tag = 0;
                    rootNode.ExpandAll(); // 展开
                    rootNode.EnsureVisible();
                    txtCompResult.Text = "信息：";
                    // Cursor = Cursors.Default;

                    int nScnt = 0, nChkCnt = 0;
                    resetTreeNodeColor(rootNode, ref nScnt); // 重置颜色
                    if (tvCompCheck.Nodes.Count > 0 && tvCompCheck.Nodes[0] != null)
                    {
                        resetTreeNodeColor(tvCompCheck.Nodes[0], ref nChkCnt); // 递归重置
                    }
                }

            }

        }

        private void btnCompCheckDoc_Click(object sender, EventArgs e)
        {
            String strTitle = "选择受检查文档";
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/);

            if (strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);
            Settings.Default.strFavDir = m_strInitDir;
            //Settings.Default.Save();

            Boolean bSupport = m_addin.IsWordDocFileFormat(strDoc); // 格式验证

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            if (strDoc != null)
            {
                txtComp2CheckDoc.Text = strDoc;

                // Cursor = Cursors.WaitCursor;

                FillTreeView(strDoc, "文档", ref tvCompCheck); // 填充TreeView对象

                TreeNode rootNode = null;

                if (tvCompCheck.Nodes.Count > 0)
                {
                    rootNode = tvCompCheck.Nodes[0];
                }

                if (rootNode != null)
                {
                    rootNode.Tag = 0;
                    rootNode.ExpandAll(); // 全部展开
                    rootNode.EnsureVisible(); // 使其可见

                    txtCompResult.Text = "信息：";
                    // Cursor = Cursors.Default;

                    int nScnt = 0, nChkCnt = 0;
                    if (tvCompStandard.Nodes.Count > 0 && tvCompStandard.Nodes[0] != null)
                    {
                        resetTreeNodeColor(tvCompStandard.Nodes[0], ref nScnt); // 重置颜色
                    }

                    resetTreeNodeColor(rootNode, ref nChkCnt); // 重置root节点颜色
                }
            }
        }

        private void resetTreeNodeColor(TreeNode nd, ref int nCnt)
        {
            nd.ForeColor = Color.Black; // 重置颜色
            nCnt++;
            foreach (TreeNode childNd in nd.Nodes) // 遍历
            {
                resetTreeNodeColor(childNd, ref nCnt); // 递归
            }
        }

        private void btnExecCompare_Click(object sender, EventArgs e)
        {
            String strStandardDoc = txtCompStandardDoc.Text;
            String toCheckDoc = txtComp2CheckDoc.Text;

            Boolean bSEmpty = strStandardDoc.Equals("");
            Boolean bChkEmpty = toCheckDoc.Equals("");

            // Cursor = Cursors.WaitCursor;

            if (bSEmpty && bChkEmpty)
            {
                MessageBox.Show("请选择至少一个文档");
                return;
            }
            else if(bSEmpty && !bChkEmpty)
            {
                FillTreeView("", "文档", ref tvCompStandard); // 填充界面

                TreeNode rootNode = null;

                if (tvCompStandard.Nodes.Count > 0)
                {
                    rootNode = tvCompStandard.Nodes[0];
                }

                if (rootNode != null)
                {
                    rootNode.Tag = 0;
                    rootNode.ExpandAll(); // 展开
                    rootNode.EnsureVisible(); // 可见
                }
            }
            else if(!bSEmpty && bChkEmpty)
            {
                FillTreeView("", "文档", ref tvCompCheck); // 填充界面

                TreeNode rootNode = null;

                if (tvCompCheck.Nodes.Count > 0)
                {
                    rootNode =tvCompCheck.Nodes[0];
                }

                if (rootNode != null)
                {
                    rootNode.Tag = 0;
                    rootNode.ExpandAll(); // 展开
                    rootNode.EnsureVisible(); // 可见
                }
            }

            txtCompResult.Text = "信息：\r\n正在对比，请稍候...";

            int nScnt = 0, nChkCnt = 0;
            if (tvCompStandard.Nodes.Count > 0 && tvCompStandard.Nodes[0] != null)
            {
                resetTreeNodeColor(tvCompStandard.Nodes[0], ref nScnt); // 重置颜色
            }

            if (tvCompCheck.Nodes.Count > 0 && tvCompCheck.Nodes[0] != null)
            {
                resetTreeNodeColor(tvCompCheck.Nodes[0], ref nChkCnt); // 重置颜色
            }

            ArrayList cntRetMsgArr = new ArrayList();
            ArrayList orderRetMsgArr = new ArrayList();
            ArrayList nodeArr = new ArrayList();

            Boolean bOutline = chkCompOutline.Checked;
            Boolean bStrickOrder = chkCompStrickOrder.Checked;

            progBarComp.Visible = true;
            progBarComp.Maximum = nScnt + nScnt + nChkCnt;
            progBarComp.Value = 0;

            int nRet = -1;
            // 对比2个标准树
            nRet = Compare2StandardTree(tvCompCheck.Nodes[0], tvCompStandard.Nodes[0], 
                                        bOutline, bStrickOrder,ref cntRetMsgArr, ref orderRetMsgArr,ref nodeArr);
            
            progBarComp.Visible = false; // 进展条不可见

            if (nRet != 0)
            {
                foreach (TreeNode nd in nodeArr) // 遍历
                {
                    nd.ForeColor = Color.Red; // 设置显著颜色
                }

                String strMsg = "检查结果：\r\n";
                int i = 1;
                foreach (String strItem in cntRetMsgArr) // 组成结果信息
                {
                    strMsg += i + "." + strItem + "\r\n";
                    i++;
                }

                foreach (String strItem in orderRetMsgArr) // 组成结果信息
                {
                    strMsg += i + "." + strItem + "\r\n";
                    i++;
                }

                txtCompResult.Text = strMsg; // 文本显示到UI上
            }
            else
            {
                txtCompResult.Text = "信息：\r\n检查结果：符合标准"; 
            }


            // Cursor = Cursors.Default;
        }

        private void tvCompStandard_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
//             if (e.Node.IsExpanded)
//                 e.Node.Collapse(false);
//             else
//                 e.Node.ExpandAll();
        }

        private void tvCompCheck_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
//             if (e.Node.IsExpanded)
//                 e.Node.Collapse(false);
//             else
//                 e.Node.ExpandAll();
        }

        private DataSet m_dataDS = new DataSet(); // 数据集

        private DataSet ExcelToDS(string strFileName)  // Excel 转到 数据集
        {
            String strConn = "";
            String fileType = Path.GetExtension(strFileName); // 取扩展名
            if (fileType == ".xls")
            {   // 连接字符串
                strConn = "Provider=Microsoft.Jet.OLEDB.4.0;" + "Data Source=" + strFileName + ";Extended Properties=\"Excel 8.0;HDR=YES;IMEX=1\"";
            }
            else if (fileType == ".xlsx")
            {   // 连接字符串
                strConn = "Provider=Microsoft.ACE.OLEDB.12.0;" + "Data Source=" + strFileName + ";Extended Properties=\"Excel 12.0;HDR=YES;IMEX=1\"";
            }
            else
            {
                MessageBox.Show("暂不支持的文件类型：" + fileType);
                return null;
            }

            OleDbConnection conn = new OleDbConnection(strConn); // 新建db连接
            OleDbDataAdapter myCommand = null;

            try
            {
	            conn.Open(); // open数据连接
	            string strExcel = "";    
	            // 建对应表
	            DataTable schemaTable = conn.GetOleDbSchemaTable(System.Data.OleDb.OleDbSchemaGuid.Tables,null);
	            string tableName = schemaTable.Rows[0]["TABLE_NAME"].ToString().Trim(); // 取名称
	
	            // strExcel="select * from [sheet1$]"; 
	            strExcel="select * from ["+tableName +"]";  // sql语句
	
	            myCommand = new OleDbDataAdapter(strExcel, strConn); // new adapter
	            // ds = new DataSet();
	            myCommand.Fill(m_dataDS, tableName.Replace("$", "")); // 填充表数据
            
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return null;
            }
            finally
            {
                if (conn != null && conn.State == ConnectionState.Open) // 判断状态
                {
                    conn.Close(); // 关闭连接
                    myCommand.Dispose(); // 释放资源
                    conn.Dispose(); // 释放资源
                }
            }

            return m_dataDS;
        }

        /// <summary>
        /// 选中数据源
        /// </summary>
        /// <param name="trv"></param>
        private void selectDataSource(TreeView trv)
        {
            String strTitle  = "请选择数据文件";
            String strFilter = "(*.xlsx;*.xls)|*.xlsx;*.xls"; // excel
            // 打开文件对话框选择文件
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/, strFilter);

            if(strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);
            Settings.Default.strFavDir = m_strInitDir;
            //Settings.Default.Save();

            String strFileType = Path.GetExtension(strDoc);
            strFileType = strFileType.ToLower();

            if (!strFileType.Equals(".xls") && !strFileType.Equals(".xlsx")) // 格式判断
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            trv.Nodes.Clear();// 清空

            m_hashRowCombine.Clear(); // hash行合并

            //other DB
            DataSet ds = ExcelToDS(strDoc); // excel转化到dataset

            if (ds == null)
            {
                return;
            }

            String strName = Path.GetFileNameWithoutExtension(strDoc); // 取不带扩展名的名称

            TreeNode rootNode = new TreeNode(strName); // 新建树节点

            foreach (DataTable dt in ds.Tables) // 遍历表
            {
                TreeNode tblNode = new TreeNode(dt.TableName); // 新建表节点

                foreach (DataColumn dtcol in dt.Columns) // 遍历列
                {
                    TreeNode colNode = new TreeNode(dtcol.ColumnName); // 新建节点

                    colNode.Name = dtcol.ColumnName; // 赋名
                    tblNode.Nodes.Add(colNode); // 新加树节点
                }

                rootNode.Nodes.Add(tblNode);// 新加树节点

                break;// only one table
            }

            trv.Nodes.Add(rootNode);// 新加树节点
            trv.Nodes[0].ExpandAll(); // 展开

            // find or create one special content control
            // 
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            String strSpecTag = @"@@table";

            Word.ContentControls cnts = curDoc.SelectContentControlsByTag(strSpecTag); // 查找标志的内容控件
            Word.ContentControl tblCnt = null;

            if (cnts.Count == 0)
            {
                // 
                tblCnt = curDoc.ContentControls.Add();// 新增内容控件
                tblCnt.Tag = strSpecTag; // 设置tag

                for (int i = 0; i < 5; i++)
                {
                    tblCnt.Range.InsertParagraphAfter(); // 扩展空间
                }
            }
            else if (cnts.Count == 1)
            {
                // 
                tblCnt = cnts[1]; // 若发现则使用之
            }
            else
            {
                MessageBox.Show("太多同类内容控件，请只留一个");
                return;
            }

            return;
        }

        private void dataInsertName(TreeView trv) // 插入列名称
        {
            TreeNode selNd = trv.SelectedNode;

            if (selNd == null || selNd.Level != 2)
            {
                MessageBox.Show("请选中名称字段");
                return;
            }

            selNd.ForeColor = Color.Green;

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            sel.InsertAfter(selNd.Name); // 插入名称
            sel.MoveDown(); // 自动下移

            return;
        }


        private void dataInsertData(TreeView trv)
        {
            TreeNode selNd = trv.SelectedNode;

            if (selNd == null || selNd.Level != 2)
            {
                MessageBox.Show("请选中数据字段");
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            Word.ContentControl itemCnt = curDoc.ContentControls.Add(); // 新建内容控件
            itemCnt.LockContentControl = true; // lock

            itemCnt.SetPlaceholderText(null, null, "@@" + selNd.Name); // 设置特征
            itemCnt.Range.Text = "[数据]" + selNd.Name; // 文本

            ArrayList arr = (ArrayList)selNd.Tag;

            if (arr == null)
            {
                arr = new ArrayList();
                arr.Add(itemCnt); // 相关的对象记录
                selNd.Tag = arr; 
            }
            else
            {
                arr.Add(itemCnt); // 添加到记录
            }

            selNd.ForeColor = Color.Red; // 显著颜色

            sel.MoveDown(); // move down

            return;

        }

        private void btnDataDSource_Click(object sender, EventArgs e)
        {
            selectDataSource(trvData); // 选择数据源
        }

        private void btnDataInsertName_Click(object sender, EventArgs e)
        {
            dataInsertName(trvData); // 插入列名称
        }

        private void btnDataInsertData_Click(object sender, EventArgs e)
        {
            dataInsertData(trvData); // 插入列数据
        }

        private const String m_dtStrRowCombineTag = "[行合并]"; // name
        private Hashtable m_hashRowCombine = new Hashtable();

        private void btnDataTagCombine_Click(object sender, EventArgs e)
        {
            TreeNode selNd = trvData.SelectedNode;

            if (selNd == null || selNd.Level != 2)
            {
                MessageBox.Show("请选中数据字段");
                return;
            }

            if (selNd.Text.EndsWith(m_dtStrRowCombineTag)) // 特征标记
            {
                selNd.Text = selNd.Text.Replace(m_dtStrRowCombineTag, ""); // 清除特征
                m_hashRowCombine.Remove(selNd.Name); // 删除
            }
            else
            {
                selNd.Text += m_dtStrRowCombineTag; // 叠加记录
                m_hashRowCombine.Add(selNd.Name, ""); // 加入记录
            }

            return;

        }


        private void btnDataProduce_Click(object sender, EventArgs e)
        {
            dataProduce(); // 数据产生
        }

        private void btnDataPreviewOne_Click(object sender, EventArgs e)
        {
            dataProduce(2); // 数据产生2个实例
        }

        private void trvData_AfterSelect(object sender, TreeViewEventArgs e)
        {
            TreeNode selNd = trvData.SelectedNode;

            if (selNd == null || selNd.Tag == null)
            {
                return;
            }

            ArrayList arr = (ArrayList)selNd.Tag;

            foreach (Word.ContentControl cnt in arr) // 同步选择对应内容控件
            {
                cnt.Range.Select(); // 显著选择
            }
        }

        private void trvData_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            dataInsertData(trvData); // 插入数据
        }

        private void btnDataRemoveRel_Click(object sender, EventArgs e)
        {
            TreeNode selNd = trvData.SelectedNode;

            if (selNd == null || selNd.Tag == null)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            ArrayList arr = (ArrayList)selNd.Tag;

            foreach (Word.ContentControl cnt in arr) // 清除
            {
                cnt.LockContentControl = false;
                cnt.LockContents = false;
                cnt.Delete(true);
            }

            arr.Clear(); // 清除

            selNd.Tag = null;
            selNd.ForeColor = Color.Black; // 重置
        }

        private void trvData_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right) // 右键
            {
                dataInsertName(trvData); // 插入名称
            }
        }

        private class styleDuplicateItem // 样式复制项目
        {
            public Word.Font fnt;                   // 字体
            public Word.ParagraphFormat paraFormat; // 段落样式

            public int Bold; // 记录的信息，见Word.Font对象
            public int BoldBi;
            public Word.Borders Borders;
            public Word.WdCharacterCase Case;
            public Word.WdCharacterWidth CharacterWidth;
            public bool CombineCharacters;
            public bool DisableCharacterSpaceGrid;
            public Word.WdEmphasisMark EmphasisMark;
            // public int End;
            public float FitTextWidth;
            // public Word.Range FormattedText;
            public bool GrammarChecked;
            public Word.WdColorIndex HighlightColorIndex;
            public Word.WdHorizontalInVerticalType HorizontalInVertical;
            // public string ID;
            public int Italic;
            public int ItalicBi;
            public Word.WdKana Kana;
            public bool LanguageDetected;
            public Word.WdLanguageID LanguageID;
            public Word.WdLanguageID LanguageIDFarEast;
            public Word.WdLanguageID LanguageIDOther;
            public int NoProofing;
            public Word.WdTextOrientation Orientation;
            // public Word.PageSetup PageSetup;
            // public String Text;
            public Word.TextRetrievalMode TextRetrievalMode;
            public Word.WdTwoLinesInOneType TwoLinesInOne;
            public Word.WdUnderline Underline;
        }

        /// <summary>
        /// 从源doc中取样式
        /// </summary>
        private void getStyleFromSrcDoc()
        {
            // get doc's info such as list template
            Word.Application app = m_addin.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            if (app.Documents.Count == 0)
            {
                return;
            }

            // open src template doc
            // get style of src
            // copy in current doc
            // apply in current doc
            //              
            String strTitle = "选择标准样式文档";
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/);
            // 打开文件对话框
            if (strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);
            Settings.Default.strFavDir = m_strInitDir;
            // 检查格式
            Boolean bSupport = m_addin.IsWordDocFileFormat(strDoc);

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            Object sDocLoc = strDoc;
            Object nothing = System.Reflection.Missing.Value;
            Object filePath = strDoc;
            Object visible = false;
            // 打开
            Word.Document srcDoc = app.Documents.Open(ref filePath, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref visible,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing);

            if (srcDoc == null)
            {
                MessageBox.Show("创建文档失败");
                return;
            }


            /*
            Word.Selection srcSel = srcDoc.ActiveWindow.Selection;
            Word.ListLevels templateLstLvls = null;
            Hashtable hashStyle = new Hashtable();

            foreach (Word.Paragraph para in srcDoc.Paragraphs)
            {
                if (para.Range.Text.Trim().Equals(""))
                    continue;

                // get list levels
                // 
                if (para.Range.ListFormat.ListTemplate != null && templateLstLvls == null)
                {
                    templateLstLvls = para.Range.ListFormat.ListTemplate.ListLevels;
                }


                if (!hashStyle.Contains(para.OutlineLevel))
                {
                    styleDuplicateItem styleItem = new styleDuplicateItem();

                    styleItem.fnt = para.Range.Font;
                    styleItem.paraFormat = para.Range.ParagraphFormat;

                    hashStyle.Add(para.OutlineLevel, styleItem);
                }

            }

            // apply
            Word.ListGallery listGallery = app.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];

            Object objIndex = 1;
            Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;

            if (templateLstLvls != null)
            {
                setTemplateList(templateLstLvls);
            }

            Object objContinue = false;
            Object objApplyTo = Word.WdListApplyTo.wdListApplyToSelection; // wdListApplyToWholeList;
            Object objDefaultBehav = Word.WdDefaultListBehavior.wdWord10ListBehavior;

            foreach (Word.Paragraph dstPara in dstDoc.Paragraphs)
            {
                if (dstPara.Range.Text.Trim().Equals(""))
                    continue;

                if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                {
                    // list levels
                    if (templateLstLvls != null)
                    {
                        dstPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                            objContinue, objApplyTo, objDefaultBehav);
                    }
                }

                // 
                styleDuplicateItem styleItem = (styleDuplicateItem)hashStyle[dstPara.OutlineLevel];

                if (styleItem != null)
                {
                    copyFontStyle(styleItem.fnt, dstPara.Range.Font);
                    copyParagraphFormat(styleItem.paraFormat, dstPara.Range.ParagraphFormat);
                }

            }
            */
            // 复制样式信息
            m_addin.copyMultiStyles(srcDoc.Range());


            Word.Selection sel = dstDoc.ActiveWindow.Selection;

            Word.Range rng = sel.Range;

            if (sel.Range.End - sel.Range.Start <= 1)
            {
                DialogResult res = MessageBox.Show("当前无选择，确定引用到整个文档？", "请确定范围", MessageBoxButtons.YesNo);

                if (res == DialogResult.Yes)
                {
                    rng = dstDoc.Range();
                }
                else
                {
                    return;
                }
            }
            // 应用到目标doc的范围中
            m_addin.applyMultiStyles(rng);


            Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
            m_addin.RemoveTaskPane(srcDoc);
            srcDoc.Close(ref objSave);

            return;
        }


        private void previewStyleItem_v1(RichTextBox richTxt, Word.Paragraph para)
        {
            Word.Application app = m_addin.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Font fnt = null;

            // ClassFont hsFnt = null;
            Word.Font hsFnt = null;

            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;
            float fFntSize = 0.0f;
            String strFntName = "";
            String strHeading = "", strSpace = "";

            int nOutlineLevel = (int)para.OutlineLevel;

            // get sys styles font infomration.
            if (nOutlineLevel >= (int)Word.WdOutlineLevel.wdOutlineLevel1 && nOutlineLevel <= (int)Word.WdOutlineLevel.wdOutlineLevel9)
            {
                strHeading = "标题 " + nOutlineLevel;
            }
            else if (nOutlineLevel == (int)Word.WdOutlineLevel.wdOutlineLevelBodyText)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            Word.Style styleHeading = null;


            try
            {
                styleHeading = curDoc.Styles[strHeading];
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {
            }

            if (styleHeading == null)
            {
                MessageBox.Show("无缺省标题样式：" + strHeading);
                return;
            }

            wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;
            // 字体转换
            if (para.Range.Font.Name.Equals(""))
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (wFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

            }
            else
            {
                hsFnt = para.Range.Font;
                // 字体转换
                if (hsFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (hsFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (hsFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (hsFnt.StrikeThrough != 0 || hsFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (hsFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (hsFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = hsFnt.Name;
                fFntSize = hsFnt.Size;

                if (hsFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(hsFnt.Name, hsFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (hsFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)hsFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
            }
            // 对齐转换
            String strAlignment = "居左";
            switch (para.Format.Alignment)
            {
                case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    strAlignment = "居左";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphRight:
                    strAlignment = "居右";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                    strAlignment = "居中";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphJustify:
                    strAlignment = "两端对齐";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphDistribute:
                    strAlignment = "分散对齐";
                    break;

                default:
                    strAlignment = "两端对齐";
                    break;
            }

            // 对齐转换
            // HorizontalAlignment
            richTxt.SelectionAlignment = HorizontalAlignment.Left;
            if (para.Format.Alignment == Word.WdParagraphAlignment.wdAlignParagraphLeft)
            {
                richTxt.SelectionAlignment = HorizontalAlignment.Left;
            }
            else if (para.Format.Alignment == Word.WdParagraphAlignment.wdAlignParagraphCenter)
            {
                richTxt.SelectionAlignment = HorizontalAlignment.Center;
            }
            else if (para.Format.Alignment == Word.WdParagraphAlignment.wdAlignParagraphRight)
            {
                richTxt.SelectionAlignment = HorizontalAlignment.Right;
            }

            String strPreviewCnt = "";

            String strFntNum = m_addin.GetWordFontNumber(fFntSize); // 字体号

            if (nOutlineLevel >= (int)Word.WdOutlineLevel.wdOutlineLevel1 && nOutlineLevel <= (int)Word.WdOutlineLevel.wdOutlineLevel9)
            {
                strHeading = "标题" + nOutlineLevel + "级";
            }
            else if (nOutlineLevel == (int)Word.WdOutlineLevel.wdOutlineLevelBodyText)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            String strBoldItalic = "";
            // 字体转换
            if (para.Range.Font.Bold != 0 || para.Range.Font.Italic != 0)
            {
                strBoldItalic = "[";
                if (para.Range.Font.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }

                if (para.Range.Font.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }

            String strSn = "";

            if (para.Range.ListFormat != null && !String.IsNullOrWhiteSpace(para.Range.ListFormat.ListString))
            {
                strSn = para.Range.ListFormat.ListString + " ";
            }

            if (strFntNum.Equals(fFntSize.ToString()))
            {
                // strPreviewCnt = "[" + strHeading + "][" + strFntName + strFntNum + "][" + strAlignment + "]\r\n";
                strPreviewCnt = strSn + strHeading + ":[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]\r\n";
            }
            else
            {
                // strPreviewCnt = "[" + strHeading + "][" + strFntName + strFntNum + fFntSize + "][" + strAlignment + "]\r\n";
                strPreviewCnt = strSn + strHeading + ":[" + strFntName + strFntNum + fFntSize + "]" + strBoldItalic + "[" + strAlignment + "]\r\n";
            }

            richTxt.AppendText(strPreviewCnt); // 信息附加

            return;
        }

        private void previewStyleItem(RichTextBox richTxt, Word.Paragraph para)
        {
            Word.Application app = m_addin.Application;

            Font fnt = null;

            // ClassFont hsFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;
            float fFntSize = 0.0f;
            String strFntName = "";
            String strHeading = "", strSpace = "";

            int nOutlineLevel = (int)para.OutlineLevel;


            // get sys styles font infomration.
            if (nOutlineLevel >= 1 && nOutlineLevel <= 9)
            {
                strHeading = "标题 " + nOutlineLevel;
            }
            else if (nOutlineLevel == 10)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            Word.Style styleHeading = null;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (String.IsNullOrWhiteSpace(para.Range.Font.Name))
            {
                try
                {
                    styleHeading = curDoc.Styles[strHeading];
                }
                catch (System.Exception ex)
                {
                    return;
                }
                finally
                {
                }

                if (styleHeading == null)
                {
                    MessageBox.Show("无缺省标题样式：" + strHeading);
                    return;
                }

                wFnt = styleHeading.Font;

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;
            }
            else
            {
                //hsFnt = hsItem.m_fnt;

                strFntName = para.Range.Font.Name;
                fFntSize = para.Range.Font.Size;
            }


            // 对齐转换
            String strAlignment = "居左";

            // richTxt.SelectionAlignment = HorizontalAlignment.Left;
            HorizontalAlignment lineAlignment = HorizontalAlignment.Left;
            switch (para.Range.ParagraphFormat.Alignment)
            {
                case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    lineAlignment = HorizontalAlignment.Left;
                    strAlignment = "居左";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphRight:
                    lineAlignment = HorizontalAlignment.Right;
                    strAlignment = "居右";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                    lineAlignment = HorizontalAlignment.Center;
                    strAlignment = "居中";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphJustify:
                    strAlignment = "两端对齐";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphDistribute:
                    strAlignment = "分散对齐";
                    break;

                default:
                    strAlignment = "两端对齐";
                    break;
            }

            String strSpaceRule = "";

            switch (para.Range.ParagraphFormat.LineSpacingRule)
            {
                case Word.WdLineSpacing.wdLineSpace1pt5:
                    strSpaceRule = "1.5倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceAtLeast:
                    strSpaceRule = "最小值行距：" + (int)para.Range.ParagraphFormat.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceDouble:
                    strSpaceRule = "2倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceExactly:
                    strSpaceRule = "固定值行距：" + (int)para.Range.ParagraphFormat.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceMultiple:
                    strSpaceRule = "多倍行距：" + (int)app.PointsToLines(para.Range.ParagraphFormat.LineSpacing) + "倍";
                    break;

                case Word.WdLineSpacing.wdLineSpaceSingle:
                    strSpaceRule = "单倍行距";
                    break;

                default:
                    break;
            }

            String strIndent = "缩进：";

            strIndent += "左：" + app.PointsToCentimeters(para.Range.ParagraphFormat.LeftIndent).ToString("0.##") + "厘米，" +
                         "右：" + app.PointsToCentimeters(para.Range.ParagraphFormat.RightIndent).ToString("0.##") + "厘米";

            if (para.Range.ParagraphFormat.RightIndent > 0.0f)
            {
                strIndent += ",首行：" + app.PointsToCentimeters(para.Range.ParagraphFormat.RightIndent).ToString("0.##") + "厘米";
            }

            if (para.Range.ParagraphFormat.CharacterUnitLeftIndent != 0.0f)
            {
                strIndent += "(左：" + (int)para.Range.ParagraphFormat.CharacterUnitLeftIndent + "字符)";
            }
            else if (para.Range.ParagraphFormat.CharacterUnitRightIndent != 0.0f)
            {
                strIndent += "(右：" + (int)para.Range.ParagraphFormat.CharacterUnitRightIndent + "字符)";
            }
            else if (para.Range.ParagraphFormat.CharacterUnitFirstLineIndent != 0.0f)
            {
                strIndent += "(首行：" + (int)para.Range.ParagraphFormat.CharacterUnitFirstLineIndent + "字符)";
            }

            String strFmtInfo = "";

            String strFntNum = m_addin.GetWordFontNumber(fFntSize); // 字体号


            String strBoldItalic = "";
            // 字体转换
            if (para.Range.Font.Bold != 0 || para.Range.Font.Italic != 0)
            {
                strBoldItalic = "[";
                if (para.Range.Font.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }

                if (para.Range.Font.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }

            //             if (strFntNum.Equals(fFntSize.ToString()))
            //             {
            //                 // strFmtInfo = strHeading + ":[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]\r\n";
            //                 strFmtInfo = "[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
            //             }
            //             else
            //            {
            // strFmtInfo = "[" + strHeading + "][" + strFntName + strFntNum + fFntSize + "][" + strAlignment + "]\r\n";
            strFmtInfo = " [" + strFntName + strFntNum + fFntSize + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
            //            }

            String strSn = "";

            if (para.Range.ListFormat != null && !String.IsNullOrWhiteSpace(para.Range.ListFormat.ListString))
            {
                strSn = para.Range.ListFormat.ListString + " ";
            }

            if (nOutlineLevel >= 1 && nOutlineLevel <= 9)
            {
                strHeading = strSn + "标题" + nOutlineLevel + "级";
            }
            else if (nOutlineLevel == 10)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            int nStart = richTxt.Text.Length;

            richTxt.AppendText(strHeading + strFmtInfo);

            richTxt.Select(nStart, strHeading.Length);

            richTxt.SelectionAlignment = lineAlignment;

            // wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;
            // 字体转换
            if (para.Range.Font.Name.Equals(""))
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (wFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

            }
            else
            {
                //hsFnt = hsItem.m_fnt;
                // 字体转换
                if (para.Range.Font.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (para.Range.Font.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (para.Range.Font.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (para.Range.Font.StrikeThrough != 0 || para.Range.Font.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (para.Range.Font.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (para.Range.Font.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = para.Range.Font.Name;
                fFntSize = para.Range.Font.Size;

                if (para.Range.Font.Name.Equals("思源黑体"))
                {
                    fnt = new Font(para.Range.Font.Name, para.Range.Font.Size, FontStyle.Italic);
                }
                else
                {
                    if (String.IsNullOrWhiteSpace(para.Range.Font.Name)) // 设置样式
                    {
                        fnt = new Font("宋体", 10.5f, fntStyle);
                    }
                    else
                    {
                        fnt = new Font(para.Range.Font.Name, para.Range.Font.Size, fntStyle);
                    }

                    // fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (para.Range.Font.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)para.Range.Font.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
            }

            richTxt.Select(nStart + strHeading.Length, strFmtInfo.Length);

            fntStyle = FontStyle.Regular;

            // fnt = new Font("宋体", 10.5f, fntStyle);
            fnt = new Font("宋体", 8.0f, fntStyle);

            richTxt.SelectionFont = fnt;
            richTxt.SelectionColor = Color.Black;
            richTxt.SelectionCharOffset = 0;
            // richTxt.SelectionAlignment = HorizontalAlignment.Left;

            int nEnd = richTxt.Text.Length - 1;
            richTxt.Select(nEnd, 0);

            return;
        }


        private void UniformStyleLoadDocStylesInfo(String strDoc)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Boolean bSupport = m_addin.IsWordDocFileFormat(strDoc); // 检查格式

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            String strTmpDoc = CopyTmpDocFile(strDoc);

            if (!System.IO.File.Exists(strTmpDoc))
            {
                MessageBox.Show("创建临时文件失败：" + strTmpDoc + "，请检查是否临时目录磁盘空间不足");
                return;
            }

            txtBoxStyleFile.Text = strDoc;

            Object sDocLoc = strTmpDoc;
            Object nothing = System.Reflection.Missing.Value;
            Object filePath = strTmpDoc;
            Object visible = false;
            // 打开文档
            Word.Document srcDoc = app.Documents.Open(ref filePath, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref visible,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing);

            if (srcDoc == null)
            {
                MessageBox.Show("创建打开文档失败:" + filePath);
                return;
            }

            // organize information.
            Hashtable hashStyle = new Hashtable();

            ArrayList arrScrParas = m_commonTools.get9HeadingParas(srcDoc);
            
            srcDoc.ActiveWindow.Selection.HomeKey(Word.WdUnits.wdStory);
            
            Word.Paragraph srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc,(int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            Word.Paragraph prevPara = null;

            while(srcTxtbodyPara != null)
            {
                if (!String.IsNullOrWhiteSpace(srcTxtbodyPara.Range.Text.Trim(m_commonTools.m_trimChars)))
                {
                    arrScrParas.Add(srcTxtbodyPara);
                    break;
                }

                if ((prevPara != null && prevPara.Range.IsEqual(srcTxtbodyPara.Range)) ||
                    srcTxtbodyPara.Next() == null)
                {
                    break;
                }

                prevPara = srcTxtbodyPara;
                srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc, (int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            }


            foreach (Word.Paragraph para in arrScrParas) // 遍历文件的所有段落
            {
                if (String.IsNullOrWhiteSpace(para.Range.Text))
                    continue;

                //
                if (!hashStyle.Contains(para.OutlineLevel)) // 未记录此级别样式
                {
                    hashStyle.Add(para.OutlineLevel, para); // 则添加
                }

                if (hashStyle.Count > 10)
                {
                    break; // full
                }

            }

            rchTextBoxUniformStylesPreview.Clear();
            Word.Paragraph hashPara = null;
            for(int otlvl = (int)Word.WdOutlineLevel.wdOutlineLevel1; otlvl <= (int)Word.WdOutlineLevel.wdOutlineLevelBodyText; otlvl++ )
            {
                if (hashStyle.Contains((Word.WdOutlineLevel)otlvl)) 
                {
                    hashPara = (Word.Paragraph)hashStyle[(Word.WdOutlineLevel)otlvl];
                    previewStyleItem(rchTextBoxUniformStylesPreview, hashPara);
                }
            }

            Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
            m_addin.RemoveTaskPane(srcDoc);
            srcDoc.Close(ref objSave);

            return;
        }
 
        private void btnStyleOpenFile_Click(object sender, EventArgs e)
        {
            // get doc's info such as list template
            Word.Application app = m_addin.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            // open src template doc
            // get style of src
            // copy in current doc
            // apply in current doc
            //              
            String strTitle = "选择标准样式文档";
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/);

            if (strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);
            Settings.Default.strFavDir = m_strInitDir;
            //Settings.Default.Save();

//             Boolean bSupport = m_addin.IsSupportFileFormat(strDoc);
// 
//             if (!bSupport)
//             {
//                 MessageBox.Show("不支持的文件类型");
//                 return;
//             }
            // 统一样式
            UniformStyleLoadDocStylesInfo(strDoc);

//             txtBoxStyleFile.Text = strDoc;
// 
//             Object sDocLoc = strDoc;
//             Object nothing = System.Reflection.Missing.Value;
//             Object filePath = strDoc;
//             Object visible = false;
// 
//             Word.Document srcDoc = app.Documents.Open(ref filePath, ref nothing,
//                                       ref nothing, ref nothing,
//                                       ref nothing, ref nothing,
//                                       ref nothing, ref nothing,
//                                       ref nothing, ref nothing,
//                                       ref nothing, ref visible,
//                                       ref nothing, ref nothing,
//                                       ref nothing, ref nothing);
// 
//             if (srcDoc == null)
//             {
//                 MessageBox.Show("创建打开文档失败:" + filePath);
//                 return;
//             }
// 
//             // organize information.
//             Hashtable hashStyle = new Hashtable();
// 
//             String strStyleInfo = "";
//             int nCnt = 0;
//             foreach (Word.Paragraph para in srcDoc.Paragraphs)
//             {
//                 if (para.Range.Text.Trim().Equals(""))
//                     continue;
// 
//                 //
//                 if (!hashStyle.Contains(para.OutlineLevel))
//                 {
//                     hashStyle.Add(para.OutlineLevel, "");
//                     nCnt++;
// 
//                     dynamic style = para.Range.get_Style();
// 
//                     strStyleInfo += nCnt + ":" + para.Range.Text + "，样式：(" + style.Description + ")\r\n\r\n";
//                 }
// 
// 
//                 if (hashStyle.Count >= 10)
//                 {
//                     break; // full
//                 }
// 
//             }
// 
//             Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
//             srcDoc.Close(ref objSave);
// 
//             txtBoxStyleInfo.Text = strStyleInfo;

            return;
        }

        private void applyStyle2Para(Word.Document dstDoc, styleDuplicateItem styleItem, Word.Paragraph para, ProgressBar prgBar)
        {
            
        }


        private void applyStyle2Doc(String strDoc, ref Word.Document dstDoc, ProgressBar prgBar, Boolean bAllDoc)
        {
            Word.Application app = m_addin.Application;

            Word.Paragraphs paras = null;

            if (!bAllDoc)
            {
                paras = dstDoc.ActiveWindow.Selection.Range.Paragraphs; // 选择区的段落
            }
            else
            {
                paras = dstDoc.Paragraphs; // 所有段落
            }

            if (paras == null || paras.Count == 0)
            {
                MessageBox.Show("目标文档没有段落");
                return;
            }

            String strTmpFile = "";
            if (!File.Exists(strDoc))
            {
                MessageBox.Show("源文件已经不存在","错误");
                return;
            }

            strTmpFile = m_commonTools.CopyTmpDocFile(strDoc);

            if (!File.Exists(strTmpFile))
            {
                MessageBox.Show("创建临时文件失败：" + strTmpFile + "，请检查是否临时目录磁盘空间不足");
                return;
            }


            Object sDocLoc = strTmpFile;
            Object nothing = System.Reflection.Missing.Value;
            Object filePath = strTmpFile;
            Object visible = false;
            // 打开文档
            Word.Document srcDoc = app.Documents.Open(ref filePath, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref visible,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing);

            if (srcDoc == null)
            {
                MessageBox.Show("创建临时文档失败");
                return;
            }

            prgBar.Minimum = 0;
            prgBar.Value = 0;

            prgBar.Visible = true;

            btnUnitFormExitApply.Left = btnStyleOpenFile.Left;
            btnUnitFormExitApply.Top = btnStyleOpenFile.Top;

            btnUnitFormExitApply.Visible = true;

            Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;

            Word.Selection srcSel = srcDoc.ActiveWindow.Selection;
            Word.Selection dstSel = dstDoc.ActiveWindow.Selection;

            if (!bAllDoc && dstSel.End - dstSel.Start <= 1)
            {
                DialogResult res = MessageBox.Show("没有做选择，是否应用到全文？","确认",MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    prgBar.Visible = false;
                    btnUnitFormExitApply.Visible = false;

                    m_addin.RemoveTaskPane(srcDoc);
                    srcDoc.Close(objSave); // 关闭

                    return;
                }

                bAllDoc = true;
            }

            int nOStart = dstSel.Start; // 记录原位置
            int nOEnd = dstSel.End;

            Word.WdViewType oViewType = dstDoc.ActiveWindow.View.Type;


            Word.ListLevels templateLstLvls = null;
            // Hashtable hashStyle = new Hashtable();
            Hashtable hashSrcStyleParas = new Hashtable();

            ArrayList arrCFont = new ArrayList();
            ArrayList arrParaFmt = new ArrayList();
            ClassFont cFont = null;
            ClassParagraphFormat cParaFmt = null;

            for(int i = 0; i < 10;i++)
            {
                arrCFont.Add(null);
                arrParaFmt.Add(null);
            }

            //
            ArrayList arrScrParas = m_commonTools.get9HeadingParas(srcDoc);

            srcDoc.ActiveWindow.Selection.HomeKey(Word.WdUnits.wdStory);

            Word.Paragraph srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc, (int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            Word.Paragraph prevPara = null;

            while (srcTxtbodyPara != null)
            {
                if (!String.IsNullOrWhiteSpace(srcTxtbodyPara.Range.Text.Trim(m_commonTools.m_trimChars))) 
                {
                    arrScrParas.Add(srcTxtbodyPara);
                    break;
                }

                if ((prevPara != null && prevPara.Range.IsEqual(srcTxtbodyPara.Range)) ||
                    srcTxtbodyPara.Next() == null)
                {
                    break;
                }

                prevPara = srcTxtbodyPara;
                srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc, (int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            }


            foreach (Word.Paragraph paraItem in arrScrParas) // 遍历文件的所有段落
            {
                if (String.IsNullOrWhiteSpace(paraItem.Range.Text))
                    continue;

                //
                if (!hashSrcStyleParas.Contains(paraItem.OutlineLevel)) // 未记录此级别样式
                {
                    hashSrcStyleParas.Add(paraItem.OutlineLevel, paraItem); // 则添加
                }


                if (hashSrcStyleParas.Count > 10)
                {
                    break; // full
                }

            }

            if (hashSrcStyleParas.Count == 0)
            {
                prgBar.Visible = false;
                btnUnitFormExitApply.Visible = false;

                m_addin.RemoveTaskPane(srcDoc);
                srcDoc.Close(objSave); // 关闭

                MessageBox.Show("样式文档中没有非空的标题正文样式");
                return;
            }

            
            Word.Paragraph para = null;
            for (int otlvl = (int)Word.WdOutlineLevel.wdOutlineLevel1; otlvl <= (int)Word.WdOutlineLevel.wdOutlineLevelBodyText; otlvl++)
            {
                if (hashSrcStyleParas.Contains((Word.WdOutlineLevel)otlvl))
                {
                    para = (Word.Paragraph)hashSrcStyleParas[(Word.WdOutlineLevel)otlvl];

                    cFont = new ClassFont();
                    cFont.clone(para.Range.Font);

                    cParaFmt = new ClassParagraphFormat();
                    cParaFmt.clone(para.Range.ParagraphFormat);

                    arrCFont[otlvl-1] = cFont;
                    arrParaFmt[otlvl-1] = cParaFmt;

                    // get list levels
                    // 章节序号
                    if (para.Range.ListFormat.ListType == Word.WdListType.wdListOutlineNumbering &&
                        para.Range.ListFormat.ListTemplate != null && templateLstLvls == null)
                    {
                        templateLstLvls = para.Range.ListFormat.ListTemplate.ListLevels; // 记录
                    }
                }
            }

            if (templateLstLvls != null)
            {
                String strListLevels = "", strTmp = "", strTmp2 = "", strInfo = "";
                int nLen1 = 0, nLen2 = 0;

                ClassListLevel[] tmpLevels = new ClassListLevel[9];

                for (int i = 0; i < 9; i++)
                {
                    tmpLevels[i] = new ClassListLevel();
                    //tmpLevels[i].Font = new ClassFont();

                    tmpLevels[i].clone(templateLstLvls[i+1]);

                    strTmp = buildHeadingSnPreview(tmpLevels, i);
                    strTmp2 = "[" + (i + 1) + "级]：" + strTmp;

                    nLen1 = Encoding.GetEncoding("GB2312").GetBytes(strTmp2).Length;
                    nLen2 = strTmp2.Length;

                    strInfo = strTmp2.PadRight(32 - (nLen1 - nLen2));

                    strListLevels += strInfo + "(" + tmpLevels[i].NumberFormat + ")\r\n";
                }

                strListLevels += "\r\n%n代表第n级的序号，如%1.%2表示\"第1级序号.第2级序号\"\r\n注意：将应用源文档中章节中第一个使用的多级序号";


                frmMsgBoxWithTextBox myMsgBox = new frmMsgBoxWithTextBox();

                myMsgBox.txtBoxMsg.Text = "请确认将应用的章节序号是否为以下形式：\r\n\r\n" +
                                          "       章节序号" + "                 " + "序号格式\r\n" +
                                          strListLevels;
                myMsgBox.txtBoxMsg.Select(0, 0);

                myMsgBox.Text = "确认";

                DialogResult res = myMsgBox.ShowDialog();

                if (res == DialogResult.Cancel)
                {
                    prgBar.Visible = false;
                    btnUnitFormExitApply.Visible = false;

                    m_addin.RemoveTaskPane(srcDoc);
                    srcDoc.Close(objSave); // 关闭

                    return;
                }
                else if (res == DialogResult.No)
                {
                    templateLstLvls = null;
                }
            }


            Boolean bIgnoreToc = false,bIgnoreTable = false;
            Boolean bIgnorePages = false;
            int nIgnorePages = 1;
            Boolean bIgnoreHeading = false;
            Boolean bIgnoreTextBody = false;
            Boolean bKeepFont = false,bKeepParagraphFmt = false;


            bIgnoreToc = chkIgnoreTOC.Checked;
            bIgnoreTable = chkIgnoreTable.Checked;
            bIgnorePages = chkIgnorePages.Checked;

            if (!int.TryParse(txtIgnorePages.Text, out nIgnorePages)) // 解析输入
            {
                nIgnorePages = 0;
            }

            bIgnoreHeading = chkIgnoreHeadings.Checked;
            bIgnoreTextBody = chkIgnoreTextBody.Checked;

            bKeepFont = chkIgnoreFont.Checked;
            bKeepParagraphFmt = chkIgnoreParaFormat.Checked;


            Word.Range scopeRange = null;

            if(!bAllDoc)
            {
                scopeRange = dstSel.Range;
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("应用样式文档");
            }

            String strRetMsg = "";
            int nRet = m_addin.m_commTools.changeTargetParasStyle(app,dstDoc,ref strRetMsg,arrCFont,arrParaFmt,
                bIgnoreToc,bIgnoreTable,bIgnorePages,(uint)nIgnorePages,bIgnoreHeading,bIgnoreTextBody,
                bKeepFont,bKeepParagraphFmt,
                scopeRange,
                null,
                templateLstLvls,
                prgBar
                );

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }


            prgBar.Visible = false;
            btnUnitFormExitApply.Visible = false;

            m_addin.RemoveTaskPane(srcDoc);
            srcDoc.Close(objSave); // 关闭

            dstDoc.ActiveWindow.View.Type = oViewType;

            dstSel.Start = nOStart; // 恢复视角到初始位置
            dstSel.End = nOEnd;
            // sel.Range.Select();
            dstSel.Range.GoTo();
            dstDoc.ActiveWindow.ScrollIntoView(dstSel.Range); // 移视角到原位置

            if (nRet != 0)
            {
                MessageBox.Show(strRetMsg, "异常信息");
            }
            else
            {
                MessageBox.Show("完成\r\n" + strRetMsg, "成功");
            }

            return;
        }


        /// <summary>
        /// 应用样式到DOC
        /// </summary>
        /// <param name="strDoc"></param>
        /// <param name="dstDoc"></param>
        /// <param name="prgBar"></param>
        /// <param name="bAllDoc"></param>
        private void applyStyle2Doc_v1(String strDoc, ref Word.Document dstDoc, ProgressBar prgBar,Boolean bAllDoc)
        {
            Word.Application app = m_addin.Application;

            Word.Paragraphs paras = null;

            if (!bAllDoc)
            {
                paras = dstDoc.ActiveWindow.Selection.Range.Paragraphs; // 选择区的段落
            }
            else
            {
                paras = dstDoc.Paragraphs; // 所有段落
            }

            if (paras == null || paras.Count == 0)
            {
                return;
            }

            String strTmpPath = Path.GetTempPath(); // 临时目录
            String strTmpFile = "", strPostx = "";

            if (!File.Exists(strDoc))
            {
                return;
            }

            // 拼装临时文件名
            strPostx = DateTime.Now.ToString("yyyyMMdd_hhmmssffff");
            strTmpFile = strTmpPath + Path.GetFileNameWithoutExtension(strDoc) + "_" + strPostx + Path.GetExtension(strDoc);

            if (File.Exists(strTmpFile)) // 判断存在
            {
                File.Delete(strTmpFile);
            }

            File.Copy(strDoc, strTmpFile);


            Object sDocLoc = strTmpFile;
            Object nothing = System.Reflection.Missing.Value;
            Object filePath = strTmpFile;
            Object visible = false;
            // 打开文档
            Word.Document srcDoc = app.Documents.Open(ref filePath, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref visible,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing);

            if (srcDoc == null)
            {
                MessageBox.Show("创建文档失败");
                return;
            }

            prgBar.Minimum = 0;
            prgBar.Value = 0;

            prgBar.Visible = true;

            btnUnitFormExitApply.Left = btnStyleOpenFile.Left;
            btnUnitFormExitApply.Top = btnStyleOpenFile.Top;

            btnUnitFormExitApply.Visible = true;


            Word.Selection srcSel = srcDoc.ActiveWindow.Selection;

            Word.Selection dstSel = dstDoc.ActiveWindow.Selection;

            int nOStart = dstSel.Start; // 记录原位置
            int nOEnd = dstSel.End;


            Word.ListLevels templateLstLvls = null;
            Hashtable hashStyle = new Hashtable();
            Hashtable hashSrcStyleParas = new Hashtable();

            styleDuplicateItem styleItem = null;


            //
            ArrayList arrScrParas = m_commonTools.get9HeadingParas(srcDoc);

            srcDoc.ActiveWindow.Selection.HomeKey(Word.WdUnits.wdStory);

            Word.Paragraph srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc, (int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            Word.Paragraph prevPara = null;

            while (srcTxtbodyPara != null)
            {
                if (!String.IsNullOrWhiteSpace(srcTxtbodyPara.Range.Text))
                {
                    arrScrParas.Add(srcTxtbodyPara);
                    break;
                }

                if ((prevPara != null && prevPara.Range.IsEqual(srcTxtbodyPara.Range)) ||
                    srcTxtbodyPara.Next() == null)
                {
                    break;
                }

                prevPara = srcTxtbodyPara;
                srcTxtbodyPara = m_commonTools.getOneHeadingPara(srcDoc, (int)Word.WdOutlineLevel.wdOutlineLevelBodyText);
            }


            foreach (Word.Paragraph paraItem in arrScrParas) // 遍历文件的所有段落
            {
                if (String.IsNullOrWhiteSpace(paraItem.Range.Text))
                    continue;

                //
                if (!hashSrcStyleParas.Contains(paraItem.OutlineLevel)) // 未记录此级别样式
                {
                    hashSrcStyleParas.Add(paraItem.OutlineLevel, paraItem); // 则添加
                }


                if (hashSrcStyleParas.Count > 10)
                {
                    break; // full
                }

            }

            if (hashSrcStyleParas.Count == 0)
            {
                MessageBox.Show("样式文档中没有非空的标题正文样式");
                return;
            }

            prgBar.Maximum = hashSrcStyleParas.Count + paras.Count;

            Word.Paragraph para = null;
            for (int otlvl = (int)Word.WdOutlineLevel.wdOutlineLevel1; otlvl <= (int)Word.WdOutlineLevel.wdOutlineLevelBodyText; otlvl++)
            {
                if (hashSrcStyleParas.Contains((Word.WdOutlineLevel)otlvl))
                {
                    para = (Word.Paragraph)hashSrcStyleParas[(Word.WdOutlineLevel)otlvl];
                    prgBar.Value++;

                    if (m_bExitUnitFormApply)
                    {
                        prgBar.Visible = false;
                        btnUnitFormExitApply.Visible = false;
                        return;
                    }

                    // if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText ||
                    //    para.Range.Text.Trim().Equals(""))
                    //    continue;

                    // Object objStyle = para.get_Style();


                    // get list levels
                    // 章节序号
                    if (para.Range.ListFormat.ListType == Word.WdListType.wdListOutlineNumbering &&
                        para.Range.ListFormat.ListTemplate != null && templateLstLvls == null)
                    {
                        templateLstLvls = para.Range.ListFormat.ListTemplate.ListLevels; // 记录
                    }

                    if (!hashStyle.Contains(para.OutlineLevel)) // 此级别的样式
                    {
                        styleItem = new styleDuplicateItem(); // 新建记录对象进行记录

                        styleItem.fnt = para.Range.Font;
                        styleItem.paraFormat = para.Range.ParagraphFormat;

                        styleItem.Bold = para.Range.Bold;
                        styleItem.BoldBi = para.Range.BoldBi;

                        //copyBorders(para.Range.Borders,styleItem.Borders);
                        styleItem.Borders = para.Range.Borders;

                        styleItem.Case = para.Range.Case;
                        styleItem.CharacterWidth = para.Range.CharacterWidth;
                        styleItem.CombineCharacters = para.Range.CombineCharacters;
                        styleItem.DisableCharacterSpaceGrid = para.Range.DisableCharacterSpaceGrid;
                        styleItem.EmphasisMark = para.Range.EmphasisMark;
                        // styleItem.End = para.Range.End;

                        styleItem.FitTextWidth = para.Range.FitTextWidth;

                        // styleItem.FormattedText = para.Range.FormattedText;

                        styleItem.GrammarChecked = para.Range.GrammarChecked;
                        styleItem.HighlightColorIndex = para.Range.HighlightColorIndex;
                        styleItem.HorizontalInVertical = para.Range.HorizontalInVertical;
                        styleItem.Italic = para.Range.Italic;
                        styleItem.ItalicBi = para.Range.ItalicBi;
                        styleItem.Kana = para.Range.Kana;
                        styleItem.LanguageDetected = para.Range.LanguageDetected;
                        styleItem.LanguageID = para.Range.LanguageID;
                        styleItem.LanguageIDFarEast = para.Range.LanguageIDFarEast;
                        styleItem.LanguageIDOther = para.Range.LanguageIDOther;
                        styleItem.NoProofing = para.Range.NoProofing;
                        styleItem.Orientation = para.Range.Orientation;
                        // styleItem.PageSetup = para.Range.PageSetup;
                        // styleItem.TextRetrievalMode = para.Range.TextRetrievalMode;
                        styleItem.TwoLinesInOne = para.Range.TwoLinesInOne;
                        styleItem.Underline = para.Range.Underline;

                        hashStyle.Add(para.OutlineLevel, styleItem); // 添加
                    }
                }
            }


            // apply
            Word.ListGallery listGallery = app.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];

            Object objIndex = 1;
            Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;

            if (templateLstLvls != null)
            {
                m_addin.m_commTools.setTemplateList(app,templateLstLvls); // 应用章节序号

                prgBar.Maximum += 18;

                // change headings font and paragraph format
                // 
                String strLinkedHeadingName = "";
                int nHeadingIndex = 0;
                for (Word.WdOutlineLevel otlvl = Word.WdOutlineLevel.wdOutlineLevel1; otlvl < Word.WdOutlineLevel.wdOutlineLevelBodyText; otlvl++)
                {
                    prgBar.Value++;
                    
                    
                    if (m_bExitUnitFormApply)
                    {
                        prgBar.Visible = false;
                        btnUnitFormExitApply.Visible = false;
                        return;
                    }

                    nHeadingIndex = (int)otlvl; // 章节级别
                    strLinkedHeadingName = templateLstLvls[nHeadingIndex].LinkedStyle;
                    styleItem = (styleDuplicateItem)hashStyle[otlvl];
                    // 
                    if (strLinkedHeadingName != null && !strLinkedHeadingName.Equals("") && styleItem != null)
                    {
//                         Word.Style objStyle = dstDoc.Styles[strLinkedHeadingName];
// 
//                         m_addin.m_commTools.copyFontStyle(styleItem.fnt, objStyle.Font);
//                         m_addin.m_commTools.copyParagraphFormat(styleItem.paraFormat,objStyle.ParagraphFormat);
                    }
                    
                }

            }

            Object objContinue = false ;
            Object objApplyTo = Word.WdListApplyTo.wdListApplyToSelection;// wdListApplyToWholeList;
            Object objDefaultBehav = Word.WdDefaultListBehavior.wdWord10ListBehavior;

            Boolean bIsInTable = false, bIsInToc = false;

            int nIgnorePages = 1;

            Word.Paragraph assignListPara = null;
            Word.Style headingStyle = null;
            int nLvl = -1;
            String strHeading = "标题 "; // 样式名称

            // 
            if (dstDoc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                dstDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView; // 切换到normal view
            }
            else
            {
                dstDoc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView; 
            }

            if (!int.TryParse(txtIgnorePages.Text, out nIgnorePages)) // 解析输入
            {
                nIgnorePages = 0;
            }

            if (chkIgnoreTextBody.Checked && !chkIgnoreHeadings.Checked)
            {
                // ArrayList arrHeadingParas = m_commonTools.getHeadingParasInScopeByNav(app, dstDoc);
                ArrayList arrHeadingParas = m_commonTools.getHeadingParas(dstDoc);

                if (arrHeadingParas.Count > 0)
                {
                    prgBar.Maximum -= paras.Count;
                    prgBar.Maximum += arrHeadingParas.Count;
                }

                foreach (Word.Paragraph dstPara in arrHeadingParas) // 遍历章节段落
                {
                    prgBar.Value++;

                    if (m_bExitUnitFormApply)
                    {
                        prgBar.Visible = false;
                        btnUnitFormExitApply.Visible = false;
                        return;
                    }

                    if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                        dstPara.Range.Text.Trim().Equals(""))
                    {
                        continue;
                    }


                    if (chkIgnoreTOC.Checked) // 忽略TOC
                    {
                        bIsInToc = false;
                        foreach (Word.TableOfContents tocs in dstDoc.TablesOfContents)
                        {
                            if (dstPara.Range.InRange(tocs.Range))
                            {
                                bIsInToc = true;
                                break;
                            }
                        }

                        if (bIsInToc)
                        {
                            continue;
                        }
                    }

                    if (chkIgnoreTable.Checked) // 忽略表格
                    {
                        bIsInTable = dstPara.Range.get_Information(Word.WdInformation.wdWithInTable);
                        if (bIsInTable)
                        {
                            continue;
                        }
                    }

                    if (chkIgnorePages.Checked && nIgnorePages > 0) // 忽略前几页
                    {
                        int nCurPage = dstPara.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                        if (nCurPage <= nIgnorePages)
                        {
                            continue;
                        }
                    }

                    if (chkIgnoreHeadings.Checked) // 忽略章节
                    {
                        if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }
                    }

                    if (chkIgnoreTextBody.Checked) // 忽略正文
                    {
                        if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }
                    }

                    // viewpoint follow
                    m_curDoc.ActiveWindow.ScrollIntoView(dstPara.Range, true); // 视角移至

                    // 
                    styleItem = (styleDuplicateItem)hashStyle[dstPara.OutlineLevel]; // 样式记录

                    // dstPara.Range.Text = dstPara.Range.Text.TrimStart();
                    if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        nLvl = (int)dstPara.OutlineLevel;

                        try
                        {
                        	headingStyle = dstDoc.Styles[strHeading + nLvl]; // 取章节样式
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show("关联的内置样式：\'" + strHeading + nLvl + "\'异常，请检查此文档的此名称内置样式是否存在！");
                            break;                        	
                        }
                        finally
                        {
                            
                        }

                        if (headingStyle != null)
                        {
                            dstPara.set_Style(headingStyle); // 设置样式
                        }
                        

                        // list levels
                        if (templateLstLvls != null && assignListPara == null)
                        {
                            assignListPara = dstPara;
                            if (assignListPara != null)
                            {
                                assignListPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                                    objContinue, objApplyTo, objDefaultBehav); // 设置章节序号
                            }
                        }

                        /*
                        if (templateLstLvls != null)
                        {
                            dstPara.Range.Select();
                            dstPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                                objContinue, objApplyTo, objDefaultBehav);
                        }
                        */


                        if (styleItem != null && templateLstLvls == null)
                        {
                            if (!chkIgnoreFont.Checked) // 忽略字体
                            {
                                m_addin.m_commTools.copyFontStyle(styleItem.fnt, dstPara.Range.Font); // 复制字体
                            }

                            if (!chkIgnoreParaFormat.Checked) // 忽略段落格式
                            {
                                m_addin.m_commTools.copyParagraphFormat(styleItem.paraFormat, dstPara.Range.ParagraphFormat); // 复制段落格式
                            }
                            // 赋值
                            dstPara.Range.Bold = styleItem.Bold;
                            dstPara.Range.BoldBi = styleItem.BoldBi;

                            //copyBorders(styleItem.Borders, dstPara.Range.Borders);
                            // dstPara.Range.Borders = styleItem.Borders;

                            dstPara.Range.Case = styleItem.Case;
                            dstPara.Range.CharacterWidth = styleItem.CharacterWidth;
                            dstPara.Range.CombineCharacters = styleItem.CombineCharacters;
                            dstPara.Range.DisableCharacterSpaceGrid = styleItem.DisableCharacterSpaceGrid;
                            dstPara.Range.EmphasisMark = styleItem.EmphasisMark;
                            // dstPara.Range.End = styleItem.End;

                            dstPara.Range.FitTextWidth = styleItem.FitTextWidth;

                            // dstPara.Range.FormattedText = styleItem.FormattedText;

                            dstPara.Range.GrammarChecked = styleItem.GrammarChecked;
                            dstPara.Range.HighlightColorIndex = styleItem.HighlightColorIndex;
                            dstPara.Range.HorizontalInVertical = styleItem.HorizontalInVertical;
                            dstPara.Range.Italic = styleItem.Italic;
                            dstPara.Range.ItalicBi = styleItem.ItalicBi;
                            //                         dstPara.Range.Kana = styleItem.Kana;
                            //                         dstPara.Range.LanguageDetected = styleItem.LanguageDetected;
                            //                         dstPara.Range.LanguageID = styleItem.LanguageID;
                            //                         dstPara.Range.LanguageIDFarEast = styleItem.LanguageIDFarEast;
                            //                         dstPara.Range.LanguageIDOther = styleItem.LanguageIDOther;
                            dstPara.Range.NoProofing = styleItem.NoProofing;
                            dstPara.Range.Orientation = styleItem.Orientation;
                            // dstPara.Range.PageSetup = styleItem.PageSetup;
                            // dstPara.Range.TextRetrievalMode = styleItem.TextRetrievalMode;
                            dstPara.Range.TwoLinesInOne = styleItem.TwoLinesInOne;
                            dstPara.Range.Underline = styleItem.Underline; // 赋值

                        }

                    }
                    else // TextBody
                    {
                        if (styleItem != null && templateLstLvls == null) // 正文
                        {
                            if (!chkIgnoreFont.Checked)
                            {
                                m_addin.m_commTools.copyFontStyle(styleItem.fnt, dstPara.Range.Font); // 复制字体
                            }

                            if (!chkIgnoreParaFormat.Checked)
                            {
                                m_addin.m_commTools.copyParagraphFormat(styleItem.paraFormat, dstPara.Range.ParagraphFormat); // 复制段落格式
                            }
                        }
                    }
                }// foreach

            }
            else
            {
                // 遍历段落s
                foreach (Word.Paragraph dstPara in paras)
                {
                    prgBar.Value++;

                    if (m_bExitUnitFormApply)
                    {
                        prgBar.Visible = false;
                        btnUnitFormExitApply.Visible = false;
                        return;
                    }

                    // 跳过正文及空段落
                    if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                        dstPara.Range.Text.Trim().Equals(""))
                    {
                        continue;
                    }


                    if (chkIgnoreTOC.Checked) // 忽略 TOC
                    {
                        bIsInToc = false;
                        foreach (Word.TableOfContents tocs in dstDoc.TablesOfContents)
                        {
                            if (dstPara.Range.InRange(tocs.Range))
                            {
                                bIsInToc = true;
                                break;
                            }
                        }

                        if (bIsInToc)
                        {
                            continue;
                        }
                    }

                    if (chkIgnoreTable.Checked) // 忽略table
                    {
                        bIsInTable = dstPara.Range.get_Information(Word.WdInformation.wdWithInTable);
                        if (bIsInTable)
                        {
                            continue;
                        }
                    }
                    // 忽略前n页
                    if (chkIgnorePages.Checked && nIgnorePages > 0)
                    {
                        int nCurPage = dstPara.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                        if (nCurPage <= nIgnorePages)
                        {
                            continue;
                        }
                    }
                    // 忽略章节
                    if (chkIgnoreHeadings.Checked)
                    {
                        if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }
                    }
                    // 忽略正文
                    if (chkIgnoreTextBody.Checked)
                    {
                        if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }
                    }

                    // viewpoint follow
                    m_curDoc.ActiveWindow.ScrollIntoView(dstPara.Range, true); // 移视角到当前位置

                    // 取此章节级别对应的样式项目
                    styleItem = (styleDuplicateItem)hashStyle[dstPara.OutlineLevel];

                    // dstPara.Range.Text = dstPara.Range.Text.TrimStart();
                    if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        nLvl = (int)dstPara.OutlineLevel;

                        try
                        {
                            headingStyle = dstDoc.Styles[strHeading + nLvl]; // 取章节样式
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show("关联的内置样式：\'" + strHeading + nLvl + "\'异常，请检查此文档的此名称内置样式是否存在！");
                            break;
                        }
                        finally
                        {

                        }

                        if (headingStyle != null)
                        {
                            dstPara.set_Style(headingStyle); // 设置
                        }


                        // list levels
                        if (templateLstLvls != null && assignListPara == null)
                        {
                            assignListPara = dstPara;

                            if (assignListPara != null)
                            {
                                assignListPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                                    objContinue, objApplyTo, objDefaultBehav); // 应用章节序号
                            }
                        }


                        // list levels
                        /*
                        if (templateLstLvls != null)
                        {
                            dstPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                                objContinue, objApplyTo, objDefaultBehav);
                        }
                        */

                        if (styleItem != null && templateLstLvls == null)
                        {
                            if (!chkIgnoreFont.Checked)
                            {
                                m_addin.m_commTools.copyFontStyle(styleItem.fnt, dstPara.Range.Font); // 复制font
                            }

                            if (!chkIgnoreParaFormat.Checked)
                            {   // 复制段落样式
                                m_addin.m_commTools.copyParagraphFormat(styleItem.paraFormat, dstPara.Range.ParagraphFormat);
                            }
                            // 赋值
                            dstPara.Range.Bold = styleItem.Bold;
                            dstPara.Range.BoldBi = styleItem.BoldBi;

                            //copyBorders(styleItem.Borders, dstPara.Range.Borders);
                            // dstPara.Range.Borders = styleItem.Borders;

                            dstPara.Range.Case = styleItem.Case;
                            dstPara.Range.CharacterWidth = styleItem.CharacterWidth;
                            dstPara.Range.CombineCharacters = styleItem.CombineCharacters;
                            dstPara.Range.DisableCharacterSpaceGrid = styleItem.DisableCharacterSpaceGrid;
                            dstPara.Range.EmphasisMark = styleItem.EmphasisMark;
                            // dstPara.Range.End = styleItem.End;

                            dstPara.Range.FitTextWidth = styleItem.FitTextWidth;

                            // dstPara.Range.FormattedText = styleItem.FormattedText;

                            dstPara.Range.GrammarChecked = styleItem.GrammarChecked;
                            dstPara.Range.HighlightColorIndex = styleItem.HighlightColorIndex;
                            dstPara.Range.HorizontalInVertical = styleItem.HorizontalInVertical;
                            dstPara.Range.Italic = styleItem.Italic;
                            dstPara.Range.ItalicBi = styleItem.ItalicBi;
                            //                         dstPara.Range.Kana = styleItem.Kana;
                            //                         dstPara.Range.LanguageDetected = styleItem.LanguageDetected;
                            //                         dstPara.Range.LanguageID = styleItem.LanguageID;
                            //                         dstPara.Range.LanguageIDFarEast = styleItem.LanguageIDFarEast;
                            //                         dstPara.Range.LanguageIDOther = styleItem.LanguageIDOther;
                            dstPara.Range.NoProofing = styleItem.NoProofing;
                            dstPara.Range.Orientation = styleItem.Orientation;
                            // dstPara.Range.PageSetup = styleItem.PageSetup;
                            // dstPara.Range.TextRetrievalMode = styleItem.TextRetrievalMode;
                            dstPara.Range.TwoLinesInOne = styleItem.TwoLinesInOne;
                            dstPara.Range.Underline = styleItem.Underline;

                        }

                    }
                    else // TextBody
                    {
                        if (styleItem != null && templateLstLvls == null)
                        {
                            if (!chkIgnoreFont.Checked)
                            {   // 复制font
                                m_addin.m_commTools.copyFontStyle(styleItem.fnt, dstPara.Range.Font);
                            }

                            if (!chkIgnoreParaFormat.Checked)
                            {   // 复制段落样式
                                m_addin.m_commTools.copyParagraphFormat(styleItem.paraFormat, dstPara.Range.ParagraphFormat);
                            }
                        }
                    }
                }// foreach
            }// 



            if (templateLstLvls != null) // 
            {
                String strBuiltInHeading = "标题 ", strItem = "";
                styleDuplicateItem sItem = null;
                nLvl = -1;
                foreach (DictionaryEntry ent in hashStyle) // 样式表遍历
                {
                    sItem = (styleDuplicateItem)ent.Value;
                    nLvl = (int)ent.Key;

                    if (nLvl == (int)Word.WdOutlineLevel.wdOutlineLevelBodyText) // 正文
                    {
                        continue;
                    }

                    prgBar.Value++;

                    strItem = strBuiltInHeading + nLvl;// 样式名

                    try
                    {
                        headingStyle = dstDoc.Styles[strItem]; // 取样式
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("关联的内置样式：\'" + strItem + "\'异常，请检查此文档的此名称内置样式是否存在！");
                        break;
                    }
                    finally
                    {

                    }

                    if (headingStyle != null)
                    {
                        if (!chkIgnoreFont.Checked)
                        {   // 复制font
                            m_addin.m_commTools.copyFontStyle(sItem.fnt, headingStyle.Font);
                        }

                        if (!chkIgnoreParaFormat.Checked)
                        {   // 复制段落样式
                            m_addin.m_commTools.copyParagraphFormat(sItem.paraFormat, headingStyle.ParagraphFormat);
                        }
                    }
                }
            }

            // 恢复view
            if (dstDoc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                dstDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView;
            }
            else
            {
                dstDoc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            }


            prgBar.Visible = false;
            btnUnitFormExitApply.Visible = false;

            dstSel.Start = nOStart; // 恢复视角到初始位置
            dstSel.End = nOEnd;
            // sel.Range.Select();
            dstSel.Range.GoTo();
            dstDoc.ActiveWindow.ScrollIntoView(dstSel.Range); // 移视角到原位置


            Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
            m_addin.RemoveTaskPane(srcDoc);
            srcDoc.Close(objSave); // 关闭

            return;
        }

        private void btnStyleApply_Click(object sender, EventArgs e)
        {
            String strDoc = txtBoxStyleFile.Text;

            if (strDoc == null || strDoc.Trim().Equals(""))
            {
                MessageBox.Show("请选择样式文档","错误");
                return;
            }

            int nRet = 0;
            if (!int.TryParse(txtIgnorePages.Text, out nRet))
            {
                MessageBox.Show("页数必须是整数");
                return;
            }

            if (MessageBox.Show("确认应用样式？建议先备份","注意",MessageBoxButtons.YesNo) == DialogResult.No)
            {
                return;
            }

            Word.Application app = m_addin.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            progressBarStyle.Left = txtBoxStyleFile.Left;
            progressBarStyle.Top = txtBoxStyleFile.Top;
            progressBarStyle.Height = txtBoxStyleFile.Height;
            progressBarStyle.Width = txtBoxStyleFile.Width;

            Boolean bAllDoc = radioBtnStyleAllDoc.Checked;

            m_bExitUnitFormApply = false;

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("样式文档");
            }

            // 应用样式
            applyStyle2Doc(strDoc, ref dstDoc, progressBarStyle, bAllDoc);

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }


            m_bExitUnitFormApply = false;


            String strRetMsg = "";
            nRet = m_addin.addUniformStyleHistoryStyleDocs(strDoc,ref strRetMsg); // 加入到历史列表中

            if (nRet == 0)
            {
//                 String strFileName = "", strPath = "", strItem = "";
// 
//                 strFileName = Path.GetFileName(strDoc);
//                 strPath = Path.GetDirectoryName(strDoc);
// 
//                 strItem = strFileName + "," + strPath;
// 
//                 lstUnitedStyleHistoryDoc.Items.Insert(0,strItem);
                // 历史文档列表处理，保持最大数以内
                while(lstUnitedStyleHistoryDoc.Items.Count > m_addin.m_nMaxUniformStyleHistoryStyleDocs)
                {
                    lstUnitedStyleHistoryDoc.Items.RemoveAt(lstUnitedStyleHistoryDoc.Items.Count - 1);
                    // m_addin.removeHeadingSnScheme();
                }
            }

            return;
        }

        private void applyShareLibStyle2CurDoc()
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            TreeNode selNode = tvShareLib.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中某一节点");
                return;
            }

            if (selNode.FullPath.StartsWith("我的电脑"))
            {
                if (selNode.Level == 0)
                {
                    MessageBox.Show("请选中子节点");
                    return;
                }

                String strFullPath = selNode.FullPath.Replace("我的电脑\\", "");

                if (!String.IsNullOrWhiteSpace(strFullPath))
                {
                    Boolean bIsSupport = m_addin.IsWordDocFileFormat(strFullPath);

                    if (!bIsSupport)
                    {
                        MessageBox.Show("不支持的文件类型");
                        return;
                    }

                    if (MessageBox.Show("确认应用样式到当前文件？建议先备份", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
                    {
                        return;
                    }

                    //Word.Application app = m_addin.Application;
                    //Word.Application app = Globals.ThisAddIn.Application;
                    Word.Document dstDoc = null;

                    try
                    {
                        dstDoc = app.ActiveDocument;
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("无活动文档，不能应用");
                        return;
                    }
                    finally
                    {
                    }
			
//                     prgBarLib.Left = txtShareKeyWord.Left;
//                     prgBarLib.Top = txtShareKeyWord.Top;
//                     prgBarLib.Height = txtShareKeyWord.Height;
//                     prgBarLib.Width = txtShareKeyWord.Width;

                    prgBarLib.Left = txtShareName.Left;
                    prgBarLib.Top = txtShareName.Top;
                    prgBarLib.Height = txtShareName.Height;
                    prgBarLib.Width = txtShareName.Width;

                    // 应用样式到文档
                    applyStyle2Doc(strFullPath, ref dstDoc, prgBarLib, false);
                }

                return;
            }


            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            if (selNode.Level == 0)
            {
                MessageBox.Show("请选中子节点");
                return;
            }

            // String strTag = (String)selNode.Tag;
            ShareContributorOper.TypeNode ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

            if (ndTag == null)
            {
                MessageBox.Show("没有特定信息");
                return;
            }

            String strType = null;

            if (ndTag != null)
            {
                // strType = strTag.Substring(0, 1);
                strType = ndTag.type;
            }

            if (strType == null || strType.Equals("1") || strType.Equals("2"))
            {
                MessageBox.Show("请选择文件节点");
                return;
            }

            String strFileId = ndTag.id;// strTag.Substring(1);

            String strFileName = selNode.Text;


            Boolean bSupport = m_addin.IsWordDocFileFormat(strFileName);

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }


            int nRet = 0;
            String strLocFileUrl = "";
            nRet = m_scOper.downloadFile(m_addin.m_strLoginedUser,strFileId, ref strLocFileUrl); // down load file

            if (nRet == 0)
            {
                if (strLocFileUrl == null || String.IsNullOrWhiteSpace(strLocFileUrl))
                {
                    MessageBox.Show("请选择样式文档", "错误");
                    return;
                }

                if (MessageBox.Show("确认应用样式到当前文件？建议先备份", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
                {
                    return;
                }

                //Word.Application app = Globals.ThisAddIn.Application;
                Word.Document dstDoc = null;

                try
                {
                    dstDoc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

                prgBarLib.Left = txtShareName.Left;
                prgBarLib.Top = txtShareName.Top;
                prgBarLib.Height = txtShareName.Height;
                prgBarLib.Width = txtShareName.Width;

                /*
                prgBarLib.Left = txtShareKeyWord.Left;
                prgBarLib.Top = txtShareKeyWord.Top;
                prgBarLib.Height = txtShareKeyWord.Height;
                prgBarLib.Width = txtShareKeyWord.Width;
                 *
                 */
                // 应用样式到文档
                applyStyle2Doc(strLocFileUrl, ref dstDoc, prgBarLib, false);
            }

            return;
        }


        private void radioBtnStyleSelection_Click(object sender, EventArgs e)
        {
            radioBtnStyleAllDoc.Checked = false;
            radioBtnStyleSelection.Checked = true;
        }

        private void radioBtnStyleAllDoc_Click(object sender, EventArgs e)
        {
            radioBtnStyleSelection.Checked = false;
            radioBtnStyleAllDoc.Checked = true;
        }


        private Hashtable m_cntListDocHash = new Hashtable();
        private Hashtable m_cntListContentControls = new Hashtable();


        private void CntListAddDoc(String strDoc)
        {
            if (m_cntListDocHash.Count > 5)
            {
                MessageBox.Show("同时打开文档数过多，请关闭部分文档后再添加","注意");
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);

            Boolean bSupport = m_addin.IsWordDocFileFormat(strDoc);

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }
            
            // add into treeview
            // 
            txtBoxCntListFile.Text = strDoc;

            // create a copy
            String strTmpDocFile = CopyTmpDocFile(strDoc);

            if (strTmpDocFile == null || !File.Exists(strTmpDocFile))
            {
                MessageBox.Show("复制临时文件失败");
                return;
            }

            // open this copy
            Word.Application app = m_addin.Application;

            Object sDocLoc = strTmpDocFile;
            Object nothing = System.Reflection.Missing.Value;
            Object filePath = strTmpDocFile;
            Object visible = false;
            Object objReadOnly = true;

            // 打开文档
            Word.Document srcDoc = null;
            srcDoc = app.Documents.Open(ref filePath, ref nothing,
                                      ref objReadOnly, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing,
                                      ref nothing, ref visible,
                                      ref nothing, ref nothing,
                                      ref nothing, ref nothing);

            if (srcDoc == null)
            {
                MessageBox.Show("打开文档失败");
                return;
            }

            Hashtable hashContentControls = new Hashtable();
            ArrayList arrContentControls = new ArrayList();

            foreach (Word.Section sec in srcDoc.Sections) // 遍历节
            {
                foreach (Word.HeaderFooter hd in sec.Headers) // 遍历页眉
                {
                    foreach (Word.ContentControl cnt in hd.Range.ContentControls) // 遍历内容控件
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title,cnt); // 记录
                            arrContentControls.Add(cnt);
                        }
                    }

                    foreach (Word.Shape shp in hd.Shapes) // 遍历shapes
                    {
                        if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 遍历控件
                            {
                                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                                {
                                    hashContentControls.Add(cnt.Title, cnt); // 添加
                                    arrContentControls.Add(cnt);
                                }
                            }
                        }
                    }

                }
                // 
                foreach (Word.HeaderFooter ft in sec.Footers) // 遍历页脚
                {
                    foreach (Word.ContentControl cnt in ft.Range.ContentControls) // 遍历内容控件
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title, cnt); // 添加
                            arrContentControls.Add(cnt);
                        }
                    }

                    foreach (Word.Shape shp in ft.Shapes) // 遍历shapes
                    {
                        if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 内容控件
                            {
                                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                                {
                                    hashContentControls.Add(cnt.Title, cnt); // 记录
                                    arrContentControls.Add(cnt);
                                }
                            }
                        }
                    }

                }

            }

            foreach (Word.ContentControl cnt in srcDoc.ContentControls) // 遍历文档的内容控件
            {
                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                {
                    hashContentControls.Add(cnt.Title, cnt); // 记录
                    arrContentControls.Add(cnt);
                }
            }

            foreach (Word.Shape shp in srcDoc.Shapes) // 遍历 shapes
            {
                if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                {
                    foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 遍历内容控件
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title, cnt); // 记录
                            arrContentControls.Add(cnt);
                        }
                    }
                }
            }

            progBarCntList.Left = txtBoxCntListFile.Left;
            progBarCntList.Top = txtBoxCntListFile.Top;
            progBarCntList.Width = txtBoxCntListFile.Width;
            progBarCntList.Height = txtBoxCntListFile.Height;

            progBarCntList.Minimum = 0;
            // progBarCntList.Maximum = srcDoc.Paragraphs.Count + hashContentControls.Count;
            progBarCntList.Maximum = hashContentControls.Count;
            progBarCntList.Value = 0;

            progBarCntList.Visible = true;

            const UInt16 uMaxLength = 18;
            UInt16 uLen = 0;

            TreeNode cntNode = new TreeNode("内容块");
            String strText = "";
            int i = 0;

            // 遍历
            foreach (Word.ContentControl cnt in arrContentControls)
            {
                progBarCntList.Value++;

                // 
                // cnt.ParentContentControl

                strText = cnt.Title;
                if (strText.Trim().Equals(""))
                {
                    strText = cnt.Tag;
                }
                else
                {
                    if (!m_cntListContentControls.Contains(strText)) // 查找相同名称
                    {
                        m_cntListContentControls.Add(strText, cnt);
                    }
                }

                if (strText.Trim().Equals(""))
                {
                    uLen = (UInt16)Math.Min(cnt.Range.Text.Length, uMaxLength);
                    strText = cnt.Range.Text.Substring(0, uLen); // 名称摘要

                    strText.Replace(Environment.NewLine, "");
                    i++;
                    if (strText.Trim().Equals(""))
                    {
                        strText = "内容块" + i;
                    }

                    if (cnt.Range.Text.Length > uLen)
                    {
                        strText += "...";
                    }

                }

                TreeNode nd = new TreeNode(strText); // 新建节点
                nd.ImageIndex = nd.SelectedImageIndex = 13; // icon index
                nd.Tag = cnt;

                cntNode.Nodes.Add(nd); // 添加到树节点下

            }

            /*
            TreeNode chapterNode = new TreeNode("章节");

            TreeNode preNode = chapterNode;

            String strItem = "", strPrefix = "";
            
            i = 0;
            // 章节
            foreach (Word.Paragraph para in srcDoc.Paragraphs) // 遍历段落
            {
                progBarCntList.Value++;

                if (!para.Range.ListFormat.ListString.Equals(""))
                {
                    strPrefix = para.Range.ListFormat.ListString;
                }
                else
                {
                    strPrefix = "";
                }

                uLen = (UInt16)Math.Min(para.Range.Text.Length, uMaxLength);
                strItem = strPrefix + para.Range.Text.Substring(0, uLen); // 名称摘要
                i++;
                strItem.Replace(Environment.NewLine, "");

                if (strItem.Trim().Equals(""))
                {
                    strItem = "段落" + i;
                }

                if (para.Range.Text.Length > uLen)
                {
                    strItem += "...";
                }

                TreeNode newNode = null;
                switch (para.OutlineLevel) // 构建章节结构
                {
                    case Word.WdOutlineLevel.wdOutlineLevel1:
                        newNode = new TreeNode(strItem);
                        newNode.Name = strItem;
                        newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel;
                        newNode.Tag = para;

                        chapterNode.Nodes.Add(newNode);
                        preNode = newNode;
                        break;

                    case Word.WdOutlineLevel.wdOutlineLevel2:
                    case Word.WdOutlineLevel.wdOutlineLevel3:
                    case Word.WdOutlineLevel.wdOutlineLevel4:
                    case Word.WdOutlineLevel.wdOutlineLevel5:
                    case Word.WdOutlineLevel.wdOutlineLevel6:
                    case Word.WdOutlineLevel.wdOutlineLevel7:
                    case Word.WdOutlineLevel.wdOutlineLevel8:
                    case Word.WdOutlineLevel.wdOutlineLevel9:
                    case Word.WdOutlineLevel.wdOutlineLevelBodyText:
                        if (para.Range.Start == para.Range.End - 1)
                        {
                            // how to handle this kind of situation?
                            continue;
                        }

                        while (preNode != chapterNode)
                        {
                            Word.Paragraph prePara = (Word.Paragraph)preNode.Tag;
                            if ((int)para.OutlineLevel - (int)prePara.OutlineLevel == 1)
                            {
                                break;
                            }
                            else if ((int)para.OutlineLevel - (int)prePara.OutlineLevel > 0)
                            {
                                break;
                            }
                            preNode = preNode.Parent;
                        }
                        newNode = new TreeNode(strItem);
                        newNode.Name = strItem;
                        newNode.ImageIndex = newNode.SelectedImageIndex = (int)para.OutlineLevel;
                        newNode.Tag = para;
                        preNode.Nodes.Add(newNode);
                        preNode = newNode;
                        break;

                }// switch
            }
            */
            // 
            progBarCntList.Visible = false;

            String strFileName = Path.GetFileNameWithoutExtension(strDoc);
            TreeNode trNodeNewDoc = new TreeNode(strFileName);
            trNodeNewDoc.ImageIndex = trNodeNewDoc.SelectedImageIndex = 0;

            // trNodeNewDoc.Tag = strTmpDocFile;
            trNodeNewDoc.Tag = strDoc;

            //trNodeNewDoc.Nodes.Add(chapterNode); // 添加
            trNodeNewDoc.Nodes.Add(cntNode); // 添加到树中

            trvCntList.Nodes.Add(trNodeNewDoc);
            trNodeNewDoc.ExpandAll(); // 展开
            trvCntList.SelectedNode = trNodeNewDoc;

            m_cntListDocHash.Add(strDoc, srcDoc); // ??

            return;
        }

        
        private void btnCntListAddDoc_Click(object sender, EventArgs e)
        {
            if (m_cntListDocHash.Count > 5)
            {
                MessageBox.Show("同时打开文档数过多，请关闭部分文档后再添加","注意");
                return;
            }

            String strTitle = "选择内容文档";
            String strDoc = OpenFileDialog(strTitle, Settings.Default.strFavDir/*m_strInitDir*/);

            if (strDoc == null)
            {
                return;
            }

            m_strInitDir = Path.GetDirectoryName(strDoc);
            Settings.Default.strFavDir = m_strInitDir;
            //Settings.Default.Save();

            CntListAddDoc(strDoc); // 内容控件到文档

            return;
        }



        private void btnCntListRemove_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvCntList.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中要删除的文档的任一节点","注意");
                return;
            }

            TreeNode docNode = selNode;

            while(docNode.Level != 0)
            {
                docNode = docNode.Parent;
            }

            String strDoc = (String)docNode.Tag;

            if (strDoc != null)
            {
                Word.Document doc = (Word.Document)m_cntListDocHash[strDoc];

                String strText = "";

                foreach (Word.Section sec in doc.Sections) // 遍历节
                {
                    foreach (Word.HeaderFooter hd in sec.Headers) // 遍历页眉
                    {
                        foreach (Word.ContentControl cnt in hd.Range.ContentControls) // 页眉的内容控件
                        {
                            strText = cnt.Title;
                            if (!strText.Trim().Equals(""))
                            {
                                m_cntListContentControls.Remove(strText); // 删除
                            }
                        }

                        foreach (Word.Shape shp in hd.Shapes) // 遍历shapes
                        {
                            if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                            {
                                foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 内容控件
                                {
                                    strText = cnt.Title;
                                    if (!strText.Trim().Equals(""))
                                    {
                                        m_cntListContentControls.Remove(strText); // 删除
                                    }
                                }
                            }
                        }

                    }
                    // 
                    foreach (Word.HeaderFooter ft in sec.Footers) // 遍历页脚
                    {
                        foreach (Word.ContentControl cnt in ft.Range.ContentControls) // 内容控件
                        {
                            strText = cnt.Title;
                            if (!strText.Trim().Equals(""))
                            {
                                m_cntListContentControls.Remove(strText); // 删除
                            }
                        }

                        foreach (Word.Shape shp in ft.Shapes) // 页脚的shapes
                        {
                            if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                            {
                                foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 内容控件
                                {
                                    strText = cnt.Title;
                                    if (!strText.Trim().Equals(""))
                                    {
                                        m_cntListContentControls.Remove(strText); // 删除
                                    }
                                }
                            }
                        }

                    }

                }

                foreach (Word.Shape shp in doc.Shapes) // 遍历文档的shapes
                {
                    if (shp.Type == MsoShapeType.msoTextBox) // 特定类型
                    {
                        foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls) // 内容控件
                        {
                            strText = cnt.Title;
                            if (!strText.Trim().Equals(""))
                            {
                                m_cntListContentControls.Remove(strText); // 删除
                            }
                        }
                    }
                }

                foreach(Word.ContentControl cnt in doc.ContentControls ) // 全文的内容控件
                {
                    strText = cnt.Title;
                    if (!strText.Trim().Equals(""))
                    {
                        m_cntListContentControls.Remove(strText); // 删除
                    }
                }

                Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
                m_addin.RemoveTaskPane(doc);
                doc.Close(ref objSave); // 关闭

                docNode.Remove(); // 删除

                m_cntListDocHash.Remove(strDoc); // 删除
            }

            return;
        }
        /// <summary>
        /// 引用内容子节点
        /// </summary>
        /// <param name="curNode"></param>
        /// <param name="sel"></param>
        private void refChildrendCntList(TreeNode curNode, Word.Selection sel)
        {
            foreach(TreeNode nd in curNode.Nodes) // 遍历树节点
            {
                refChildrendCntList(nd, sel); // 递归

                if (nd.Tag is Word.Paragraph) // 若是段落
                {
                    Word.Paragraph para = (Word.Paragraph)nd.Tag;

                    para.Range.Copy(); // copy
                    sel.Range.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 复制
                }
                else if (nd.Tag is Word.ContentControl) // 内容控件
                {
                    Word.ContentControl cnt = (Word.ContentControl)nd.Tag;

                    cnt.Copy();
                    sel.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 粘贴

                    // cnt.Range.Copy(); // copy
                    // sel.Range.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 复制
                }

            }

            return;
        }

        private void btnCntListRef_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (app.Documents.Count == 0 || curDoc == null)
            {
                MessageBox.Show("无打开的当前文档", "注意");
                return;
            }
            
            TreeNode selNode = trvCntList.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中要引用的节点", "注意");
                return;
            }

            refChildrendCntList(selNode, sel); // 遍历子内容节点

            if (selNode.Tag is Word.Paragraph)
            {
                Word.Paragraph para = (Word.Paragraph)selNode.Tag;

                para.Range.Copy(); // 复制
                sel.Range.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 粘贴
            }
            else if (selNode.Tag is Word.ContentControl)
            {
                Word.ContentControl cnt = (Word.ContentControl)selNode.Tag;

                cnt.Copy();
                sel.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 粘贴

                // cnt.Range.Copy();// 复制
                // sel.Range.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 粘贴
                // 

            }

            return;
        }

        private void btnCntListCover_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (app.Documents.Count == 0 || curDoc == null)
            {
                MessageBox.Show("无打开的当前文档", "注意");
                return;
            }

            if (m_cntListDocHash.Count == 0)
            {
                MessageBox.Show("无打开的内容复用文档", "注意");
                return;
            }

            if(DialogResult.No == MessageBox.Show("确认进行同名内容块替换？", "注意", MessageBoxButtons.YesNo))
            {
                return;
            }
            //取代同名称内容控件
            replaceSameTitleContent(m_cntListContentControls, curDoc);

            return;
        }


        private int replaceSameTitleContent(Hashtable hashSrcCnt, Word.Document dstDoc)
        {
            int nRet = 0;
            String strText = "";

            Word.WdViewType oViewType = dstDoc.ActiveWindow.View.Type;
            
            Hashtable hashContentControls = new Hashtable();
            ArrayList arrContentCtrols = new ArrayList();

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("内容复用");
            }


            // 遍历节、页眉、shape、正文等的内容控件
            foreach (Word.Section sec in dstDoc.Sections)
            {
                foreach (Word.HeaderFooter hd in sec.Headers)
                {
                    foreach (Word.ContentControl cnt in hd.Range.ContentControls)
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title, cnt);
                            arrContentCtrols.Add(cnt);
                        }
                    }

                    foreach (Word.Shape shp in hd.Shapes)
                    {
                        if (shp.Type == MsoShapeType.msoTextBox)
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls)
                            {
                                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                                {
                                    hashContentControls.Add(cnt.Title, cnt);
                                    arrContentCtrols.Add(cnt);
                                }
                            }
                        }
                    }

                }
                // 
                foreach (Word.HeaderFooter ft in sec.Footers)
                {
                    foreach (Word.ContentControl cnt in ft.Range.ContentControls)
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title, cnt);
                            arrContentCtrols.Add(cnt);
                        }
                    }

                    foreach (Word.Shape shp in ft.Shapes)
                    {
                        if (shp.Type == MsoShapeType.msoTextBox)
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls)
                            {
                                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                                {
                                    hashContentControls.Add(cnt.Title, cnt);
                                    arrContentCtrols.Add(cnt);
                                }
                            }
                        }
                    }

                }

            }

            foreach (Word.ContentControl cnt in dstDoc.ContentControls)
            {
                if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                {
                    hashContentControls.Add(cnt.Title, cnt);
                    arrContentCtrols.Add(cnt);
                }
            }

            foreach (Word.Shape shp in dstDoc.Shapes)
            {
                if (shp.Type == MsoShapeType.msoTextBox)
                {
                    foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls)
                    {
                        if (!cnt.Title.Trim().Equals("") && !hashContentControls.Contains(cnt.Title))
                        {
                            hashContentControls.Add(cnt.Title, cnt);
                            arrContentCtrols.Add(cnt);
                        }
                    }
                }
            }


            Word.ContentControl dstCnt = null;
            Object objIndex = 0;
            Boolean bVal1 = false, bVal2 = false;
            Word.Selection dstSel = dstDoc.ActiveWindow.Selection;

            Word.Font fnt = new Word.Font();
            Word.ParagraphFormat paraFormat = new Word.ParagraphFormat();

            for (int i = 0; i < arrContentCtrols.Count; i++) // 遍历内容控件
            {
                dstCnt = (Word.ContentControl)arrContentCtrols[i]; // 转换
                strText = dstCnt.Title;
                if (!strText.Trim().Equals(""))
                {
                    Word.ContentControl srcCnt = (Word.ContentControl)hashSrcCnt[strText];

                    if (srcCnt != null)
                    {
                        srcCnt.Range.Copy(); // 内容复制

                        bVal1 = dstCnt.LockContents;
                        bVal2 = dstCnt.LockContentControl;
                        dstCnt.LockContents = false;
                        dstCnt.LockContentControl = false;

                        dstCnt.Range.Select(); // 选择
                        m_addin.m_commTools.copyFontStyle(dstCnt.Range.Font, fnt); // 复制font
                        m_addin.m_commTools.copyParagraphFormat(dstCnt.Range.ParagraphFormat, paraFormat); // 复制段落样式

                        dstCnt.Range.Text = "";

                        dstCnt.Range.Paste(); // 粘贴
                        dstCnt.Range.Select(); // 选中
                        m_addin.m_commTools.copyFontStyle(fnt, dstCnt.Range.Font); // 复制font
                        m_addin.m_commTools.copyParagraphFormat(paraFormat, dstCnt.Range.ParagraphFormat); // 复制段落样式

                        dstCnt.LockContents = bVal1;
                        dstCnt.LockContentControl = bVal2;

                        foreach (Word.ContentControl childCnt in dstCnt.Range.ContentControls) // 遍历内容控件
                        {
                            if (childCnt.Title.Equals(dstCnt.Title))
                            {
                                dstCnt.Delete(false); // 删除
                                break;
                            }
                        }
                    }
                }

            }// foreach

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            dstDoc.ActiveWindow.View.Type = oViewType;
            // dstDoc.ActiveWindow.ActivePane.View.SeekView = Word.WdSeekView.wdSeekMainDocument;

            return nRet;
        }


        private int replaceSameTitleContent(Word.Document srcDoc, Word.Document dstDoc)
        {
            int nRet = 0;

            Hashtable hashSrcCnt = new Hashtable();
            // 遍历节、页眉、页脚、shape、正文区的内容控件
            foreach (Word.Section sec in srcDoc.Sections)
            {
                foreach (Word.HeaderFooter hd in sec.Headers)
                {
                    foreach (Word.ContentControl cnt in hd.Range.ContentControls)
                    {
                        if (!cnt.Title.Trim().Equals(""))
                        {
                            if (!hashSrcCnt.Contains(cnt.Title))
                            {
                                hashSrcCnt.Add(cnt.Title, cnt);
                            }
                        }
                    }

                    foreach (Word.Shape shp in hd.Shapes)
                    {
                        if (shp.Type == MsoShapeType.msoTextBox)
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls)
                            {
                                if (!cnt.Title.Trim().Equals(""))
                                {
                                    if (!hashSrcCnt.Contains(cnt.Title))
                                    {
                                        hashSrcCnt.Add(cnt.Title, cnt);
                                    }
                                }
                            }
                        }
                    }


                }
                // 
                foreach (Word.HeaderFooter ft in sec.Footers)
                {
                    foreach (Word.ContentControl cnt in ft.Range.ContentControls)
                    {
                        if (!cnt.Title.Trim().Equals(""))
                        {
                            if (!hashSrcCnt.Contains(cnt.Title))
                            {
                                hashSrcCnt.Add(cnt.Title, cnt);
                            }
                        }
                    }

                    foreach (Word.Shape shp in ft.Shapes)
                    {
                        if (shp.Type == MsoShapeType.msoTextBox)
                        {
                            foreach (Word.ContentControl cnt in shp.TextFrame.TextRange.ContentControls)
                            {
                                if (!cnt.Title.Trim().Equals(""))
                                {
                                    if (!hashSrcCnt.Contains(cnt.Title))
                                    {
                                        hashSrcCnt.Add(cnt.Title, cnt);
                                    }
                                }
                            }
                        }
                    }


                }

            }

            foreach (Word.ContentControl srcCnt in srcDoc.ContentControls)
            {
                if (!srcCnt.Title.Trim().Equals(""))
                {
                    if (!hashSrcCnt.Contains(srcCnt.Title))
                    {
                        hashSrcCnt.Add(srcCnt.Title, srcCnt);
                    }
                }
            }

            foreach (Word.Shape shp in srcDoc.Shapes)
            {
                if (shp.Type == MsoShapeType.msoTextBox)
                {
                    foreach (Word.ContentControl srcCnt in shp.TextFrame.TextRange.ContentControls)
                    {
                        if (!srcCnt.Title.Trim().Equals(""))
                        {
                            if (!hashSrcCnt.Contains(srcCnt.Title))
                            {
                                hashSrcCnt.Add(srcCnt.Title, srcCnt);
                            }
                        }
                    }
                }
            }
            // 内容复用
            nRet = replaceSameTitleContent(hashSrcCnt, dstDoc);

            return nRet;
        }


        private void btnCntListCollapse_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvCntList.SelectedNode;

            if (selNode == null)
            {
                return;
            }

            selNode.Collapse(true); // 折叠

        }

        private void btnCntListExpand_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvCntList.SelectedNode;

            if (selNode == null)
            {
                return;
            }

            selNode.ExpandAll(); // 展开
        }

        private void menuItemApplyStyle_Click(object sender, EventArgs e)
        {
            applyShareLibStyle2CurDoc(); // 应用文库样式到当前文档
        }

        private void menuItemCntReuse_Click(object sender, EventArgs e)
        {
            if (m_addin.Application.Documents.Count == 0)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            if (!m_addin.m_bLoginedStatus)
            {
                MessageBox.Show("请先登录");
                return;
                // m_addin.login(doc);
                // if(!m_addin.m_bLoginedStatus)
                //     return;

            }

            TreeNode selNode = tvShareLib.SelectedNode;

            ShareContributorOper.TypeNode ndTag = (ShareContributorOper.TypeNode)selNode.Tag;

            if (ndTag == null)
            {
                MessageBox.Show("没有特定信息");
                return;
            }

            String strType = null;

            if (ndTag != null)
            {
                // strType = strTag.Substring(0, 1);
                strType = ndTag.type;
            }

            if (strType == null || strType.Equals("1") || strType.Equals("2"))
            {
                MessageBox.Show("请选择文件节点");
                return;
            }

            String strFileId = ndTag.id;// strTag.Substring(1);

            String strFileName = selNode.Text;

            Boolean bSupport = m_addin.IsWordDocFileFormat(strFileName);

            if (!bSupport)
            {
                MessageBox.Show("不支持的文件类型");
                return;
            }

            int nRet = 0;
            String strLocFileUrl = "";
            nRet = m_scOper.downloadFile(m_addin.m_strLoginedUser,strFileId, ref strLocFileUrl); // 下载文件

            if (nRet == 0)
            {
                if (strLocFileUrl == null || strLocFileUrl.Trim().Equals(""))
                {
                    MessageBox.Show("请选择文档", "错误");
                    return;
                }

                CntListAddDoc(strLocFileUrl); // 内容控件到当前文档
                tabCtrl.SelectedTab = tabPageCntList;// 跳转到页面
            }
        }


        public void cloneShareLibTree()
        {
            TreeNodeCollection trvColl = m_addin.getCommonShareLibTree();// 获取文库树节点

            if (trvColl == null || trvColl.Count == 0)
            {
                RefreshShareLibByPermission(); // 根据权限刷新文库树节点结构
                return;
            }

            tvShareLib.Nodes.Clear(); // 清空

            foreach (TreeNode nd in trvColl) // 遍历
            {
                tvShareLib.Nodes.Add((TreeNode)nd.Clone()); // 新建clone节点
            }

            return;
        }



        public void recordCommonShareLibTree()
        {
            m_addin.recordCommonShareLibTree(tvShareLib.Nodes); // 记录nodes

            return;
        }


        public void RefreshRelsByPermission()
        {
            if (m_addin.searchPermission("tabPageRel") != 0) // 权限检查
            {
                btnRefreshRels_Click(null, null); // 刷新
            }

            return;
        }


        public void RefreshShareLibByPermission()
        {
            if (m_addin.searchPermission("tabPageShare") != 0)  // 权限检查
            {
                btnShareRefresh_Click(null, null); // 刷新
            }

            return;
        }


        public void PermissionChangeRefresh()
        {
            if (m_addin.searchPermission("tabPageRel") != 0) // 权限检查
            {
                btnRefreshRels_Click(null, null); // 刷新
            }


            if (m_addin.searchPermission("tabPageShare") != 0) // 权限检查
            {
                btnShareRefresh_Click(null, null); // 刷新
            }

            return;
        }


        private void btnRefreshRels_Click(object sender, EventArgs e)
        {
            ResetSearch(); // 重置查找

            m_tvRel.Nodes[m_strRelDefNodeName].Nodes.Clear(); // 清空
            m_tvRel.Nodes[m_strRelCalcNodeName].Nodes.Clear(); // 清空
            m_varsHash.Clear(); // 清空
            m_usedVars.Clear(); // 清空
            m_varsNetWork.Clear(); // 清空

            buildRelNetwork(); // 重建关联网络

            m_tvRel.Nodes[m_strRelDefNodeName].ExpandAll(); // 展开
            m_tvRel.Nodes[m_strRelCalcNodeName].ExpandAll(); // 展开

            return;
        }

        private void m_tvRel_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Button == MouseButtons.Right) // 右键
            {
                if(e.Node.Level == 0) // 跳过0级
                {
                    return;
                }

                NodeInfo ndInfo = (NodeInfo)e.Node.Tag;

                if (ndInfo == null)
                    return;

                if (ndInfo.objContentCtrl != null)
                {
                    Word.ContentControl cnt = (Word.ContentControl)ndInfo.objContentCtrl;

                    cnt.Range.Select(); // 选中
                    cnt.Range.GoTo(); // 跳转
                }
            }
            else if (e.Button == MouseButtons.Left) // 左键
            {
                if (e.Node != null)
                {
                    updateRelUIInfo(e.Node); // 更新UI的信息
                }
            }

            return;
        }

        /// <summary>
        /// 判断是否是关联的特征内容控件
        /// </summary>
        /// <param name="strOrigPlaceHolderText"></param>
        /// <returns></returns>
        private Boolean IsRelContentControl(String strOrigPlaceHolderText)
        {
            Hashtable hashFields = null;

            if (strOrigPlaceHolderText.StartsWith("[") && strOrigPlaceHolderText.EndsWith("]")) // 判断头尾
            {
                hashFields = ClassOfficeCommon.Decode(strOrigPlaceHolderText); // 解码
            }
            else
            {
                String strEncodedStr = "";// 解码
                strEncodedStr = ClassEncryptUtils.DESDecrypt(strOrigPlaceHolderText, m_addin.m_stryp, m_addin.m_stryv); // 解码
                // 判断特征
                if (strEncodedStr != null && strEncodedStr.StartsWith("[") && strEncodedStr.EndsWith("]"))
                {
                    hashFields = ClassOfficeCommon.Decode(strEncodedStr); // 解码
                }
                else
                {
                    return false;
                }
            }

            if (hashFields == null) // 判断
                return false;
            // 判断特定值
            if (hashFields.Contains(m_strRelTag) || hashFields.Contains(m_strRelName))
                return true;

            return false;
        }

        // 解码关联的信息
        private Boolean DecodeRelMsg(String strOrigPlaceHolderText,ref String strRelVersion,
                                     ref String strName, ref int nType, ref String strExp, 
                                     ref String strRetMsg)
        {
            Hashtable hashFields = null;

            if (strOrigPlaceHolderText != null && !strOrigPlaceHolderText.Equals(""))
            {
                // 头尾特征
                if (strOrigPlaceHolderText.StartsWith("[") && strOrigPlaceHolderText.EndsWith("]"))
                {
                    hashFields = ClassOfficeCommon.Decode(strOrigPlaceHolderText);// 解码
                }
                else
                {
                    String strEncodedStr = "";
                    strEncodedStr = ClassEncryptUtils.DESDecrypt(strOrigPlaceHolderText, m_addin.m_stryp, m_addin.m_stryv); // 解码
                    // 不符合特征
                    if (strEncodedStr == null || !(strEncodedStr.StartsWith("[") && strEncodedStr.EndsWith("]")))
                    {
                        strRetMsg = "无编码数据";
                        return false;
                    }

                    hashFields = ClassOfficeCommon.Decode(strEncodedStr); // 解码
                }
            }

            if (hashFields == null || hashFields.Count  == 0)
            {
                strRetMsg = "无编码数据";
                return false;
            }

            if (hashFields.Contains(m_strRelTag)) // 特征检查
            {
                strRelVersion = (String)hashFields[m_strRelTag]; // 取值
            }
            else
            {
                // strRelVersion = "";
                strRetMsg = "非REL";
                return false;
            }


            if (hashFields.Contains(m_strRelName)) 
            {
                strName = (String)hashFields[m_strRelName]; // 取值
            }
            else
            {
                // strValue = "";
                strRetMsg = "无名称";
                return false;
            }

            String strType = "";
            if (hashFields.Contains(m_strRelType))
            {
                strType = (String)hashFields[m_strRelType]; // 取值
            }
            else
            {
                // strType = "";
                strRetMsg = "无类型";
                return false;
            }

            if (!int.TryParse(strType,out nType)) // 转换
            {
                strRetMsg = "类型非数字";
                return false;
            }

            if (nType <= 0)
            {
                strRetMsg = "类型错误";
                return false;
            }


            if (hashFields.Contains(m_strRelExp))
            {
                strExp = (String)hashFields[m_strRelExp]; // 取值
            }
            else
            {
                strExp = "";
            }

            return true;
        }

        /// <summary>
        /// 添加编码关联信息
        /// </summary>
        /// <param name="strOrigPlaceHolderText"></param>
        /// <param name="strValue"></param>
        /// <param name="nType"></param>
        /// <param name="strExp"></param>
        /// <returns></returns>
        private String AddEncodeRelMsg(String strOrigPlaceHolderText, String strValue, int nType, String strExp)
        {
            String strRetPHT = "";

            Hashtable hashFields = null;
            String strEncodedStr = "";
            // 特征值
            if (strOrigPlaceHolderText != null && !strOrigPlaceHolderText.Equals(""))
            {   // 首尾特征
                if (strOrigPlaceHolderText.StartsWith("[") && strOrigPlaceHolderText.EndsWith("]"))
                {
                    hashFields = ClassOfficeCommon.Decode(strOrigPlaceHolderText);// 解码
                }
                else
                {   // 解码
                    strEncodedStr = ClassEncryptUtils.DESDecrypt(strOrigPlaceHolderText, m_addin.m_stryp, m_addin.m_stryv);
                    // 特征判断
                    if (strEncodedStr != null && strEncodedStr.StartsWith("[") && strEncodedStr.EndsWith("]"))
                    {
                        hashFields = ClassOfficeCommon.Decode(strEncodedStr);// 解码
                    }
                }

            }

            if (hashFields == null)
            {
                hashFields = new Hashtable();
            }

            if (!hashFields.Contains(m_strRelTag))
            {
                hashFields[m_strRelTag] = m_strRelVersion; // 记录版本
            }
            // 赋值
            hashFields[m_strRelName] = (strValue == null)? "" : strValue;
            hashFields[m_strRelType] = Convert.ToString(nType);
            hashFields[m_strRelExp] = (strExp == null) ? "" : strExp;

            strRetPHT = ClassOfficeCommon.Encode(hashFields); // 编码

            strEncodedStr = ClassEncryptUtils.DESEncrypt(strRetPHT, m_addin.m_stryp, m_addin.m_stryv);// 编码
            return strEncodedStr;
        }


        TreeNode m_testNode = new TreeNode();
        int m_testIndex = 1;


        /// <summary>
        /// 数据表转到EXCEL表
        /// </summary>
        /// <param name="tmpDataTable"></param>
        /// <param name="strFileName"></param>
        private void DataTabletoExcel(System.Data.DataTable tmpDataTable, string strFileName)
        {
            if (tmpDataTable == null)
                return;
            int rowNum = tmpDataTable.Rows.Count;
            int columnNum = tmpDataTable.Columns.Count;
            int rowIndex = 1;
            int columnIndex = 0;
            Excel.Application xlApp = new Excel.Application();//Excel.ApplicationClass();
            xlApp.DefaultFilePath = "";
            xlApp.DisplayAlerts = true;
            xlApp.SheetsInNewWorkbook = 1;
            Excel.Workbook xlBook = xlApp.Workbooks.Add(true);
            //将DataTable的列名导入Excel表第一行
            foreach (DataColumn dc in tmpDataTable.Columns)
            {
                columnIndex++;
                xlApp.Cells[rowIndex, columnIndex] = dc.ColumnName;
            }
            //将DataTable中的数据导入Excel中
            for (int i = 0; i < rowNum; i++)
            {
                rowIndex++;
                columnIndex = 0;
                for (int j = 0; j < columnNum; j++)
                {
                    columnIndex++;
                    xlApp.Cells[rowIndex, columnIndex] = tmpDataTable.Rows[i][j];
                }
            }

            xlBook.Saved = true;

            //xlBook.SaveCopyAs(HttpUtility.UrlDecode(strFileName, System.Text.Encoding.UTF8));
            xlBook.SaveCopyAs(strFileName);

            //Object objSave = Excel;
            xlBook.Close();

            xlApp.Quit();

            return;
        }

        // 测试代码
        private String testStringTrim(String strItem)
        {
            String strRet = strItem;

            strRet = strRet.Replace(":", "");
            strRet = strRet.Replace("：", "");
            strRet = strRet.Replace("\t", "");
            strRet = strRet.Replace(" ", "");
            strRet = strRet.Replace("\r\a", "\r\n");


            return strRet;
        }

        // 测试代码
        private void testWordTable2DataTable(Word.Document doc,String strFileName,ref DataTable tb)
        {
            // Word.Document doc = m_addin.Application.ActiveDocument;
            // Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Range docRng = doc.Range();
            docRng.TCSCConverter(Word.WdTCSCConverterDirection.wdTCSCConverterDirectionTCSC);// 繁简转化
            // Word.WdTCSCConverterDirection


            int i = 0, j = 0, nTableIndex = 0;

            String strColName = "", strRowCnt = "";

            Hashtable hashTbl = new Hashtable();
            ArrayList arrCells = new ArrayList();
            Boolean bHeadingCell = true;

            foreach (Word.Table tbl in doc.Tables)
            {
                // tbl.Range.TCSCConverter(Word.WdTCSCConverterDirection.wdTCSCConverterDirectionTCSC);

                hashTbl.Clear();
                arrCells.Clear();
                nTableIndex++;
                bHeadingCell = true;

                foreach (Word.Row rw in tbl.Rows) // 遍历表行
                {
                    if (rw.Cells.Count > 1)
                    {

                        foreach (Word.Cell cel in rw.Cells) // 遍历单元格
                        {
                            // cel.ColumnIndex
                            strColName = "";
                            strRowCnt = "";

                            if (bHeadingCell) // 标题行
                            {
                                strColName = cel.Range.Text.Replace("\r\a", "\r\n"); // 测试代码
                            }
                            else
                            {
                                strRowCnt = cel.Range.Text.Replace("\r\a", "\r\n"); // 测试代码
                            }

// 
//                             for (i = 1; i <= cel.Range.Characters.Count; i++)
//                             {
//                                 Word.Range rng = cel.Range.Characters[i];
//                                 if (i > 1 && (/*rng.Bold == 0 ||*/ rng.Text.Equals("\r\a") || rng.Text.Equals(":") || rng.Text.Equals("：")))
//                                 {
//                                     break;
//                                 }
//                             }
// 
//                             for (j = 1; j <= Math.Min(i,cel.Range.Characters.Count); j++)
//                             {
//                                 if (cel.Range.Characters[j].Text.Equals("\r\a"))
//                                 {
//                                     strColName += "\r\n";
//                                 }
//                                 else
//                                 {
//                                     strColName += cel.Range.Characters[j].Text;
//                                 }
//                             }
// 
//                             for (j = i+1; j <= cel.Range.Characters.Count; j++)
//                             {
//                                 if (cel.Range.Characters[j].Text.Equals("\r\a"))
//                                 {
//                                     strRowCnt += "\r\n";
//                                 }
//                                 else
//                                 {
//                                     strRowCnt += cel.Range.Characters[j].Text;
//                                 }
//                             }

                            strColName = testStringTrim(strColName); // 测试代码
                            strRowCnt = strRowCnt.Trim(); // 测试代码
                            // 测试代码
                            strColName = Microsoft.VisualBasic.Strings.StrConv(strColName, Microsoft.VisualBasic.VbStrConv.SimplifiedChinese);
                            strRowCnt = Microsoft.VisualBasic.Strings.StrConv(strRowCnt, Microsoft.VisualBasic.VbStrConv.SimplifiedChinese);
                            // 测试代码
                            if (!strColName.Equals(""))
                            {
                                if (tb.Columns.IndexOf(strColName) == -1)
                                {    // 测试代码
                                    DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));
                                    tb.Columns.Add(col); // 测试代码
                                }

                                hashTbl[strColName] = ""; // 测试代码
                                arrCells.Add(strColName); // 测试代码

                                //                                 if (!strRowCnt.Trim().Equals(""))
                                //                                 {
                                //                                     hashTbl[strColName] = strRowCnt;
                                //                                 }
                            }

                            String strItem = "";
                            if (cel.ColumnIndex - 1 < arrCells.Count)  // 测试代码
                            {
                                strItem = (String)arrCells[cel.ColumnIndex - 1];  // 测试代码
                            }
                            // 测试代码
                            if (!strRowCnt.Trim().Equals("") && strItem != null && !strItem.Trim().Equals(""))
                            {
                                hashTbl[strItem] = strRowCnt;  // 测试代码
                            }

                            //
                        }

                        bHeadingCell = !bHeadingCell;
                    }
                    else
                    {
                        strColName = "";
                        strRowCnt = "";

                        for (i = 1; i <= rw.Range.Characters.Count; i++)  // 测试代码
                        {
                            Word.Range rng = rw.Range.Characters[i];  // 测试代码
                            if (i > 1 && (/*rng.Bold == 0 ||*/ rng.Text.Equals("\r\a") || rng.Text.Equals(":") || rng.Text.Equals("：")))
                            {
                                break;
                            }
                        }

                        for (j = 1; j <= Math.Min(i, rw.Range.Characters.Count); j++)  // 测试代码
                        {
                            if (rw.Range.Characters[j].Text.Equals("\r\a"))  // 测试代码
                            {
                                strColName += "\r\n";
                            }
                            else
                            {
                                strColName += rw.Range.Characters[j].Text;  // 测试代码
                            }
                        }

                        // 测试代码
                        for (j = i + 1; j <= rw.Range.Characters.Count; j++)  // 测试代码
                        {
                            if (rw.Range.Characters[j].Text.Equals("\r\a"))  // 测试代码
                            {
                                strRowCnt += "\r\n";  // 测试代码
                            }
                            else
                            {
                                strRowCnt += rw.Range.Characters[j].Text;  // 测试代码
                            }
                        }

                        strColName = testStringTrim(strColName);  // 测试代码
                        strRowCnt = strRowCnt.Trim();  // 测试代码
                        // 测试代码
                        strColName = Microsoft.VisualBasic.Strings.StrConv(strColName, Microsoft.VisualBasic.VbStrConv.SimplifiedChinese);
                        strRowCnt = Microsoft.VisualBasic.Strings.StrConv(strRowCnt, Microsoft.VisualBasic.VbStrConv.SimplifiedChinese);

                        // 测试代码
                        if (!strColName.Equals(""))
                        {
                            if (tb.Columns.IndexOf(strColName) == -1)  // 测试代码
                            {
                                DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));  // 测试代码
                                tb.Columns.Add(col);  // 测试代码
                            }

                            hashTbl[strColName] = "";
                            if (!strRowCnt.Trim().Equals(""))  // 测试代码
                            {
                                hashTbl[strColName] = strRowCnt;  // 测试代码
                            }

                        }
                    }

                }// scan to determine what cols in table

                DataRow dtRow = tb.NewRow();  // 测试代码

                foreach (DictionaryEntry ent in hashTbl)  // 测试代码
                {
                    dtRow[(String)ent.Key] = (String)ent.Value;  // 测试代码
                }

                dtRow["源文件名"] = strFileName;  // 测试代码
                dtRow["表序号"] = nTableIndex.ToString();  // 测试代码

                tb.Rows.Add(dtRow);  // 测试代码
            }            

            return;
        }

        // 测试代码
        private void test4ni_mmj()
        {
//             Word.Application app = m_addin.Application;  // 测试代码
// 
//             // 
//             DataSet ds = new DataSet("WordTable2Excel");  // 测试代码
//             DataTable tb = new DataTable("tbl");  // 测试代码
// 
//             ds.Tables.Add(tb);  // 测试代码
// 
//             String strColName = "源文件名";  // 测试代码
// 
//             if (tb.Columns.IndexOf(strColName) == -1)  // 测试代码
//             {
//                 DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));  // 测试代码
//                 tb.Columns.Add(col);  // 测试代码
//             }
// 
//             strColName = "表序号";  // 测试代码
//             if (tb.Columns.IndexOf(strColName) == -1)  // 测试代码
//             {
//                 DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));  // 测试代码
//                 tb.Columns.Add(col);  // 测试代码
//             }
// 
// 
//             String strRootDir = @"E:\Work\collection\books\中医\倪海厦\8.倪海厦-《医学资料全集》\01.倪海厦-《诊疗日志》 2000例\";
//             String[] strTargetDirs = { "06倪海厦臨床醫案紀錄358例",
//                                        "02倪海厦臨床醫案2008年三月到五月",
//                                        "04倪海厦臨床醫案2008九月醫案",
//                                        "03倪海厦臨床醫案2008八月醫案"};
// 
//             // app.Documents.Add();
// 
//             Word.Document srcDoc = null;
//             // write into file
//             String strExcel = "d:/users/ni.xlsx";
// 
// 
//             foreach (String strSubDir in strTargetDirs)
//             {
//                 tb.Clear();
// 
//                 strColName = "源文件名";
// 
//                 if (tb.Columns.IndexOf(strColName) == -1)
//                 {
//                     DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));
//                     tb.Columns.Add(col);
//                 }
// 
//                 strColName = "表序号";
//                 if (tb.Columns.IndexOf(strColName) == -1)
//                 {
//                     DataColumn col = new DataColumn(strColName, System.Type.GetType("System.String"));
//                     tb.Columns.Add(col);
//                 }
// 
// 
//                 DirectoryInfo TheFolder = new DirectoryInfo(strRootDir + strSubDir);
// 
//                 //遍历文件
//                 foreach (FileInfo NextFile in TheFolder.GetFiles())
//                 {
//                     if (!(NextFile.Extension.Equals(".doc") || NextFile.Extension.Equals(".docx")))
//                     {
//                         continue;
//                     }
// 
//                     if ((NextFile.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)
//                     {
//                         continue;
//                     }
// 
//                     Object sDocLoc = NextFile.FullName;
//                     Object nothing = System.Reflection.Missing.Value;
//                     Object filePath = NextFile.FullName;
//                     Object visible = true;
// 
//                     srcDoc = app.Documents.Open(ref filePath, ref nothing,
//                                         ref nothing, ref nothing,
//                                         ref nothing, ref nothing,
//                                         ref nothing, ref nothing,
//                                         ref nothing, ref nothing,
//                                         ref nothing, ref visible,
//                                         ref nothing, ref nothing,
//                                         ref nothing, ref nothing);
// 
//                     // 
//                     testWordTable2DataTable(srcDoc, strSubDir + "\\" + NextFile.Name, ref tb);
// 
//                     Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
//                     srcDoc.Save();
//                     srcDoc.Close(objSave);
// 
//                 }
// 
//                 //
//                 strExcel = "d:/users/ni_" + strSubDir + ".xlsx";
//                 DataTabletoExcel(tb, strExcel);
// 
//             }


            //             foreach (DataTable dtTbl in ds.Tables)
            //             {
            //                 DataTabletoExcel(dtTbl,strExcel);

            /*
            foreach(DataColumn dtCol in dtTbl.Columns)
            {
                sw.Write(dtCol.ColumnName + "/");
            }

            sw.WriteLine();

            foreach (DataRow dtRow in dtTbl.Rows)
            {
                for (i = 0; i < dtRow.ItemArray.GetLength(0); i++)
                {
                    String strItem = (String)dtRow.ItemArray[i];

                    sw.Write(strItem + "/"); 
                }
                sw.WriteLine();
            }
             * */
            //            }

            //sw.Close();

            return;
        }

        /// <summary>
        /// 新建章节序号
        /// </summary>
        /// <param name="oListLvels"></param>
        private void newTemplateList(ClassListLevel[] oListLvels)
        {
            Word.Application app = m_addin.Application;
            // 自动编号 
            Word.ListGallery listGallery = app.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];

            Object objIndex = 1;
            Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;


            if (oListLvels != null)
            {
                for (int i = 1; i <= lstLvels.Count; i++) // 遍历
                {   // 赋值
                    lstLvels[i].NumberFormat = oListLvels[i - 1].NumberFormat;
                    lstLvels[i].TrailingCharacter = oListLvels[i - 1].TrailingCharacter;
                    lstLvels[i].NumberStyle = oListLvels[i - 1].NumberStyle;
                    lstLvels[i].NumberPosition = oListLvels[i - 1].NumberPosition;
                    lstLvels[i].Alignment = oListLvels[i - 1].Alignment;
                    lstLvels[i].TextPosition = oListLvels[i - 1].TextPosition;
                    lstLvels[i].TabPosition = oListLvels[i - 1].TabPosition;
                    lstLvels[i].ResetOnHigher = oListLvels[i - 1].ResetOnHigher;
                    lstLvels[i].StartAt = oListLvels[i - 1].StartAt;
                    lstLvels[i].LinkedStyle = oListLvels[i - 1].LinkedStyle;

                    if (lstLvels[i].Font != null)
                    {
                        oListLvels[i - 1].Font.copy2(lstLvels[i].Font); // 复制font
                    }
                }
            }
            else
            {
                // Word.Document doc = app.ActiveDocument;
                // Word.Selection sel = doc.ActiveWindow.Selection;
                // 按WORD中帮助对多级列表进行赋值，下同
                lstLvels[1].NumberFormat = "%1。";
                lstLvels[1].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[1].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[1].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[1].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[1].TextPosition = app.CentimetersToPoints(0.76f);
                lstLvels[1].TabPosition = 0f;
                lstLvels[1].ResetOnHigher = 0;
                lstLvels[1].StartAt = 1;
                lstLvels[1].LinkedStyle = "标题 1";

                lstLvels[2].NumberFormat = "%1。%2。";
                lstLvels[2].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[2].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[2].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[2].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[2].TextPosition = app.CentimetersToPoints(1.02f);
                lstLvels[2].TabPosition = 0f;
                lstLvels[2].ResetOnHigher = 1;
                lstLvels[2].StartAt = 1;
                lstLvels[2].LinkedStyle = "标题 2";

                lstLvels[3].NumberFormat = "%1。%2。%3";
                lstLvels[3].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[3].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[3].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[3].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[3].TextPosition = app.CentimetersToPoints(1.27f);
                lstLvels[3].TabPosition = 0f;
                lstLvels[3].ResetOnHigher = 2;
                lstLvels[3].StartAt = 1;
                lstLvels[3].LinkedStyle = "标题 3";

                lstLvels[4].NumberFormat = "%1。%2。%3。%4";
                lstLvels[4].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[4].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[4].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[4].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[4].TextPosition = app.CentimetersToPoints(1.52f);
                lstLvels[4].TabPosition = 0f;
                lstLvels[4].ResetOnHigher = 3;
                lstLvels[4].StartAt = 1;
                lstLvels[4].LinkedStyle = "标题 4";


                lstLvels[5].NumberFormat = "%1。%2。%3。%4。%5";
                lstLvels[5].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[5].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[5].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[5].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[5].TextPosition = app.CentimetersToPoints(1.78f);
                lstLvels[5].TabPosition = 0f;
                lstLvels[5].ResetOnHigher = 4;
                lstLvels[5].StartAt = 1;
                lstLvels[5].LinkedStyle = "标题 5";

                lstLvels[6].NumberFormat = "%1。%2。%3。%4。%5。%6";
                lstLvels[6].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[6].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[6].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[6].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[6].TextPosition = app.CentimetersToPoints(2.03f);
                lstLvels[6].TabPosition = 0f;
                lstLvels[6].ResetOnHigher = 5;
                lstLvels[6].StartAt = 1;
                lstLvels[6].LinkedStyle = "标题 6";

                lstLvels[7].NumberFormat = "%1。%2。%3。%4。%5。%6。%7";
                lstLvels[7].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[7].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[7].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[7].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[7].TextPosition = app.CentimetersToPoints(2.29f);
                lstLvels[7].TabPosition = 0f;
                lstLvels[7].ResetOnHigher = 6;
                lstLvels[7].StartAt = 1;
                lstLvels[7].LinkedStyle = "标题 7";

                lstLvels[8].NumberFormat = "%1。%2。%3。%4。%5。%6。%7。%8";
                lstLvels[8].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[8].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[8].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[8].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[8].TextPosition = app.CentimetersToPoints(2.54f);
                lstLvels[8].TabPosition = 0f;
                lstLvels[8].ResetOnHigher = 7;
                lstLvels[8].StartAt = 1;
                lstLvels[8].LinkedStyle = "标题 8";


                lstLvels[9].NumberFormat = "%1。%2。%3。%4。%5。%6。%7。%8。%9";
                lstLvels[9].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                lstLvels[9].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                lstLvels[9].NumberPosition = app.CentimetersToPoints(0f);
                lstLvels[9].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                lstLvels[9].TextPosition = app.CentimetersToPoints(2.79f);
                lstLvels[9].TabPosition = 0f;
                lstLvels[9].ResetOnHigher = 8;
                lstLvels[9].StartAt = 1;
                lstLvels[9].LinkedStyle = "标题 9";
            }

            // listGallery.ListTemplates[objIndex].Name = "myList";
            return;
        }


        private Hashtable m_hashExpandTree = new Hashtable();
        /// <summary>
        /// 得到扩展的节点集
        /// </summary>
        /// <param name="srcTree"></param>
        /// <param name="strPath"></param>
        private void getExpandNodes(TreeNode srcTree, String strPath)
        {
            if(srcTree.IsExpanded)
            {
                m_hashExpandTree.Add(strPath + "\\" + srcTree.Text, srcTree); // 记录path及对象
            }

            foreach (TreeNode childNd in srcTree.Nodes) // 遍历
            {
                // 
                if(childNd.IsExpanded)
                {
                    getExpandNodes(childNd, strPath + "\\" + childNd.Text); // 递归
                }
            }

            return;
        }

        /// <summary>
        /// 恢复展开状态
        /// </summary>
        /// <param name="nd"></param>
        /// <param name="strPath"></param>
        private void restoreExpand(TreeNode nd, String strPath)
        {
            strPath += "\\" + nd.Text;

            if (m_hashExpandTree.Contains(strPath)) // 判断
            {
                nd.Expand(); // 展开
            }

            foreach (TreeNode childNd in nd.Nodes) // 遍历
            {
                restoreExpand(childNd, strPath); // 递归
            }

            return;
        }



        public double DateDiff(DateTime DateTime1, DateTime DateTime2, int nType = 0)
        {
            double dbRet = 0;

            TimeSpan ts1 = new TimeSpan(DateTime1.Ticks);
            TimeSpan ts2 = new TimeSpan(DateTime2.Ticks);

            int nSign = Math.Sign(DateTime1.Ticks - DateTime2.Ticks);

            TimeSpan ts = ts1.Subtract(ts2);

            switch (nType)
            {
                case 1:
                    dbRet = ts.TotalHours;
                    break;

                case 2:
                    dbRet = ts.TotalMinutes;
                    break;

                case 3:
                    dbRet = ts.TotalSeconds;
                    break;

                default:
                case 0:
                    dbRet = ts.TotalDays;
                    break;
            }

            return nSign * dbRet;
        }


        private Boolean IsNumStart(String strTxt, ref String strStartNum)
        {
            char[] chs = strTxt.ToCharArray();
            int nIndex = -1;

            foreach (char ch in chs)
            {
                if (ch >= '0' && ch <= '9')
                {
                    nIndex++;
                }
                else
                {
                    break;
                }
            }

            if (nIndex != -1)
            {
                strStartNum = strTxt.Substring(0,nIndex+1);
                return true;
            }

            return false;
        }

        // 切图
        private void splitNotIsolateBigPics()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            float fH = 0.0f, fW = 0.0f;

            ArrayList arrIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrIsolatePicsInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsInTbl = new ArrayList();

            ArrayList arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                         arrIsolatePicsInTbl, arrNotIsolatePicsInTbl);

            int nCnt = 0;

            Word.Paragraph para = null;

            foreach (Word.InlineShape inShp in arrNotIsolatePicsNotInTbl)
            {
                doc.ActiveWindow.ScrollIntoView(inShp.Range);
                inShp.Range.GoTo();

                para = inShp.Range.Paragraphs[1];


                nCnt++;

                // para.char

                fH = (float)(inShp.Height / para.Range.PageSetup.PageHeight);
                fW = (float)(inShp.Width / para.Range.PageSetup.PageWidth);

                // 
                if ((fH > 0.5 && fW > 0.5) ||
                    (fH > 0.5 && (fW < 0.5 && fW > 0.2)) ||
                    (fW > 0.5 && (fH < 0.5 && fH > 0.2)))
                {

                    doc.ActiveWindow.ScrollIntoView(inShp.Range);
                    //shpItem.Range.GoTo();

                    // 
                    sel.Start = inShp.Range.End;
                    sel.End = inShp.Range.End;

                    sel.Range.GoTo();
                    //sel.TypeText("E" + nSn);
                    sel.TypeParagraph();

                    // new para should be text body

                    sel.Start = inShp.Range.Start;
                    sel.End = inShp.Range.Start;

                    sel.Range.GoTo();
                    //sel.TypeText("S" + nSn);
                    sel.TypeParagraph();

                    // new para should be text body

                }
            }

            int nTblCnt = 0;

            /*
            foreach (Word.InlineShape inShp in arrNotIsolatePicsInTbl)
            {
                doc.ActiveWindow.ScrollIntoView(inShp.Range);
                inShp.Range.GoTo();

                para = inShp.Range.Paragraphs[1];


                nTblCnt++;

                fH = (float)(inShp.Height / inShp.Range.Cells[1].Height);// para.Range.PageSetup.PageHeight);
                fW = (float)(inShp.Width / inShp.Range.Cells[1].Width); // para.Range.PageSetup.PageWidth);

                // 
                if ((fH > 0.5 && fW > 0.5) ||
                    (fH > 0.5 && (fW < 0.5 && fW > 0.2)) ||
                    (fW > 0.5 && (fH < 0.5 && fH > 0.2)))
                {

                    doc.ActiveWindow.ScrollIntoView(inShp.Range);
                    //shpItem.Range.GoTo();

                    // 
                    sel.Start = inShp.Range.End;
                    sel.End = inShp.Range.End;

                    sel.Range.GoTo();
                    sel.TypeText("E" + nTblCnt);
                    //sel.TypeParagraph();

                    // new para should be text body

                    sel.Start = inShp.Range.Start;  // NOT SUCCESS in table
                    sel.End = inShp.Range.Start;

                    sel.Range.GoTo();
                    sel.TypeText("S" + nTblCnt);
                    //sel.TypeParagraph();

                    // new para should be text body

                }
            }
            * */

            try
            {
                sel.Start = nOStart;
                sel.End = nOEnd;

                doc.ActiveWindow.ScrollIntoView(sel.Range);
                sel.Range.GoTo();
            }
            catch (System.Exception ex)
            {
                sel.HomeKey(Word.WdUnits.wdStory);
            }

            MessageBox.Show("完成处理：" + "总：" + (nCnt + nTblCnt) + "个图片(" + nCnt + "个图片" + "," + nTblCnt + "个表内图片)");

            return;
        }

        private ArrayList findBlankPage_v1()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return null;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return null;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            int nPageStart = 0, nPageEnd = 0;
            int n2ndPageStart = 0, n2ndPageEnd = 0;
            //int nChCnt = 0;

            ArrayList arrs = new ArrayList();

            arrs.Add("总页码,页码,字符数(非空字符),表格数,非嵌入图形数,嵌入图片数,内容控件数");

            int nPageCnt = doc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);


            sel.HomeKey(Word.WdUnits.wdStory);


            for (int i = 0; i < nPageCnt; i++)
            {
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                nPageStart = sel.Start;

                int nAbsPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                int nPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);

                if (i < (nPageCnt - 1))
                {
                    // sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToNext, 1, "");
                    sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, (i+1+1), "");
                }
                else
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }
                
                n2ndPageStart = sel.Start;
                n2ndPageEnd = sel.End;

                if (i < (nPageCnt - 1))
                {
                    sel.MoveUp(Word.WdUnits.wdLine, 1);
                    sel.EndKey(Word.WdUnits.wdLine,1); // 遇到表格则可能出错
                }

                nPageEnd = sel.End;

                sel.Start = nPageStart;
                sel.End = nPageEnd;

                sel.Range.GoTo();
                //sel.Select();

                int nChs = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
                int nShps = (sel.ShapeRange == null)? 0: sel.ShapeRange.Count;
                int nTbls = (sel.Tables == null) ? 0 : sel.Tables.Count;
                int nPics = (sel.InlineShapes == null) ? 0 : sel.InlineShapes.Count;
                int nContCtrls = (sel.Range.ContentControls == null) ? 0 : sel.Range.ContentControls.Count;

                arrs.Add( nAbsPage + "," + nPage + "," + nChs + "," + nTbls + "," + nShps + "," + nPics + "," + nContCtrls);

                sel.Start = n2ndPageStart;
                sel.End = n2ndPageEnd;

                sel.Range.GoTo();
            }

            return arrs;
        }


        private ArrayList statPages()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return null;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return null;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            int nPageStart = 0, nPageEnd = 0;
            int n2ndPageStart = 0, n2ndPageEnd = 0;
            //int nChCnt = 0;

            ArrayList arrs = new ArrayList();

            arrs.Add("总页码,页码,字符数(非空字符),表格数,非嵌入图形数,嵌入图片数,内容控件数");

            // int nPageCnt = doc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);
            int nPageCnt = sel.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

            sel.HomeKey(Word.WdUnits.wdStory);


            for (int i = 0; i < nPageCnt; i++)
            {
                nPageStart = sel.Start;

                doc.ActiveWindow.ScrollIntoView(sel.Range);

                int nAbsPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                int nPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);

                if (i < (nPageCnt - 1))
                {
                    // sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToNext, 1, "");
                    sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, (i + 2), "");
                }
                else
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }

                n2ndPageStart = sel.Start;
                n2ndPageEnd = sel.End;

                sel.SetRange(nPageStart, n2ndPageEnd);
                // sel.Range.GoTo();

                int nChs = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
                int nShps = (sel.ShapeRange == null) ? 0 : sel.ShapeRange.Count;
                int nTbls = (sel.Tables == null) ? 0 : sel.Tables.Count;
                int nPics = (sel.InlineShapes == null) ? 0 : sel.InlineShapes.Count;
                int nContCtrls = (sel.Range.ContentControls == null) ? 0 : sel.Range.ContentControls.Count;

                arrs.Add(nAbsPage + "," + nPage + "," + nChs + "," + nTbls + "," + nShps + "," + nPics + "," + nContCtrls);

                // sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                sel.Start = n2ndPageStart;
                sel.End = n2ndPageEnd;

                sel.Range.GoTo();
            }

            return arrs;
        }


        ArrayList findInvalidFields()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return null;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return null;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Paragraph para = sel.Range.Paragraphs[1];


            ArrayList arrs = new ArrayList();

            int nOStart = sel.Start;
            int nOEnd = sel.End;

            sel.HomeKey(Word.WdUnits.wdStory);

            String strItem = "错误！未找到引用源。";

            sel.Find.ClearFormatting();

            sel.Find.Text = strItem;
            sel.Find.Replacement.Text = "";
            sel.Find.Forward = true;
            sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
            sel.Find.Format = false;
            sel.Find.MatchCase = false;
            sel.Find.MatchWholeWord = false;
            sel.Find.MatchByte = false;
            sel.Find.MatchWildcards = false;
            sel.Find.MatchSoundsLike = false;
            sel.Find.MatchAllWordForms = false;

            sel.Find.Execute();
            // 错误！未找到引用源。


            while(sel.Find.Found)
            {
                para = sel.Range.Paragraphs[1];

                if (para.Range.Fields.Count == 1)
                {
                    arrs.Add(para.Range.Fields[1]);
                }
                else
                {
                    foreach (Word.Field fld in para.Range.Fields)
                    {
                        if (fld.Result.Text.Equals(strItem))
                        {
                            arrs.Add(fld);
                        }
                    }
                }

                sel.Find.Execute();
            }

            sel.Start = nOStart;
            sel.End = nOEnd;
            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range);


            return arrs;

        }

        // 计算段落中InlineShape（图片）占比，以判断是否应该单独成行
        private void calcInlineShp()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            //Word.CaptionLabel InShpCapLbl = app.CaptionLabels["图表"];

            //sel.InsertCaption(InShpCapLbl, "", "", Word.WdCaptionPosition.wdCaptionPositionBelow, false);

            float fMaxFontSize = 0.0f;

            Word.Paragraph para = sel.Paragraphs[1];

            // 取整个段落中Size最大的
            //if (para.Range.Font.Equals(sel.Characters.First.Font))
            if (para.Range.Font.Size != (float)Word.WdConstants.wdUndefined &&
                para.Range.Font.Size == sel.Characters.First.Font.Size)
            {
                fMaxFontSize = para.Range.Font.Size;
            }
            else
            {
                foreach (Word.Range chRng in sel.Characters)
                {
                    if (chRng.Font.Size != (float)Word.WdConstants.wdUndefined && chRng.Font.Size > fMaxFontSize)
                    {
                        fMaxFontSize = chRng.Font.Size;
                    }
                    // 
                }
            }

            String strRet = "";
            int nPages = para.Range.ComputeStatistics(Word.WdStatistic.wdStatisticPages);

            float fPicChHRat = 0.0f, fPicChWRat = 0.0f;
            float fPicPageHRat = 0.0f, fPicPageWRat = 0.0f;

            Word.PageSetup pgsetup = para.Range.PageSetup;

            float fTextViewWidth = (pgsetup.PageWidth - pgsetup.LeftMargin - pgsetup.RightMargin);
            float fTextViewHeight = (pgsetup.PageHeight - pgsetup.TopMargin - pgsetup.BottomMargin);
            int nSn = 0;

            float fNearestSize = 0.0f, fTmp = 0.0f;
            Word.Range nearestRng = null;


            strRet += "[Pages]:" + nPages + "\r\n";

            foreach (Word.InlineShape inShp in para.Range.InlineShapes)
            {

                nearestRng = inShp.Range.Characters.First.Previous();

                if (nearestRng != null)
                {
                    fTmp = nearestRng.Font.Size * (nearestRng.Font.Scaling / 100);
                    fNearestSize = fTmp;
                }

                nearestRng = inShp.Range.Characters.Last.Next();

                if (nearestRng != null)
                {
                    fTmp = nearestRng.Font.Size * (nearestRng.Font.Scaling / 100);
                }

                if (fNearestSize < fTmp)
                {
                    fNearestSize = fTmp;
                }


                fPicChHRat = inShp.Height / fMaxFontSize;
                fPicChWRat = inShp.Width / fMaxFontSize;

                fPicPageHRat = inShp.Height / fTextViewHeight;
                fPicPageWRat = inShp.Width / fTextViewWidth;

                nSn++;

                strRet += "[" + nSn + "]\r\n";
                strRet += "MaxFontSize:\t" + fMaxFontSize + "\r\n";
                strRet += "NearestFontSize:\t" + fNearestSize + "\r\n";
                strRet += "Pic[H:W]:\t" + inShp.Height + "," + inShp.Width + "\r\n";
                strRet += "View[H:W]:\t" + fTextViewHeight + "," + fTextViewWidth + "\r\n\r\n";

                strRet += "Pic/FontSize[H:W]:\t" + fPicChHRat.ToString("0.00") + "," + fPicChWRat.ToString("0.00") + "\r\n";
                strRet += "Pic/View[H:W]:\t" + fPicPageHRat.ToString("0.00") + "," + fPicPageWRat.ToString("0.00");

                strRet += "\r\n\r\n";
            }

            MessageBox.Show(strRet);

            return;
        }

        private void splitNotIsolatePics()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            Word.Paragraph para = sel.Range.Paragraphs[1];

            // 截断pics into separate paragraph

            ArrayList arrs = new ArrayList();

            foreach (Word.InlineShape inShp in para.Range.InlineShapes)
            {
                arrs.Add(inShp);
            }


            foreach (Word.InlineShape inShp in arrs)
            {
                sel.Start = inShp.Range.End;
                sel.End = sel.Start;

                doc.ActiveWindow.ScrollIntoView(sel.Range);
                sel.Range.GoTo();

                //sel.InsertParagraphBefore();
                sel.TypeParagraph();

                sel.Range.Paragraphs[1].OutlineDemoteToBody();


                sel.Start = inShp.Range.Start;
                sel.End = sel.Start;

                doc.ActiveWindow.ScrollIntoView(sel.Range);
                sel.Range.GoTo();

                sel.TypeParagraph();

                sel.Range.Paragraphs[1].OutlineDemoteToBody();

                // 
                // reset
            }



            MessageBox.Show("done:" + arrs.Count);

            return;
        }


        private ArrayList statPages_v2()
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return null;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return null;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            int nPageStart = 0, nPageEnd = 0;
            int n2ndPageStart = 0, n2ndPageEnd = 0;
            //int nChCnt = 0;

            ArrayList arrs = new ArrayList();

            arrs.Add("总页码,页码,字符数(非空字符),表格数,非嵌入图形数,嵌入图片数,内容控件数");

            // int nPageCnt = doc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);
            int nPageCnt = sel.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

            sel.HomeKey(Word.WdUnits.wdStory);


            for (int i = 0; i < nPageCnt; i++)
            {
                nPageStart = sel.Start;

                doc.ActiveWindow.ScrollIntoView(sel.Range);

                int nAbsPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                int nPage = sel.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);

                if (i < (nPageCnt - 1))
                {
                    // sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToNext, 1, "");
                    sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, (i + 2), "");
                }
                else
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }

                n2ndPageStart = sel.Start;
                n2ndPageEnd = sel.End;

                sel.SetRange(nPageStart, n2ndPageEnd);
                // sel.Range.GoTo();

                int nChs = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
                int nShps = (sel.ShapeRange == null) ? 0 : sel.ShapeRange.Count;
                int nTbls = (sel.Tables == null) ? 0 : sel.Tables.Count;
                int nPics = (sel.InlineShapes == null) ? 0 : sel.InlineShapes.Count;
                int nContCtrls = (sel.Range.ContentControls == null) ? 0 : sel.Range.ContentControls.Count;

                arrs.Add(nAbsPage + "," + nPage + "," + nChs + "," + nTbls + "," + nShps + "," + nPics + "," + nContCtrls);

                // sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                sel.Start = n2ndPageStart;
                sel.End = n2ndPageEnd;

                sel.Range.GoTo();
            }

            return arrs;
        }


        private Hashtable findBlankPage()
        {
            ArrayList arrs = new ArrayList();

            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return null;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return null;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Hashtable hsh = new Hashtable();
            Hashtable hshEmpty = new Hashtable();

            sel.HomeKey(Word.WdUnits.wdStory);

            // ^w^p
            int nTotalPages = doc.Content.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);
            int nPage = 0, nPgCnt = 0;

            foreach (Word.InlineShape inshp in doc.InlineShapes)
            {
                nPage = inshp.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                hsh[nPage] = nPage;
            }

            foreach (Word.Table tbl in doc.Tables)
            {
                nPage = tbl.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                nPgCnt = tbl.Range.ComputeStatistics(Word.WdStatistic.wdStatisticPages);

                for (int i = nPage; i > (nPage - nPgCnt); i--)
                {
                    hsh[i] = i;
                }

            }

            foreach (Word.Shape shp in doc.Shapes)
            {
                if (shp.Anchor.InRange(doc.StoryRanges[Word.WdStoryType.wdMainTextStory]))
                {
                    nPage = shp.Anchor.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    hsh[nPage] = nPage;
                }
            }


            String[] strs = { "^w", "^w^p"};
            String[] strSeps = { "^m", "^b", "^n" }; // 段间分页
            
            Boolean bTop2Down = true;

            // 
            foreach (String strKey in strs)
            {
                //sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strKey;
                sel.Find.Forward = bTop2Down;

                sel.Find.Replacement.Text = "";

                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                while (sel.Find.Found)
                {
                    int n1Page = sel.Range.Characters.First.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    int n2Page = sel.Range.Characters.Last.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                    for (int i = n1Page; i <= n2Page; i++)
                    {
                        nPage = i;

                        if (!hsh.Contains(nPage))
                        {
                            if (!hshEmpty.Contains(nPage))
                            {
                                Boolean bBlankPage = isBlankPage(nPage, nTotalPages);

                                if (bBlankPage)
                                {
                                    hshEmpty[nPage] = nPage;
                                }
                                else
                                {
                                    hsh[nPage] = nPage;
                                }
                            }
                        }
                    }

                    if (bTop2Down)
                    {
                        if (nPage == nTotalPages)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage + 1, "");
                        }
                    }
                    else
                    {
                        if (nPage == 1)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage - 1, "");
                        }
                    }

                    sel.Find.Execute();
                }

                if (bTop2Down)
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }
                else
                {
                    sel.HomeKey(Word.WdUnits.wdStory);
                }

                bTop2Down = !bTop2Down;
                //bDir = true;

            }// foreach()


            //if (bDir)
            //{
            //    sel.EndKey(Word.WdUnits.wdStory);
            //}
            //else
            //{

            bTop2Down = true;
            sel.HomeKey(Word.WdUnits.wdStory);
            //}


            foreach (String strKey in strSeps) // 分隔式
            {
                //sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strKey;
                sel.Find.Forward = bTop2Down;

                sel.Find.Replacement.Text = "";

                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                while (sel.Find.Found)
                {
                    int n2Page = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    int n1Page = ((n2Page > 1) ? (n2Page - 1) : n2Page);

                    for (int i = n1Page; i <= n2Page; i++)
                    {
                        nPage = i;

                        if (!hsh.Contains(nPage))
                        {
                            if (!hshEmpty.Contains(nPage))
                            {
                                Boolean bBlankPage = isBlankPage(nPage, nTotalPages);

                                if (bBlankPage)
                                {
                                    hshEmpty[nPage] = nPage;
                                }
                                else
                                {
                                    hsh[nPage] = nPage;
                                }
                            }
                        }
                    }

                    if (bTop2Down)
                    {
                        if (nPage == nTotalPages)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage + 1, "");
                        }
                    }
                    else
                    {
                        if (nPage == 1)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage - 1, "");
                        }
                    }

                    sel.Find.Execute();
                }

                if (bTop2Down)
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }
                else
                {
                    sel.HomeKey(Word.WdUnits.wdStory);
                }

                bTop2Down = !bTop2Down;
                //bDir = true;

            }// foreach()


            bTop2Down = true;
            sel.HomeKey(Word.WdUnits.wdStory);


            sel.Find.ClearFormatting();

            // 段前分页
            sel.Find.ParagraphFormat.PageBreakBefore = -1;//true

            sel.Find.Text = "";
            sel.Find.Replacement.Text = "";
            sel.Find.Forward = true;
            sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
            sel.Find.Format = true;
            sel.Find.MatchCase = false;
            sel.Find.MatchWholeWord = false;
            sel.Find.MatchByte = false;
            sel.Find.MatchWildcards = false;
            sel.Find.MatchSoundsLike = false;
            sel.Find.MatchAllWordForms = false;

            sel.Find.Execute();

            while(sel.Find.Found)
            {
                int n2Page = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                int n1Page = ((n2Page > 1) ? (n2Page - 1) : n2Page);

                for (int i = n1Page; i <= n2Page; i++)
                {
                    nPage = i;

                    if (!hsh.Contains(nPage))
                    {
                        if (!hshEmpty.Contains(nPage))
                        {
                            Boolean bBlankPage = isBlankPage(nPage, nTotalPages);

                            if (bBlankPage)
                            {
                                hshEmpty[nPage] = nPage;
                            }
                            else
                            {
                                hsh[nPage] = nPage;
                            }
                        }
                    }
                }

                if (bTop2Down)
                {
                    if (nPage == nTotalPages)
                    {
                        break;
                    }
                    else
                    {
                        sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage + 1, "");
                    }
                }
                else
                {
                    if (nPage == 1)
                    {
                        break;
                    }
                    else
                    {
                        sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage - 1, "");
                    }
                }

                sel.Find.Execute();
            }



            //sel.HomeKey(Word.WdUnits.wdStory);
            bTop2Down = true;
            sel.HomeKey(Word.WdUnits.wdStory);

            int nSec = 0;
            foreach(Word.Section sec in doc.Sections)
            {
                nSec ++;

                sel.GoTo(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToAbsolute, nSec,"");

                sel.Find.ClearFormatting();

                sel.Find.Text = "^p^p";
                sel.Find.Forward = true;

                sel.Find.Replacement.Text = "";

                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                while (sel.Find.Found)
                {
                    if (!sel.Range.InRange(doc.Sections[nSec].Range))
                    {
                        break;
                    }

                    int n2Page = sel.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    int n1Page = ((n2Page > 1) ? (n2Page - 1) : n2Page);

                    for (int i = n1Page; i <= n2Page; i++)
                    {
                        nPage = i;

                        if (!hsh.Contains(nPage))
                        {
                            if (!hshEmpty.Contains(nPage))
                            {
                                Boolean bBlankPage = isBlankPage(nPage, nTotalPages);

                                if (bBlankPage)
                                {
                                    hshEmpty[nPage] = nPage;
                                }
                                else
                                {
                                    hsh[nPage] = nPage;
                                }
                            }
                        }
                    }

                    if (bTop2Down)
                    {
                        if (nPage == nTotalPages)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage + 1, "");
                        }
                    }
                    else
                    {
                        if (nPage == 1)
                        {
                            break;
                        }
                        else
                        {
                            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nPage - 1, "");
                        }
                    }

                    sel.Find.Execute();
                }
            }

            // last page
            if (!hshEmpty.Contains(nTotalPages))
            {
                Boolean bBlankPage = isBlankPage(nTotalPages, nTotalPages);

                if (bBlankPage)
                {
                    hshEmpty[nTotalPages] = nTotalPages;
                }
            }

            return hshEmpty;
        }


        private Boolean isBlankPage(int nTargetPage, int nTotalPages)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return true;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return true;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            int nPageStart = 0, nPageEnd = 0;
            int n2ndPageStart = 0, n2ndPageEnd = 0;

            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, nTargetPage,"");
            nPageStart = sel.Start;

            if (nTargetPage < nTotalPages)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, (nTargetPage + 1), "");
            }
            else
            {
                sel.EndKey(Word.WdUnits.wdStory);
            }


            n2ndPageStart = sel.Start;
            n2ndPageEnd = sel.End;

            sel.SetRange(nPageStart, n2ndPageEnd);
            // sel.Range.GoTo();

            char[] trimChs = {(char)11,(char)12,(char)14,' ','\r','\n','\t','　'};

            int nChs = 0;

            if (sel.Range.Text != null)
            {
                String strPage = sel.Range.Text.Trim(trimChs);
                nChs = strPage.Length;
            }
            else
            {
                nChs = sel.Range.ComputeStatistics(Word.WdStatistic.wdStatisticCharacters);
            }

            //int nShps = (sel.ShapeRange == null) ? 0 : sel.ShapeRange.Count;
            //int nTbls = (sel.Tables == null) ? 0 : sel.Tables.Count;
            //int nPics = (sel.InlineShapes == null) ? 0 : sel.InlineShapes.Count;
            //int nContCtrls = (sel.Range.ContentControls == null) ? 0 : sel.Range.ContentControls.Count;
            // arrs.Add(nAbsPage + "," + nPage + "," + nChs + "," + nTbls + "," + nShps + "," + nPics + "," + nContCtrls);

            sel.Start = nOStart;
            sel.End = nOEnd;
            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range);

            return (nChs == 0); // 不可靠，对空表、InlineShape、Shape是失效的，照样会统计成0，但其实页面并不空
        }

        // 2018/1/3 13:31:05
        //直接每页Trim，然后排除Shape、表格所占的页，即是结果。然后测试结果：
        //36.2s / 269页 (居然改善了相当的时间！原来58s)
        //E:\Work\Tasks\2017\1220_居中图片发现有的没有清除掉缩进\长文多图v2（图片有未居中的_已全部单独成行）.docx

        private void stableFindBlankPage()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;


            DateTime dsA = DateTime.Now;

            int nDocPages = doc.Content.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

            HashSet<int> occupySet = new HashSet<int>();
            HashSet<int> emptyPageSet = new HashSet<int>();

            int nPage = 0, nCoverPages = 0;

            //HashSet<int> occupySet = new HashSet<int>();
            //HashSet<int> pageSet = new HashSet<int>();

            //// 目录
            //// 表格
            //// inlineshape
            //// shapes
            //// fields
            //int nRngStart = -1, nRngEnd = -1;

            //foreach(Word.TableOfContents toc in doc.TablesOfContents )
            //{
            //    nRngStart = toc.Range.Start;
            //    nRngEnd = toc.Range.End;

            //    for (int i = nRngStart; i <= nRngEnd; i++)
            //    {
            //        occupySet.Add(i);
            //    }
            //}

            foreach (Word.Table tbl in doc.Tables)
            {
                nPage = tbl.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                nCoverPages = tbl.Range.ComputeStatistics(Word.WdStatistic.wdStatisticPages);

                for (int i = nPage - nCoverPages + 1; i <= nPage; i++)
                {
                    occupySet.Add(i);
                }
            }

            //foreach(Word.InlineShape inshp in doc.InlineShapes )
            //{
            //    nRngStart = inshp.Range.Start;
            //    nRngEnd = inshp.Range.End;

            //    for (int i = nRngStart; i <= nRngEnd; i++)
            //    {
            //        occupySet.Add(i);
            //    }
            //}



            foreach (Word.Shape shp in doc.Shapes)
            {
                nPage = shp.Anchor.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                occupySet.Add(nPage);
            }

            //foreach(Word.Field fld in doc.Fields)
            //{
            //    nRngStart = fld.Result.Start;
            //    nRngEnd = fld.Result.End;

            //    for (int i = nRngStart; i <= nRngEnd; i++)
            //    {
            //        occupySet.Add(i);
            //    }
            //}



            int nPreStart = -1;
            int nPreEnd = -1;
            int nCurStart = -1, nCurEnd = -1;

            char[] trimChs = { (char)11, (char)12, (char)14, ' ', '\r', '\n', '\t', '　' };


            for (int i = 1; i <= nDocPages; i++)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, i, "");

                nPreStart = sel.Start;
                nPreEnd = sel.End;

                if (i <= (nDocPages - 1))
                {
                    sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToAbsolute, i + 1, "");
                }
                else
                {
                    sel.EndKey(Word.WdUnits.wdStory);
                }

                nCurStart = sel.Start;
                nCurStart = (nCurStart > 0) ? nCurStart : 0;
                nCurEnd = nCurStart;

                //pageSet.Clear();
                //for (int k = nPreStart; k <= nCurEnd; k++)
                //{
                //    pageSet.Add(k);
                //}

                //bNotEmpty = occupySet.Overlaps(pageSet);

                //if (bNotEmpty)
                //{
                //    continue;
                //}

                sel.SetRange(nPreStart, nCurEnd);

                if (sel.Paragraphs.Count == (nCurEnd - nPreStart + 1))
                {
                    emptyPageSet.Add(i);
                }
                else
                {
                    String strText = sel.Range.Text.Trim(trimChs);

                    if (strText.Length == 0)
                    {
                        emptyPageSet.Add(i);
                    }
                }

            }

            emptyPageSet.ExceptWith(occupySet);

            DateTime dsB = DateTime.Now;

            TimeSpan tsBA = dsB - dsA;

            String strRet = "";
            foreach (int i in emptyPageSet)
            {
                strRet += i + ",";
            }

            MessageBox.Show(strRet + "\r\n" + tsBA.TotalMilliseconds);

            return;
        }

        private void changeTextStyle_v1()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;
            // Word.Paragraph para = sel.Range.Paragraphs[1];

            HashSet<int> docSet = new HashSet<int>();
            HashSet<int> fndSet = new HashSet<int>();

            ArrayList arrs = new ArrayList();

            int nStart = doc.Content.Start;
            int nEnd = doc.Content.End;

            DateTime ds1 = DateTime.Now;
            for (int i = nStart; i <= nEnd; i++)
            {
                docSet.Add(i);
            }
            DateTime ds2 = DateTime.Now;

            sel.HomeKey(Word.WdUnits.wdStory);
            sel.Find.ClearFormatting();

            sel.Find.Font.NameFarEast = @"微软雅黑";
            sel.Find.Font.Size = 9.5f;

            sel.Find.ParagraphFormat.OutlineLevel = Word.WdOutlineLevel.wdOutlineLevelBodyText;

            sel.Find.Text = "";
            sel.Find.Replacement.Text = "";
            sel.Find.Forward = true;
            sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
            sel.Find.Format = true;

            sel.Find.MatchCase = false;
            sel.Find.MatchWholeWord = false;
            sel.Find.MatchByte = false;
            sel.Find.MatchWildcards = false;
            sel.Find.MatchSoundsLike = false;
            sel.Find.MatchAllWordForms = false;


            sel.Find.Execute();

            int nPreStart = -1, nPreEnd = -1;
            int nFndStart = -1, nFndEnd = -1;
            int nRecordedStart = -1, nRecordedEnd = -1;

            while (sel.Find.Found && sel.Range.StoryType == Word.WdStoryType.wdMainTextStory)
            {
                nFndStart = sel.Start;
                nFndEnd = sel.End;

                if (nPreStart == -1 && nPreEnd == -1)
                {
                    nPreStart = nFndStart;
                    nPreEnd = nFndEnd;
                }
                else
                {
                    if (nFndStart != nPreEnd)
                    {
                        arrs.Add(nPreStart);
                        arrs.Add(nPreEnd);

                        nRecordedStart = nPreStart;
                        nRecordedEnd = nPreEnd;

                        nPreStart = nFndStart;
                        nPreEnd = nFndEnd;
                    }
                    else // nFndStart == nPreEnd
                    {
                        // nPreStart = nFndStart;

                        nPreEnd = nFndEnd;
                    }
                }

                sel.Find.Execute();
            }

            //nFndStart = sel.Start;
            //nFndEnd = sel.End;

            if (nRecordedStart != nPreStart &&
                nRecordedEnd != nPreEnd &&
                nPreStart != -1 && nPreEnd != -1)
            {
                arrs.Add(nPreStart);
                arrs.Add(nPreEnd);
            }

            DateTime ds3 = DateTime.Now;


            int nCurStart = 0, nCurEnd = 0;


            for (int i = 0; i < arrs.Count - 1; i += 2)
            {
                nCurStart = (int)arrs[i];
                nCurEnd = (int)arrs[i + 1];

                for (int j = nCurStart + 1; j < nCurEnd; j++)
                {
                    fndSet.Add(j);
                }
            }

            DateTime ds3_1 = DateTime.Now;
            int nTmp1 = 0, nTmp2 = 0;
            foreach (Word.Table tbl in doc.Tables)
            {
                nTmp1 = tbl.Range.Start;
                nTmp2 = tbl.Range.End;

                for (int i = nTmp1 + 1; i < nTmp2; i++)
                {
                    fndSet.Add(i);
                }
            }

            DateTime ds4 = DateTime.Now;
            docSet.ExceptWith(fndSet);
            DateTime ds5 = DateTime.Now;

            //arrs.Clear();

            //foreach (int nRet in docSet)
            //{
            //    arrs.Add(nRet);
            //}

            //arrs.Sort();

            int nPreIdx = -1;
            int nRngStart = -1;
            int nCnt = 0;

            int nSelCnt = 0;

            foreach (int nIdx in docSet)
            {
                nCnt++;

                if (nRngStart == -1)
                {
                    nRngStart = nIdx;
                }

                if (nIdx - nPreIdx > 1 || nCnt == docSet.Count)
                {
                    if (nPreIdx > nRngStart)
                    {
                        sel.SetRange(nRngStart, nPreIdx);
                        m_addin.m_commTools.RecordMultiSel(sel.Range);

                        nSelCnt++;
                    }

                    nRngStart = nIdx;
                }

                nPreIdx = nIdx;

                if (nSelCnt == 50 || (nCnt == docSet.Count && nSelCnt > 0))
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                    nSelCnt = 0;


                    sel.Font.Name = "宋体";
                    sel.Font.NameFarEast = "宋体";
                    sel.Font.NameAscii = "宋体";
                    sel.Font.Size = 10;
                }

            }

            DateTime ds6 = DateTime.Now;
            // ExecMultiSel(doc);
            DateTime ds7 = DateTime.Now;

            //sel.Font.Name = "宋体";
            //sel.Font.NameFarEast = "宋体";
            //sel.Font.NameAscii = "宋体";
            //sel.Font.Size = 10;


            TimeSpan ts21 = ds2 - ds1;
            TimeSpan ts32 = ds3 - ds2;
            TimeSpan ts3_1_3 = ds3_1 - ds3;
            TimeSpan ts43_1 = ds4 - ds3_1;
            TimeSpan ts54 = ds5 - ds4;
            TimeSpan ts65 = ds6 - ds5;
            TimeSpan ts61 = ds6 - ds1;

            String strRet = "[21]:" + ts21.TotalMilliseconds + "\r\n" +
                            "[32]:" + ts32.TotalMilliseconds + "\r\n" +
                            "[3_1_3]:" + ts3_1_3.TotalMilliseconds + "\r\n" +
                            "[43_1]:" + ts43_1.TotalMilliseconds + "\r\n" +
                            "[54]:" + ts54.TotalMilliseconds + "\r\n" +
                            "[65]:" + ts65.TotalMilliseconds + "\r\n" +
                            "[61]:" + ts61.TotalMilliseconds;

            MessageBox.Show(strRet);

            return;
        }

        private String changeTextStyle_v2()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;
            // Word.Paragraph para = sel.Range.Paragraphs[1];

            doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;

            const int MAX_SEL_STEP = 30;

            HashSet<int> docSet = new HashSet<int>();
            HashSet<int> fndSet = new HashSet<int>();

            // ArrayList arrs = new ArrayList();

            // 
            if(doc.TablesOfContents.Count > 0 || doc.TablesOfFigures.Count > 0)
            {
                int nMaxEnd = -1;

                foreach(Word.TableOfContents toc in doc.TablesOfContents)
                {
                    if(toc.Range.End > nMaxEnd)
                    {
                        nMaxEnd = toc.Range.End;
                    }
                }

                foreach(Word.TableOfFigures tFig in doc.TablesOfFigures )
                {
                    if(tFig.Range.End > nMaxEnd)
                    {
                        nMaxEnd = tFig.Range.End;
                    }
                }

                if(nMaxEnd > 0)
                {
                    sel.Start = nMaxEnd+1;
                    sel.End = nMaxEnd+1;
                    sel.Range.GoTo();
                }
            }


            DateTime tsAA = DateTime.Now;

            int nStart = sel.Start;// doc.Content.Start;
            int nEnd = doc.Content.End;

            for (int i = nStart; i <= nEnd; i++)
            {
                docSet.Add(i);
            }

            DateTime tsAB = DateTime.Now;


            int[] nHeadings = new int[9];

            for (int i = 0; i < 9; i++)
            {
                nHeadings[i] = (i + 1);
            }


            int nTmpStart = -1, nTmpEnd = -1;
            int nHeadingParas = 0;

            // ArrayList arrsSortedHeadings = m_addin.m_commTools.getHeadingParas(doc);
            ArrayList arrsSortedHeadings = m_addin.m_commTools.getSpecificHeadingParaArrsInScope(doc,null,nHeadings);
            
            DateTime tsAC = DateTime.Now;

            //ArrayList arrsSortedHeadings = new ArrayList();

            //foreach (Word.Paragraph para in doc.Paragraphs)
            //{
            //    if (para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
            //    {
            //        arrsSortedHeadings.Add(para);

            //        nTmpStart = para.Range.Start;
            //        nTmpEnd = para.Range.End;

            //        for (int i = nTmpStart + 1; i < nTmpEnd; i++)
            //        {
            //            fndSet.Add(i);
            //        }
            //    }
            //}

            foreach (ArrayList arrHeading in arrsSortedHeadings)
            {
                foreach (Word.Paragraph para in arrHeading)
                {
                    nHeadingParas++;

                    nTmpStart = para.Range.Start;
                    nTmpEnd = para.Range.End;

                    for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                    {
                        fndSet.Add(i);
                    }
                }
            }

            //foreach (Word.Paragraph para in arrsSortedHeadings)
            //{
            //    nHeadingParas++;

            //    nTmpStart = para.Range.Start;
            //    nTmpEnd = para.Range.End;

            //    for (int i = nTmpStart + 1; i < nTmpEnd; i++)
            //    {
            //        fndSet.Add(i);
            //    }
            //}

            DateTime tsAD = DateTime.Now;

            // 目录
            foreach(Word.TableOfContents toc in doc.TablesOfContents)
            {
                nTmpStart = toc.Range.Start;
                nTmpEnd = toc.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }
            }

            foreach(Word.TableOfFigures tFig in doc.TablesOfFigures)
            {
                nTmpStart = tFig.Range.Start;
                nTmpEnd = tFig.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }
            }

            DateTime tsAE = DateTime.Now;

            // Tables
            foreach(Word.Table tbl in doc.Tables )
            {
                nTmpStart = tbl.Range.Start;
                nTmpEnd = tbl.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }
            }

            DateTime tsAF = DateTime.Now;

            // 题注
            // ArrayList arrsTiZhuParas = m_addin.m_commTools.getTiZhuParasInScope(doc);
            ArrayList arrsTiZhuParas = new ArrayList();
            Word.Paragraph tmpPara = null;

            Word.TableOfContents tocItem = doc.TablesOfContents[1];
            Word.Field fldStart = null;

            if (tocItem != null)
            {
                fldStart = tocItem.Range.Fields[tocItem.Range.Fields.Count];
                fldStart = fldStart.Next;
            }

            // foreach(Word.Field fld in doc.Fields)
            //

            while(fldStart != null)
            {
                if (fldStart.Type == Word.WdFieldType.wdFieldSequence)
                {
                    tmpPara = fldStart.Result.Paragraphs[1];

                    arrsTiZhuParas.Add(tmpPara);

                    nTmpStart = tmpPara.Range.Start;
                    nTmpEnd = tmpPara.Range.End;

                    for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                    {
                        fndSet.Add(i);
                    }
                }

                fldStart = fldStart.Next;
            }
            

            DateTime tsAG = DateTime.Now;
            
            DateTime tsAH = DateTime.Now;
            docSet.ExceptWith(fndSet);
            DateTime tsAI = DateTime.Now;

            int nPreIdx = -1;
            int nRngStart = -1;
            int nCnt = 0;

            int nSelCnt = 0;
            int nTextRngs = 0;

            Word.Style txtStyle = null;
            String strTxtStyleName = "正文区";

            try
            {
            	txtStyle = doc.Styles[strTxtStyleName];
            }
            catch (System.Exception ex)
            {
                txtStyle = doc.Styles.Add(strTxtStyleName);

                txtStyle.Font.Name = "宋体";
                txtStyle.Font.NameFarEast = "宋体";
                txtStyle.Font.NameAscii = "宋体";
                txtStyle.Font.Size = 12.0f; // 小四
                txtStyle.Font.ColorIndex = Word.WdColorIndex.wdDarkBlue;
            }

            DateTime tsBA = DateTime.Now;
            foreach (int nIdx in docSet)
            {
                nCnt++;

                if (nRngStart == -1)
                {
                    nRngStart = nIdx;
                }

                if (nIdx - nPreIdx > 1)
                {
                    if (nPreIdx > nRngStart)
                    {
                        sel.SetRange(nRngStart, nPreIdx);
                        //m_addin.m_commTools.RecordMultiSel(sel.Range);
                        sel.set_Style(txtStyle);
                        //sel.Font.Name = "宋体";
                        //sel.Font.NameFarEast = "宋体";
                        //sel.Font.NameAscii = "宋体";
                        //sel.Font.Size = 12.0f; // 小四
                        //sel.Font.ColorIndex = Word.WdColorIndex.wdDarkBlue;

                        nTextRngs++;
                        nSelCnt++;
                    }

                    nRngStart = nIdx;
                }
                else if(nCnt == docSet.Count)
                {
                    nPreIdx = nIdx;
                    if (nPreIdx > nRngStart)
                    {
                        sel.SetRange(nRngStart, nPreIdx);
                        //m_addin.m_commTools.RecordMultiSel(sel.Range);
                        sel.set_Style(txtStyle);
                        //sel.Font.Name = "宋体";
                        //sel.Font.NameFarEast = "宋体";
                        //sel.Font.NameAscii = "宋体";
                        //sel.Font.Size = 12.0f; // 小四
                        //sel.Font.ColorIndex = Word.WdColorIndex.wdDarkBlue;

                        nTextRngs++;
                        nSelCnt++;
                    }
                }

                nPreIdx = nIdx;

                if (nSelCnt == MAX_SEL_STEP || (nCnt == docSet.Count && nSelCnt > 0))
                {
                    //m_addin.m_commTools.ExecMultiSel(doc);
                    nSelCnt = 0;

                    //sel.set_Style(txtStyle);
                    //sel.Font.Name = "宋体";
                    //sel.Font.NameFarEast = "宋体";
                    //sel.Font.NameAscii = "宋体";
                    //sel.Font.Size = 12.0f; // 小四
                    //sel.Font.ColorIndex = Word.WdColorIndex.wdDarkBlue;
                }

            }

            DateTime tsBB = DateTime.Now;

            nSelCnt = 0;

            // 目录
            foreach(Word.TableOfContents toc in doc.TablesOfContents)
            {
                // m_addin.m_commTools.RecordMultiSel(toc.Range);

                toc.Range.Font.Name = "微软雅黑";
                toc.Range.Font.NameFarEast = "微软雅黑";
                toc.Range.Font.NameAscii = "微软雅黑";
                toc.Range.Font.ColorIndex = Word.WdColorIndex.wdRed;
                toc.Range.Font.Size = 10.0f; // 小四

                nSelCnt++;
            }

            //if (nSelCnt > 0)
            //{
            //    m_addin.m_commTools.ExecMultiSel(doc);
            //    sel.Font.Name = "微软雅黑";
            //    sel.Font.NameFarEast = "微软雅黑";
            //    sel.Font.NameAscii = "微软雅黑";
            //    sel.Font.ColorIndex = Word.WdColorIndex.wdRed;
            //    sel.Font.Size = 10.0f; // 小四
            //}

            

            float[] fHeadingSize = {0.0f,24.0f,22.0f,20.0f,12.0f,12.0f,12.0f,12.0f,12.0f,12.0f,12.0f };

            nSelCnt = 0;
            nCnt = 0;


            DateTime tsBC = DateTime.Now;

            Word.Style styleHeading = null;

            // 章节
            int nSnHeading = 0;
            foreach (ArrayList arrHeading in arrsSortedHeadings)
            {
                nSnHeading ++;

                try
                {
                	styleHeading = doc.Styles["标题 " + nSnHeading];

                    //styleHeading.Font.Name
                    styleHeading.Font.Name = "微软雅黑";
                    styleHeading.Font.NameFarEast = "微软雅黑";
                    styleHeading.Font.NameAscii = "微软雅黑";
                    //sel.Font.Size = fHeadingSize[i];
                    styleHeading.Font.ColorIndex = Word.WdColorIndex.wdBrightGreen;

                }
                catch (System.Exception ex)
                {
                	continue;
                }

                foreach (Word.Paragraph para in arrHeading)
                {
                    //foreach (Word.Paragraph para in arrsSortedHeadings)
                    //{
                    nCnt++;
                    //m_addin.m_commTools.RecordMultiSel(para.Range);
                    para.set_Style(styleHeading);

                    //para.Range.Select();
                    nSelCnt++;

                    if (nSelCnt == MAX_SEL_STEP || nCnt == arrsSortedHeadings.Count)
                    {
                        //m_addin.m_commTools.ExecMultiSel(doc);

                        //sel.set_Style(styleHeading);

                        //para.Range.Font.Name = "微软雅黑";
                        //para.Range.Font.NameFarEast = "微软雅黑";
                        //para.Range.Font.NameAscii = "微软雅黑";
                        ////sel.Font.Size = fHeadingSize[i];
                        //para.Range.Font.ColorIndex = Word.WdColorIndex.wdBrightGreen;

                        //sel.Font.Name = "微软雅黑";
                        //sel.Font.NameFarEast = "微软雅黑";
                        //sel.Font.NameAscii = "微软雅黑";
                        ////sel.Font.Size = fHeadingSize[i];
                        //sel.Font.ColorIndex = Word.WdColorIndex.wdBrightGreen;

                        nSelCnt = 0;
                    }
                }
                
            }


            // 章节
            //for (int i = 1; i < 10; i++ )
            //{
            //    ArrayList arrs = (ArrayList)arrsHeadings[i];

            //    nSelCnt = 0;
            //    nCnt = 0;

            //    foreach(Word.Paragraph para in arrs)
            //    {
            //        nCnt++;
            //        m_addin.m_commTools.RecordMultiSel(para.Range);
            //        nSelCnt++;

            //        if (nSelCnt == MAX_SEL_STEP || nCnt == arrs.Count)
            //        {
            //            m_addin.m_commTools.ExecMultiSel(doc);

            //            sel.Font.Name = "微软雅黑";
            //            sel.Font.NameFarEast = "微软雅黑";
            //            sel.Font.NameAscii = "微软雅黑";
            //            //sel.Font.Size = fHeadingSize[i];
            //            sel.Font.ColorIndex = Word.WdColorIndex.wdBrightGreen;

            //            nSelCnt = 0;
            //        }
            //    }
            //}

            DateTime tsBD = DateTime.Now;

            // 表格

            nCnt = 0;
            nSelCnt = 0;
            foreach(Word.Table tbl in doc.Tables )
            {
                nCnt++;
                nSelCnt++;

                //tbl.Range.Select();
                //m_addin.m_commTools.RecordMultiSel(tbl.Range);

                //if (nSelCnt == MAX_SEL_STEP || nCnt == doc.Tables.Count)
                //{
                    //m_addin.m_commTools.ExecMultiSel(doc);
                    //tbl.Range.Font
                //tbl.set_Style(tblStyle);

                tbl.Range.Font.Name = "微软雅黑";
                tbl.Range.Font.NameFarEast = "微软雅黑";
                tbl.Range.Font.NameAscii = "微软雅黑";
                tbl.Range.Font.Size = 10.0f;
                tbl.Range.Font.ColorIndex = Word.WdColorIndex.wdBlue;


                    //sel.Font.Name = "微软雅黑";
                    //sel.Font.NameFarEast = "微软雅黑";
                    //sel.Font.NameAscii = "微软雅黑";
                    //sel.Font.Size = 10.0f;
                    //sel.Font.ColorIndex = Word.WdColorIndex.wdBlue;

                    nSelCnt = 0;
                //}
            }

            DateTime tsBE = DateTime.Now;

            // 题注

            Word.Style styleTiZhu = null;

            try
            {
                styleTiZhu = doc.Styles["题注"];

                styleTiZhu.Font.Name = "微软雅黑";
                styleTiZhu.Font.NameFarEast = "微软雅黑";
                styleTiZhu.Font.NameAscii = "微软雅黑";
                styleTiZhu.Font.Size = 10.0f;
                styleTiZhu.Font.ColorIndex = Word.WdColorIndex.wdPink;

                styleTiZhu.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            nCnt = 0;
            nSelCnt = 0;
            foreach(Word.Paragraph para in arrsTiZhuParas )
            {
                nCnt++;
                nSelCnt++;

                //para.Range.Select();
                //m_addin.m_commTools.RecordMultiSel(para.Range);
                para.set_Style(styleTiZhu);

                if (nSelCnt == MAX_SEL_STEP || nCnt == arrsTiZhuParas.Count)
                {
                    //m_addin.m_commTools.ExecMultiSel(doc);

                    //sel.set_Style(styleTiZhu);

                    //para.Range.Font.Name = "微软雅黑";
                    //para.Range.Font.NameFarEast = "微软雅黑";
                    //para.Range.Font.NameAscii = "微软雅黑";
                    //para.Range.Font.Size = 10.0f;
                    //para.Range.Font.ColorIndex = Word.WdColorIndex.wdPink;

                    //sel.Font.Name = "微软雅黑";
                    //sel.Font.NameFarEast = "微软雅黑";
                    //sel.Font.NameAscii = "微软雅黑";
                    //sel.Font.Size = 10.0f;
                    //sel.Font.ColorIndex = Word.WdColorIndex.wdPink;

                    nSelCnt = 0;
                }
            }


            DateTime tsBF = DateTime.Now;

            String strRet = "", strTime = "";

            strRet = "章节：" + nHeadingParas + "个\r\n" +
                     "正文区：" + nTextRngs + "个\r\n" +
                     "表格：" + doc.Tables.Count + "个\r\n" +
                     "题注：" + arrsTiZhuParas.Count + "个\r\n" +
                     "目录：" + doc.TablesOfContents.Count + "个\r\n" +
                     "段落:" + doc.Paragraphs.Count + "个\r\n" +
                     "域:" + doc.Fields.Count + "个";

            TimeSpan tsA = tsAI - tsAA;
            TimeSpan tsB = tsBF - tsBA;

            TimeSpan tsA_BA = tsAB - tsAA;
            TimeSpan tsA_CB = tsAC - tsAB;
            TimeSpan tsA_DC = tsAD - tsAC;
            TimeSpan tsA_ED = tsAE - tsAD;
            TimeSpan tsA_FE = tsAF - tsAE;
            TimeSpan tsA_GF = tsAG - tsAF;
            TimeSpan tsA_HG = tsAH - tsAG;
            TimeSpan tsA_IH = tsAI - tsAH;


            TimeSpan tsB_BA = tsBB - tsBA;
            TimeSpan tsB_CB = tsBC - tsBB;
            TimeSpan tsB_DC = tsBD - tsBC;
            TimeSpan tsB_ED = tsBE - tsBD;
            TimeSpan tsB_FE = tsBF - tsBE;


            strTime = "A:" + tsA.TotalMilliseconds + "\r\n" +
                      "A[BA]" + tsA_BA.TotalMilliseconds + "\r\n" +
                      "A[CB]" + tsA_CB.TotalMilliseconds + "\r\n" +
                      "A[DC]" + tsA_DC.TotalMilliseconds + "\r\n" +
                      "A[ED]" + tsA_ED.TotalMilliseconds + "\r\n" +
                      "A[FE]" + tsA_FE.TotalMilliseconds + "\r\n" +
                      "A[GF]" + tsA_GF.TotalMilliseconds + "\r\n" +
                      "A[HG]" + tsA_HG.TotalMilliseconds + "\r\n" +
                      "A[IH]" + tsA_IH.TotalMilliseconds + "\r\n\r\n" +
                      "B:" + tsB.TotalMilliseconds + "\r\n" +
                      "B[BA]" + tsB_BA.TotalMilliseconds + "\r\n" +
                      "B[CB]" + tsB_CB.TotalMilliseconds + "\r\n" +
                      "B[DC]" + tsB_DC.TotalMilliseconds + "\r\n" +
                      "B[ED]" + tsB_ED.TotalMilliseconds + "\r\n" +
                      "B[FE]" + tsB_FE.TotalMilliseconds;


            return strRet + "\r\n\r\n" + strTime;
        }

        private String changeTextStyle()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;
            // Word.Paragraph para = sel.Range.Paragraphs[1];
            // Office.DocumentProperties
            // doc.GetCrossReferenceItems(Word.WdReferenceType.wdRefTypeHeading);
            
            doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;

            const int MAX_SEL_STEP = 30;

            HashSet<int> docSet = new HashSet<int>();
            HashSet<int> fndSet = new HashSet<int>();

            // ArrayList arrs = new ArrayList();

            // 
            if (doc.TablesOfContents.Count > 0 || doc.TablesOfFigures.Count > 0)
            {
                int nMaxEnd = -1;

                foreach (Word.TableOfContents toc in doc.TablesOfContents)
                {
                    if (toc.Range.End > nMaxEnd)
                    {
                        nMaxEnd = toc.Range.End;
                    }
                }

                foreach (Word.TableOfFigures tFig in doc.TablesOfFigures)
                {
                    if (tFig.Range.End > nMaxEnd)
                    {
                        nMaxEnd = tFig.Range.End;
                    }
                }

                if (nMaxEnd > 0)
                {
                    sel.Start = nMaxEnd + 1;
                    sel.End = nMaxEnd + 1;
                    sel.Range.GoTo();
                }
            }


            DateTime tsAA = DateTime.Now;

            int nStart = sel.Start;// doc.Content.Start;
            int nEnd = doc.Content.End;

            for (int i = nStart; i <= nEnd; i++)
            {
                docSet.Add(i);
            }

            DateTime tsAB = DateTime.Now;


            DateTime tsAC = DateTime.Now;

            int nTmpStart = -1, nTmpEnd = -1;
            int nHeadingParas = 0;

            Word.Style[] styleHeadings = new Word.Style[10];

            for (int i = 1; i <= 9; i++)
            {
                try
                {
                    styleHeadings[i] = doc.Styles[("标题 " + i)];
                }
                catch (System.Exception ex)
                {
                    styleHeadings[i] = doc.Styles.Add("标题 " + i);
                }

                //styleHeadings[i].Font.Name = "微软雅黑";
                //styleHeadings[i].Font.NameFarEast = "微软雅黑";
                //styleHeadings[i].Font.NameAscii = "微软雅黑";
                //sel.Font.Size = fHeadingSize[i];
                styleHeadings[i].Font.ColorIndex = Word.WdColorIndex.wdBrightGreen;
            }


            // 章节
            //ArrayList arrsHeadingRecord = new ArrayList();


            int nSnHeading = 0;
            Word.Paragraph fndPara = null;

            for (int nLvl = 1; nLvl < 10; nLvl++)
            {
                sel.HomeKey(Word.WdUnits.wdStory);
                sel.Find.ClearFormatting();

                sel.Find.ParagraphFormat.OutlineLevel = (Word.WdOutlineLevel)nLvl;

                sel.Find.Text = "";
                sel.Find.Replacement.Text = "";
                sel.Find.Forward = true; // true;
                sel.Find.Wrap = Word.WdFindWrap.wdFindStop; // wdFindContinue;
                sel.Find.Format = true; // True
                sel.Find.MatchCase = false;//False
                sel.Find.MatchWholeWord = false;//False
                sel.Find.MatchByte = false;//False
                sel.Find.MatchWildcards = false;//False
                sel.Find.MatchSoundsLike = false;//False
                sel.Find.MatchAllWordForms = false;//False

                sel.Find.Execute();

                while (sel.Find.Found)
                {
                    fndPara = sel.Range.Paragraphs[1];

                    if (fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        nTmpStart = fndPara.Range.Start;
                        nTmpEnd = fndPara.Range.End;
                        if (!fndSet.Contains(nTmpStart + 1))
                        {
                            nHeadingParas++;
                            for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                            {
                                fndSet.Add(i);
                            }

                            //arrsHeadingRecord.Add(fndPara);

                            nSnHeading = (int)fndPara.OutlineLevel;
                            fndPara.set_Style(styleHeadings[nSnHeading]);

                            if (fndPara.Next() == null)
                            {
                                break;
                            }
                        }
                    }
                    // arrsHeadings.Add(fndPara);

                    sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                    sel.Find.Execute();
                }
            }



            //ArrayList arrsStyle = new ArrayList();
            //int nSnHeading = 0;
            //Word.Style styItem = null;
            //Word.Paragraph fndPara = null;

            //foreach (Word.Style styleItem in doc.Styles)
            //{
            //    if (styleItem.Type == Word.WdStyleType.wdStyleTypeParagraph &&
            //        styleItem.ParagraphFormat.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
            //    {
            //        arrsStyle.Add(styItem.NameLocal);
            //    }
            //}

            //foreach (String strName in arrsStyle)
            //{
            //    try
            //    {
            //        styItem = doc.Styles[strName];
            //    }
            //    catch (System.Exception ex)
            //    {
            //        continue;
            //    }

            //    sel.HomeKey(Word.WdUnits.wdStory);
            //    sel.Find.ClearFormatting();

            //    sel.Find.set_Style(styItem);

            //    sel.Find.Text = "";
            //    sel.Find.Replacement.Text = "";
            //    sel.Find.Forward = true; // true;
            //    sel.Find.Wrap = Word.WdFindWrap.wdFindStop; // wdFindContinue;
            //    sel.Find.Format = true; // True
            //    sel.Find.MatchCase = false;//False
            //    sel.Find.MatchWholeWord = false;//False
            //    sel.Find.MatchByte = false;//False
            //    sel.Find.MatchWildcards = false;//False
            //    sel.Find.MatchSoundsLike = false;//False
            //    sel.Find.MatchAllWordForms = false;//False

            //    sel.Find.Execute();

            //    while (sel.Find.Found)
            //    {
            //        fndPara = sel.Range.Paragraphs[1];

            //        if (fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
            //        {
            //            nTmpStart = fndPara.Range.Start;
            //            nTmpEnd = fndPara.Range.End;
            //            if (!fndSet.Contains(nTmpStart + 1))
            //            {
            //                nHeadingParas++;
            //                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
            //                {
            //                    fndSet.Add(i);
            //                }

            //                arrsHeadingRecord.Add(fndPara);

            //                nSnHeading = (int)fndPara.OutlineLevel;
            //                fndPara.set_Style(styleHeadings[nSnHeading]);
            //            }
            //        }
            //        // arrsHeadings.Add(fndPara);

            //        sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

            //        sel.Find.Execute();
            //    }
            //}


            //ArrayList arrsHeadings = new ArrayList();

            


            //int nSnHeading = 0;
            //Word.Paragraph bkPara = null;

            //doc.Bookmarks.ShowHidden = true;
            //foreach (Word.Bookmark bkmk in doc.Bookmarks)
            //{
            //    // bkmk.StoryType
            //    if (bkmk.Range.Paragraphs.Count == 1)
            //    {
            //        bkPara = bkmk.Range.Paragraphs[1];
            //        if (bkPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
            //        {
            //            nTmpStart = bkPara.Range.Start;
            //            nTmpEnd = bkPara.Range.End;
            //            if (!fndSet.Contains(nTmpStart + 1))
            //            {
            //                nHeadingParas++;
            //                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
            //                {
            //                    fndSet.Add(i);
            //                }

            //                nSnHeading = (int)bkPara.OutlineLevel;
            //                bkPara.set_Style(styleHeadings[nSnHeading]);
            //            }
            //        }
            //    }
            //}

            DateTime tsAD = DateTime.Now;

            // 目录
            foreach (Word.TableOfContents toc in doc.TablesOfContents)
            {
                nTmpStart = toc.Range.Start;
                nTmpEnd = toc.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }

                //toc.Range.Font.Name = "微软雅黑";
                //toc.Range.Font.NameFarEast = "微软雅黑";
                //toc.Range.Font.NameAscii = "微软雅黑";
                toc.Range.Font.ColorIndex = Word.WdColorIndex.wdRed;
                //toc.Range.Font.Size = 10.0f; // 小四
            }

            foreach (Word.TableOfFigures tFig in doc.TablesOfFigures)
            {
                nTmpStart = tFig.Range.Start;
                nTmpEnd = tFig.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }

                //tFig.Range.Font.Name = "微软雅黑";
                //tFig.Range.Font.NameFarEast = "微软雅黑";
                //tFig.Range.Font.NameAscii = "微软雅黑";
                tFig.Range.Font.ColorIndex = Word.WdColorIndex.wdRed;
                //tFig.Range.Font.Size = 10.0f; // 小四
            }

            DateTime tsAE = DateTime.Now;

            // Tables
            foreach (Word.Table tbl in doc.Tables)
            {
                nTmpStart = tbl.Range.Start;
                nTmpEnd = tbl.Range.End;

                for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                {
                    fndSet.Add(i);
                }

                //tbl.Range.Font.Name = "微软雅黑";
                //tbl.Range.Font.NameFarEast = "微软雅黑";
                //tbl.Range.Font.NameAscii = "微软雅黑";
                //tbl.Range.Font.Size = 10.0f;
                tbl.Range.Font.ColorIndex = Word.WdColorIndex.wdBlue;

            }

            DateTime tsAF = DateTime.Now;

            // 题注
            // ArrayList arrsTiZhuParas = m_addin.m_commTools.getTiZhuParasInScope(doc);
            ArrayList arrsTiZhuParas = new ArrayList();
            Word.Paragraph tmpPara = null;

            Word.TableOfContents tocItem = doc.TablesOfContents[1];
            Word.Field fldStart = null;

            if (tocItem != null)
            {
                fldStart = tocItem.Range.Fields[tocItem.Range.Fields.Count];
                fldStart = fldStart.Next;
            }

            // foreach(Word.Field fld in doc.Fields)
            //

            Word.Style styleTiZhu = null;
            try
            {
                styleTiZhu = doc.Styles["题注"];

                //styleTiZhu.Font.Name = "微软雅黑";
                //styleTiZhu.Font.NameFarEast = "微软雅黑";
                //styleTiZhu.Font.NameAscii = "微软雅黑";
                //styleTiZhu.Font.Size = 10.0f;
                styleTiZhu.Font.ColorIndex = Word.WdColorIndex.wdPink;

                styleTiZhu.ParagraphFormat.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            int nTiZhuCount = 0;

            while (fldStart != null)
            {
                if (fldStart.Type == Word.WdFieldType.wdFieldSequence)
                {
                    nTiZhuCount++;

                    tmpPara = fldStart.Result.Paragraphs[1];

                    // arrsTiZhuParas.Add(tmpPara);

                    nTmpStart = tmpPara.Range.Start;
                    nTmpEnd = tmpPara.Range.End;

                    for (int i = nTmpStart + 1; i < nTmpEnd; i++)
                    {
                        fndSet.Add(i);
                    }

                    tmpPara.set_Style(styleTiZhu);
                }

                fldStart = fldStart.Next;
            }


            DateTime tsAG = DateTime.Now;

            DateTime tsAH = DateTime.Now;
            docSet.ExceptWith(fndSet);
            DateTime tsAI = DateTime.Now;

            int nPreIdx = -1;
            int nRngStart = -1;
            int nCnt = 0;

            int nSelCnt = 0;
            int nTextRngs = 0;

            Word.Style txtStyle = null;
            String strTxtStyleName = "正文区";

            try
            {
                txtStyle = doc.Styles[strTxtStyleName];
            }
            catch (System.Exception ex)
            {
                txtStyle = doc.Styles.Add(strTxtStyleName);

                //txtStyle.Font.Name = "宋体";
                //txtStyle.Font.NameFarEast = "宋体";
                //txtStyle.Font.NameAscii = "宋体";
                //txtStyle.Font.Size = 12.0f; // 小四
                txtStyle.Font.ColorIndex = Word.WdColorIndex.wdDarkBlue;
            }

            DateTime tsBA = DateTime.Now;
            Word.Range txtRng = null;

            foreach (int nIdx in docSet)
            {
                nCnt++;

                if (nRngStart == -1)
                {
                    nRngStart = nIdx;
                }

                if (nIdx - nPreIdx > 1)
                {
                    if (nPreIdx > nRngStart)
                    {
                        txtRng = doc.Range(nRngStart, nPreIdx);
                        txtRng.set_Style(txtStyle);
                        
                        nTextRngs++;
                        nSelCnt++;
                    }

                    nRngStart = nIdx;
                }
                else if (nCnt == docSet.Count)
                {
                    nPreIdx = nIdx;
                    if (nPreIdx > nRngStart)
                    {
                        txtRng = doc.Range(nRngStart, nPreIdx);
                        txtRng.set_Style(txtStyle);

                        nTextRngs++;
                        nSelCnt++;
                    }
                }

                nPreIdx = nIdx;
            }

            DateTime tsBB = DateTime.Now;

            nSelCnt = 0;

            
            DateTime tsBC = DateTime.Now;

            DateTime tsBD = DateTime.Now;

            // 表格

            nCnt = 0;
            nSelCnt = 0;

            DateTime tsBE = DateTime.Now;

            DateTime tsBF = DateTime.Now;

            String strRet = "", strTime = "";
            int nTocParasNum = 0;
            
            if(doc.TablesOfContents.Count > 0)
            {
                nTocParasNum = doc.TablesOfContents[1].Range.Paragraphs.Count;
            }

            strRet = "章节：" + nHeadingParas + "个\r\n" +
                     "正文区：" + nTextRngs + "个\r\n" +
                     "表格：" + doc.Tables.Count + "个\r\n" +
                     "题注：" + nTiZhuCount + "个\r\n" +
                     "目录：" + doc.TablesOfContents.Count + "个\r\n" +
                     "目录段落：" + nTocParasNum + "个\r\n" +
                     "段落:" + doc.Paragraphs.Count + "个\r\n" +
                     "域:" + doc.Fields.Count + "个\r\n" +
                     "Bks：" + doc.Bookmarks.Count + "个";

            TimeSpan tsTotal = tsBF - tsAA;
            TimeSpan tsA = tsAI - tsAA;
            TimeSpan tsB = tsBF - tsBA;

            TimeSpan tsA_BA = tsAB - tsAA;
            TimeSpan tsA_CB = tsAC - tsAB;
            TimeSpan tsA_DC = tsAD - tsAC;
            TimeSpan tsA_ED = tsAE - tsAD;
            TimeSpan tsA_FE = tsAF - tsAE;
            TimeSpan tsA_GF = tsAG - tsAF;
            TimeSpan tsA_HG = tsAH - tsAG;
            TimeSpan tsA_IH = tsAI - tsAH;


            TimeSpan tsB_BA = tsBB - tsBA;
            TimeSpan tsB_CB = tsBC - tsBB;
            TimeSpan tsB_DC = tsBD - tsBC;
            TimeSpan tsB_ED = tsBE - tsBD;
            TimeSpan tsB_FE = tsBF - tsBE;


            strTime = "Total:" + tsTotal.TotalMilliseconds + "\r\n\r\n" +
                      "A:" + tsA.TotalMilliseconds + "\r\n" +
                      "A[BA]" + tsA_BA.TotalMilliseconds + "\r\n" +
                      "A[CB]" + tsA_CB.TotalMilliseconds + "\r\n" +
                      "A[DC]" + tsA_DC.TotalMilliseconds + "\r\n" +
                      "A[ED]" + tsA_ED.TotalMilliseconds + "\r\n" +
                      "A[FE]" + tsA_FE.TotalMilliseconds + "\r\n" +
                      "A[GF]" + tsA_GF.TotalMilliseconds + "\r\n" +
                      "A[HG]" + tsA_HG.TotalMilliseconds + "\r\n" +
                      "A[IH]" + tsA_IH.TotalMilliseconds + "\r\n\r\n" +
                      "B:" + tsB.TotalMilliseconds + "\r\n" +
                      "B[BA]" + tsB_BA.TotalMilliseconds + "\r\n" +
                      "B[CB]" + tsB_CB.TotalMilliseconds + "\r\n" +
                      "B[DC]" + tsB_DC.TotalMilliseconds + "\r\n" +
                      "B[ED]" + tsB_ED.TotalMilliseconds + "\r\n" +
                      "B[FE]" + tsB_FE.TotalMilliseconds;

            return strRet + "\r\n\r\n" + strTime;
        }


        private void btn4Test_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;
            Word.WdViewType oView = doc.ActiveWindow.View.Type;

            //String strRet = "";

            ArrayList arrsHeading = new ArrayList();
            int nHeadingParasCount = 0;
            //String strRet = "";

//            doc.Bookmarks.ShowHidden = true;
//            strRet = "" + doc.Bookmarks.Count;
            int nTotalPages1 = doc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);
            DateTime dsA = DateTime.Now;
            String strRet = changeTextStyle();
            DateTime dsB = DateTime.Now;

            doc.ActiveWindow.View.Type = oView;
            sel.Start = nPosStart;
            sel.End = nPosEnd;
            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range);

            TimeSpan tsBA = dsB - dsA;
            int nTotalPages2 = doc.ComputeStatistics(Word.WdStatistic.wdStatisticPages);// (Word.WdInformation.wdNumberOfPagesInDocument);

            String strTime = ((float)(tsBA.TotalMilliseconds/1000.0f)).ToString("0.0");

            MessageBox.Show("文档总页数：" + nTotalPages1 + "," + nTotalPages2 + "\r\n排版用时：" + strTime + "秒\r\n\r\n" + strRet);

            return;
        }


        int nTestIndex = 0;
        // 测试代码
        private void button1_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Paragraph nextPara = null, para = null;

            char[] trimChars = new char[] { '　', ' ', '\t', '\r', '\n', '\a',(char)11, '\f',(char)14,(char)12,(char)11 };

            Hashtable origTiZhuHash = new Hashtable();
            ArrayList arr = null;

            String strItem = "";
            int nCnt = 0, nStepCnt = 0;
            foreach(Word.Table tbl in doc.Tables)
            {
                nCnt++;

                arr = new ArrayList();
                arr.Add("");
                arr.Add("");

                para = tbl.Range.Paragraphs.First;

                nStepCnt = 0;

                while(para != null)
                {
                    para = para.Previous();

                    if (para == null || para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        break;
                    }

                    strItem = para.Range.Text.Trim(trimChars);

                    if (String.IsNullOrWhiteSpace(strItem))
                    {
                        continue;
                    }
                    else
                    {
                        nStepCnt++;
                    }

                    if (m_addin.m_commTools.isTiZhu(para.Range))
                    {
                        arr[0] = para.Range.Text;
                        break;
                    }

                    if (nStepCnt >= 3)
                    {
                        break;
                    }

                }


                // next
                para = tbl.Range.Paragraphs.Last;

                nStepCnt = 0;

                while (para != null)
                {
                    para = para.Next();

                    if (para == null || para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        break;
                    }

                    strItem = para.Range.Text.Trim(trimChars);

                    if (String.IsNullOrWhiteSpace(strItem))
                    {
                        continue;
                    }
                    else
                    {
                        nStepCnt++;
                    }

                    if (m_addin.m_commTools.isTiZhu(para.Range))
                    {
                        arr[1] = para.Range.Text;
                        break;
                    }

                    if (nStepCnt >= 3)
                    {
                        break;
                    }

                }

                origTiZhuHash.Add(("表" + nCnt),arr);
            }



            ArrayList arrIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrIsolatePicsInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsInTbl = new ArrayList();

            ArrayList arrPics = null;

            arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,true);



            nCnt = 0;
            nStepCnt = 0;
            foreach (Word.Paragraph inshpPara in arrIsolatePicsNotInTbl)
            {
                nCnt++;

                arr = new ArrayList();
                arr.Add("");
                arr.Add("");

                para = inshpPara;

                nStepCnt = 0;

                while (para != null)
                {
                    para = para.Previous();

                    if (para == null || para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        break;
                    }

                    strItem = para.Range.Text.Trim(trimChars);

                    if (String.IsNullOrWhiteSpace(strItem))
                    {
                        continue;
                    }
                    else
                    {
                        nStepCnt++;
                    }

                    if (m_addin.m_commTools.isTiZhu(para.Range))
                    {
                        arr[0] = para.Range.Text;
                        break;
                    }

                    if (nStepCnt >= 3)
                    {
                        break;
                    }

                }


                // next
                para = inshpPara;

                nStepCnt = 0;

                while (para != null)
                {
                    para = para.Next();

                    if (para == null || para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        break;
                    }

                    strItem = para.Range.Text.Trim(trimChars);

                    if (String.IsNullOrWhiteSpace(strItem))
                    {
                        continue;
                    }
                    else
                    {
                        nStepCnt++;
                    }

                    if (m_addin.m_commTools.isTiZhu(para.Range))
                    {
                        arr[1] = para.Range.Text;
                        break;
                    }

                    if (nStepCnt >= 3)
                    {
                        break;
                    }

                }

                origTiZhuHash.Add(("图" + nCnt), arr);
            }


            // insert cap
            // 




            return;
        }

        
        /// <summary>
        /// 数字的位置
        /// </summary>
        /// <param name="strItem"></param>
        /// <returns></returns>
        private int bNumberIndex(String strItem)
        {
            int nIndex = -1;

            CharEnumerator chEter = strItem.GetEnumerator();
            char ch = ' ';

            while (chEter.MoveNext()) // 遍历
            {
                ch = chEter.Current;

                if (ch <= 31 || ch == '.'  || ch == ' '  || ch == '\f' ||
                    ch == '\t' || ch == '\r' || ch == '\n' ||
                    (ch >= '0' && ch <= '9')) // 判断
                {
                    nIndex++; 
                }
                else 
                {
                    break; // 中断
                }

            }

            return nIndex;
        }

        /// <summary>
        /// 范围的重叠判断
        /// </summary>
        /// <param name="rng1"></param>
        /// <param name="rng2"></param>
        /// <returns></returns>
        public Boolean RangeOverlap(Word.Range rng1, Word.Range rng2)
        {
            Boolean bRet = false;

            if (rng1.Start <= rng2.Start && rng1.End >= rng2.End) // 区域判断
            {
                bRet = true;
            }
            else if (rng2.Start <= rng1.Start && rng2.End >= rng1.End) // 区域判断
            {
                bRet = true;
            }
            else if (rng1.Start <= rng2.Start && rng1.End > rng2.Start && rng1.End <= rng2.End) // 区域判断
            {
                bRet = true;
            }
            else if (rng2.Start <= rng1.Start && rng2.End > rng1.Start && rng2.End <= rng1.End) // 区域判断
            {
                bRet = true;
            }

            return bRet;
        }

        private void treeView2_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            //MessageBox.Show(e.Node.FullPath);
            return;
        }



        private String EncodeFontInfo(Word.Font fnt)
        {
            String strRet = "";

            strRet += "[AllCaps:" + fnt.AllCaps + "]";
            strRet += "[Animation:" + (int)fnt.Animation + "]";
            // strRet += "[Application:" + fnt.Application + "]";
            strRet += "[Bold:" + fnt.Bold + "]";
            strRet += "[BoldBi:" + fnt.BoldBi + "]";
            // strRet += "[Borders:" + fnt.Borders + "]";
            strRet += "[ColorIndex:" + (int)fnt.ColorIndex + "]";
            strRet += "[ColorIndexBi:" + (int)fnt.ColorIndexBi + "]";
            strRet += "[ContextualAlternates:" + fnt.ContextualAlternates + "]";
            // strRet += "[Creator:" + fnt.Creator + "]";
            strRet += "[DiacriticColor:" + (int)fnt.DiacriticColor + "]";
            strRet += "[DisableCharacterSpaceGrid:" + fnt.DisableCharacterSpaceGrid + "]";
            strRet += "[DoubleStrikeThrough:" + fnt.DoubleStrikeThrough + "]";
            // strRet += "[Duplicate:" + fnt.Duplicate + "]";
            strRet += "[Emboss:" + fnt.Emboss + "]";
            strRet += "[EmphasisMark:" + fnt.EmphasisMark + "]";
            strRet += "[Engrave:" + fnt.Engrave + "]";
            // strRet += "[Fill:" + fnt.Fill + "]";
            // strRet += "[Glow:" + fnt.Glow + "]";
            strRet += "[Hidden:" + fnt.Hidden + "]";
            strRet += "[Italic:" + fnt.Italic + "]";
            strRet += "[ItalicBi:" + fnt.ItalicBi + "]";
            strRet += "[Kerning:" + fnt.Kerning + "]";
            // ?strRet += "[Ligatures:" + (int)fnt.Ligatures + "]";
            // strRet += "[Line:" + fnt.Line + "]";
            strRet += "[Name:" + fnt.Name + "]";
            strRet += "[NameAscii:" + fnt.NameAscii + "]";
            strRet += "[NameBi:" + fnt.NameBi + "]";
            strRet += "[NameFarEast:" + fnt.NameFarEast + "]";
            strRet += "[NameOther:" + fnt.NameOther + "]";
            strRet += "[NumberForm:" + (int)fnt.NumberForm + "]";
            strRet += "[NumberSpacing:" + (int)fnt.NumberSpacing + "]";
            strRet += "[Outline:" + fnt.Outline + "]";
            // strRet += "[Parent:" + fnt.Parent + "]";
            strRet += "[Position:" + fnt.Position + "]";
            // strRet += "[Reflection:" + fnt.Reflection + "]";
            strRet += "[Scaling:" + fnt.Scaling + "]";
            // strRet += "[Shading:" + fnt.Shading + "]";
            strRet += "[Shadow:" + fnt.Shadow + "]";
            strRet += "[Size:" + fnt.Size + "]";
            strRet += "[SizeBi:" + fnt.SizeBi + "]";
            strRet += "[SmallCaps:" + fnt.SmallCaps + "]";
            strRet += "[Spacing:" + fnt.Spacing + "]";
            strRet += "[StrikeThrough:" + fnt.StrikeThrough + "]";
            strRet += "[StylisticSet:" + (int)fnt.StylisticSet + "]";
            strRet += "[Subscript:" + fnt.Subscript + "]";
            strRet += "[Superscript:" + fnt.Superscript + "]";
            // strRet += "[TextColor:" + fnt.TextColor + "]";
            // strRet += "[TextShadow:" + fnt.TextShadow + "]";
            // strRet += "[ThreeD:" + fnt.ThreeD + "]";
            strRet += "[Underline:" + (int)fnt.Underline + "]";
            strRet += "[UnderlineColor:" + (int)fnt.UnderlineColor + "]";

            return strRet;
        }

        
        private void txtIgnorePages_TextChanged(object sender, EventArgs e)
        {
            int nRet = 0;
            if (!int.TryParse(txtIgnorePages.Text,out nRet)) // 转换
            {
                MessageBox.Show("必须输入整数");
            }

            return;
        }

        /*
        public ArrayList getInlineShpsInScope(Word.Document curDoc,
                                        ArrayList arrIsolatePicsNotInTbl, ArrayList arrNotIsolatePicsNotInTbl,
                                        ArrayList arrIsolatePicsInTbl, ArrayList arrNotIsolatePicsInTbl,
                                        Boolean bParagraph = false,
                                        Word.Range scopeRange = null)
        {
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            // search all NOT text body paragraph
            int nOStart = sel.Start;
            int nOEnd = sel.End;

            Word.Paragraph itemPara = sel.Paragraphs[1];

            int nStartPos = itemPara.Range.Start;
            int nEndPos = nStartPos;

            ArrayList arrAllPics = new ArrayList();
            Word.Paragraph para = null;

            Word.WdViewType oViewType = curDoc.ActiveWindow.View.Type;
            if (curDoc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                curDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                curDoc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }


            if (scopeRange == null)
            {
                sel.HomeKey(Word.WdUnits.wdStory); // sel.Start = nOStart;sel.End = nOStart;
            }
            else
            {
                if (scopeRange.Paragraphs.Count > 0)
                {
                    para = scopeRange.Paragraphs[1];

                    sel.Start = para.Range.Start;
                    sel.End = sel.Start;
                }
                else
                {
                    sel.Start = nStartPos;
                    sel.End = sel.Start;
                }
                // sel.End = nEndPos;

                sel.Range.GoTo();
            }

            sel.Find.ClearFormatting();

            sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);
            // sel.Find.ParagraphFormat.OutlineLevel = (Word.WdOutlineLevel)nLvl;

            sel.Find.Text = "^g";
            sel.Find.Replacement.Text = "";
            sel.Find.Forward = true;
            sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
            sel.Find.Format = false; // true
            sel.Find.MatchCase = false;
            sel.Find.MatchWholeWord = false;
            sel.Find.MatchByte = false;
            sel.Find.MatchWildcards = false;
            sel.Find.MatchSoundsLike = false;
            sel.Find.MatchAllWordForms = false;

            bool bRet = sel.Find.Execute();

            Boolean bInTbl = false, bIsIsolate = false;

            while (sel.Find.Found)
            {
                para = sel.Range.Paragraphs[1];

                if (para != null && sel.Range.InlineShapes.Count > 0)
                {
                    Word.InlineShape inShp = sel.Range.InlineShapes[1];

                    if (scopeRange == null || RangeOverlap(inShp.Range, scopeRange))
                    {
                        if (bParagraph)
                        {
                            arrAllPics.Add(para);
                        }
                        else
                        {
                            arrAllPics.Add(inShp);
                        }

                        bInTbl = inShp.Range.get_Information(Word.WdInformation.wdWithInTable);
                        bIsIsolate = m_addin.m_commTools.isIsolatePic(para); // inShp.Range.Paragraphs[1]

                        if (bInTbl)
                        {
                            if (bIsIsolate)
                            {
                                if (arrIsolatePicsInTbl != null)
                                {
                                    if (bParagraph)
                                    {
                                        arrIsolatePicsInTbl.Add(para);
                                    }
                                    else
                                    {
                                        arrIsolatePicsInTbl.Add(inShp);
                                    }
                                }
                            }
                            else
                            {
                                if (arrNotIsolatePicsInTbl != null)
                                {
                                    if (bParagraph)
                                    {
                                        arrNotIsolatePicsInTbl.Add(para);
                                    }
                                    else
                                    {
                                        arrNotIsolatePicsInTbl.Add(inShp);
                                    }
                                }
                            }
                        }
                        else
                        {
                            if (bIsIsolate)
                            {
                                if (arrIsolatePicsNotInTbl != null)
                                {
                                    if (bParagraph)
                                    {
                                        arrIsolatePicsNotInTbl.Add(para);
                                    }
                                    else
                                    {
                                        arrIsolatePicsNotInTbl.Add(inShp);
                                    }
                                }
                            }
                            else
                            {
                                if (arrNotIsolatePicsNotInTbl != null)
                                {
                                    if (bParagraph)
                                    {
                                        arrNotIsolatePicsNotInTbl.Add(para);
                                    }
                                    else
                                    {
                                        arrNotIsolatePicsNotInTbl.Add(inShp);
                                    }
                                }
                            }
                        }

                    }
                    else
                    {
                        break;
                    }

                }

                if (bParagraph)
                {
                    sel.Start = para.Range.End;
                    sel.End = para.Range.End;

                    sel.Range.GoTo();
                }

                //sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                bRet = sel.Find.Execute();
            }// while

            //sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

            curDoc.ActiveWindow.View.Type = oViewType;

            sel.Start = nOStart;
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo();
            curDoc.ActiveWindow.ScrollIntoView(sel.Range);

            return arrAllPics;
        }
        */



        private void chkIgnorePages_CheckedChanged(object sender, EventArgs e)
        {
            if (chkIgnorePages.Checked)
            {
                txtIgnorePages.Enabled = true; // 转换
            }
            else
            {
                txtIgnorePages.Enabled = false; // 转换
            }

            return;
        }

        // previous
        private void button2_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("因为无活动文档，不能应用");
                return;
            }
            finally
            {

            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Hashtable hashScopeHeading = m_addin.m_commTools.getHeadingScope(doc);

            ArrayList arrTiZhuParas = m_addin.m_commTools.getTiZhuParasInScope(doc);

            int nScopeHeading = -1;

            String strRet = "", strHeading = "";

            foreach(Word.Paragraph para in arrTiZhuParas )
            {
                nScopeHeading = para.Range.Start ;

                strHeading = "";
                if (hashScopeHeading.Contains(nScopeHeading))
                {
                    strHeading = (String)hashScopeHeading[nScopeHeading];
                }

                strRet += "[" + para.Range.Text + "]:" + strHeading + "\r\n";

            }

            MessageBox.Show(strRet);

            return;

        }


        private void button3_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            // sel.InsertParagraphBefore();

            dynamic dg = app.Dialogs[Word.WdWordDialog.wdDialogFormatStyle];

            String strInfo = "";
            // Name, Delete, Merge, NewName, BasedOn, NextStyle, Type, FileName, Source,
            //     AddToTemplate, Define, Rename, Apply, New, Link

            strInfo = "Name:" + dg.Name + ",NewName:" + dg.NewName + ",FileName:" + dg.FileName + ",Source:" + dg.Source;
            MessageBox.Show(strInfo);

            dg.Name = "标题 1";
            dg.Execute();

            strInfo = "Name:" + dg.Name + ",NewName:" + dg.NewName + ",FileName:" + dg.FileName + ",Source:" + dg.Source;
            MessageBox.Show(strInfo);            

            return;
        }

        private void btnNumTrans_Click(object sender, EventArgs e)
        {
//             // 数额转换
//             txtNumMoney;
//             txtMoneySimpLittle;
//             txtMoneySimpBig;
// 
//             txtMoneySimpLittleTbl;
//             txtMoneySimpBigTbl;

            String strInputMoney = txtNumMoney.Text.Trim();
            String strInputMoneySimpLittle = txtMoneySimpLittle.Text.Trim();
            String strInputMoneySimpBig = txtMoneySimpBig.Text.Trim();
            String strInputMoneySimpLittleTbl = txtMoneySimpLittleTbl.Text.Trim();
            String strInputMoneySimpBigTbl = txtMoneySimpBigTbl.Text.Trim();

            String strResMoney = "", strResMoneySimpLittle = "";
            String strResMoneySimpBig = "", strResMoneySimpLittleTbl = "", strResMoneySimpBigTbl = "";

            double dbMoney = 0.0;
            String strRetMsg = "";

            if (!strInputMoney.Equals(""))
            {
                
                if(!double.TryParse(strInputMoney,out dbMoney))
                {
                    txtDigitNum.SelectAll();
                    MessageBox.Show("数额转换中数额非数字");
                    txtDigitNum.Focus();

                    return;
                }
                // 数值转换
                strResMoney = strInputMoney;
                strResMoneySimpLittle = m_commonTools.num2SimpValueString(dbMoney, false, true);// 数值转换
                strResMoneySimpBig = m_commonTools.num2SimpValueString(dbMoney, true, true);// 数值转换

                strResMoneySimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbMoney, false, true);// 数值转换
                strResMoneySimpBigTbl = m_commonTools.num2SimpValueString1by1(dbMoney, true, true);// 数值转换

            }
            else if (!strInputMoneySimpLittle.Equals(""))
            {
                dbMoney = m_commonTools.SimpValueString2num(strInputMoneySimpLittle, ref strRetMsg);// 数值转换

                if(double.IsNaN(dbMoney))
                {
                    txtMoneySimpLittle.SelectAll();
                    MessageBox.Show("数额输入有误："+strRetMsg);
                    txtMoneySimpLittle.Focus();
                    return ;
                }

                strResMoney = dbMoney.ToString();
                // strResMoneySimpLittle = m_commonTools.num2SimpValueString(dbMoney, false, true);
                strResMoneySimpBig = m_commonTools.num2SimpValueString(dbMoney, true, true);// 数值转换

                strResMoneySimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbMoney, false, true);// 数值转换
                strResMoneySimpBigTbl = m_commonTools.num2SimpValueString1by1(dbMoney, true, true);// 数值转换

                strResMoneySimpLittle = strInputMoneySimpLittle;
            }
            else if (!strInputMoneySimpBig.Equals(""))
            {
                dbMoney = m_commonTools.SimpValueString2num(strInputMoneySimpBig, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbMoney))
                {
                    txtMoneySimpBig.SelectAll();
                    MessageBox.Show("数额输入有误：" + strRetMsg);
                    txtMoneySimpBig.Focus();
                    return;
                }

                strResMoney = dbMoney.ToString();
                strResMoneySimpLittle = m_commonTools.num2SimpValueString(dbMoney, false, true);// 数值转换
                // strResMoneySimpBig = m_commonTools.num2SimpValueString(dbMoney, true, true);
                strResMoneySimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbMoney, false, true);// 数值转换
                strResMoneySimpBigTbl = m_commonTools.num2SimpValueString1by1(dbMoney, true, true);// 数值转换

                strResMoneySimpBig = strInputMoneySimpBig;
            }
            else if (!strInputMoneySimpLittleTbl.Equals(""))
            {
                dbMoney = m_commonTools.SimpValueString2num(strInputMoneySimpLittleTbl, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbMoney))
                {
                    txtMoneySimpLittleTbl.SelectAll();
                    MessageBox.Show("数额输入有误：" + strRetMsg);
                    txtMoneySimpLittleTbl.Focus();
                    return;
                }

                strResMoney = dbMoney.ToString();
                strResMoneySimpLittle = m_commonTools.num2SimpValueString(dbMoney, false, true);// 数值转换
                strResMoneySimpBig = m_commonTools.num2SimpValueString(dbMoney, true, true);// 数值转换
                // strResMoneySimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbMoney, false, true);
                strResMoneySimpBigTbl = m_commonTools.num2SimpValueString1by1(dbMoney, true, true);// 数值转换

                strResMoneySimpLittleTbl = strInputMoneySimpLittleTbl;
            }
            else if (!strInputMoneySimpBigTbl.Equals(""))
            {
                dbMoney = m_commonTools.SimpValueString2num(strInputMoneySimpBigTbl, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbMoney))
                {
                    txtMoneySimpBigTbl.SelectAll();
                    MessageBox.Show("数额输入有误：" + strRetMsg);
                    txtMoneySimpBigTbl.Focus();
                    return;
                }

                strResMoney = dbMoney.ToString();
                strResMoneySimpLittle = m_commonTools.num2SimpValueString(dbMoney, false, true);// 数值转换
                strResMoneySimpBig = m_commonTools.num2SimpValueString(dbMoney, true, true);// 数值转换
                strResMoneySimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbMoney, false, true);// 数值转换
                // strResMoneySimpBigTbl = m_commonTools.num2SimpValueString1by1(dbMoney, true, true);

                strResMoneySimpBigTbl = strInputMoneySimpBigTbl;
            }
            else
            {

            }

            // fill填充
            txtNumMoney.Text = strResMoney;
            txtMoneySimpLittle.Text = strResMoneySimpLittle;
            txtMoneySimpBig.Text = strResMoneySimpBig;

            txtMoneySimpLittleTbl.Text = strResMoneySimpLittleTbl;
            txtMoneySimpBigTbl.Text = strResMoneySimpBigTbl;

// 
//             // 数值转换
//             txtNumValue;
//             txtNumValueSimpLittle;
//             txtNumValueSimpBig;
// 
//             txtNumValueSimpLittleTbl;
//             txtNumValueSimpBigTbl;
// 
            String strInputNumValue = txtNumValue.Text.Trim();
            String strInputNumValueSimpLittle = txtNumValueSimpLittle.Text.Trim();
            String strInputNumValueSimpBig = txtNumValueSimpBig.Text.Trim();
            String strInputNumValueSimpLittleTbl = txtNumValueSimpLittleTbl.Text.Trim();
            String strInputNumValueSimpBigTbl = txtNumValueSimpBigTbl.Text.Trim();

            String strResNumValue = "", strResNumValueSimpLittle = "";
            String strResNumValueSimpBig = "", strResNumValueSimpLittleTbl = "", strResNumValueSimpBigTbl = "";

            double dbNumValue = 0.0;

            if (!strInputNumValue.Equals(""))
            {

                if (!double.TryParse(strInputNumValue, out dbNumValue))
                {
                    txtDigitNum.SelectAll();
                    MessageBox.Show("数值转换中数值非数字");
                    txtDigitNum.Focus();

                    return;
                }
                // 数值转换
                strResNumValue = strInputNumValue;
                strResNumValueSimpLittle = m_commonTools.num2SimpValueString(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBig = m_commonTools.num2SimpValueString(dbNumValue, true, false);// 数值转换

                strResNumValueSimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBigTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, true, false);// 数值转换

            }
            else if (!strInputNumValueSimpLittle.Equals(""))
            {
                dbNumValue = m_commonTools.SimpValueString2num(strInputNumValueSimpLittle, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbNumValue))
                {
                    txtNumValueSimpLittle.SelectAll();
                    MessageBox.Show("数值输入有误：" + strRetMsg);
                    txtNumValueSimpLittle.Focus();
                    return;
                }

                strResNumValue = dbNumValue.ToString();
                // strResNumValueSimpLittle = m_commonTools.num2SimpValueString(dbNumValue, false, false);
                strResNumValueSimpBig = m_commonTools.num2SimpValueString(dbNumValue, true, false);// 数值转换

                strResNumValueSimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBigTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, true, false);// 数值转换

                strResNumValueSimpLittle = strInputNumValueSimpLittle;
            }
            else if (!strInputNumValueSimpBig.Equals(""))
            {
                dbNumValue = m_commonTools.SimpValueString2num(strInputNumValueSimpBig, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbNumValue))
                {
                    txtNumValueSimpBig.SelectAll();
                    MessageBox.Show("数值输入有误：" + strRetMsg);
                    txtNumValueSimpBig.Focus();
                    return;
                }

                strResNumValue = dbNumValue.ToString();
                strResNumValueSimpLittle = m_commonTools.num2SimpValueString(dbNumValue, false, false);// 数值转换
                // strResNumValueSimpBig = m_commonTools.num2SimpValueString(dbNumValue, true, false);
                strResNumValueSimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBigTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, true, false);// 数值转换

                strResNumValueSimpBig = strInputNumValueSimpBig;
            }
            else if (!strInputNumValueSimpLittleTbl.Equals(""))
            {
                dbNumValue = m_commonTools.SimpValueString2num(strInputNumValueSimpLittleTbl, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbNumValue))
                {
                    txtNumValueSimpLittleTbl.SelectAll();
                    MessageBox.Show("数值输入有误：" + strRetMsg);
                    txtNumValueSimpLittleTbl.Focus();
                    return;
                }

                strResNumValue = dbNumValue.ToString();
                strResNumValueSimpLittle = m_commonTools.num2SimpValueString(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBig = m_commonTools.num2SimpValueString(dbNumValue, true, false);// 数值转换
                // strResNumValueSimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, false, false);
                strResNumValueSimpBigTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, true, false);// 数值转换

                strResNumValueSimpLittleTbl = strInputNumValueSimpLittleTbl;
            }
            else if (!strInputNumValueSimpBigTbl.Equals(""))
            {
                dbNumValue = m_commonTools.SimpValueString2num(strInputNumValueSimpBigTbl, ref strRetMsg);// 数值转换

                if (double.IsNaN(dbNumValue))
                {
                    txtNumValueSimpBigTbl.SelectAll();
                    MessageBox.Show("数值输入有误：" + strRetMsg);
                    txtNumValueSimpBigTbl.Focus();
                    return;
                }

                strResNumValue = dbNumValue.ToString();
                strResNumValueSimpLittle = m_commonTools.num2SimpValueString(dbNumValue, false, false);// 数值转换
                strResNumValueSimpBig = m_commonTools.num2SimpValueString(dbNumValue, true, false);// 数值转换
                strResNumValueSimpLittleTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, false, false);// 数值转换
                // strResNumValueSimpBigTbl = m_commonTools.num2SimpValueString1by1(dbNumValue, true, false);

                strResNumValueSimpBigTbl = strInputNumValueSimpBigTbl;
            }
            else
            {

            }

            // fill显示到UI
            txtNumValue.Text = strResNumValue;
            txtNumValueSimpLittle.Text = strResNumValueSimpLittle;
            txtNumValueSimpBig.Text = strResNumValueSimpBig;

            txtNumValueSimpLittleTbl.Text = strResNumValueSimpLittleTbl;
            txtNumValueSimpBigTbl.Text = strResNumValueSimpBigTbl;

//             // 数字转换
//             txtDigitNum;
//             txtDigitNumSimpLittle;
//             txtDigitNumSimpBig;

            // 数字转换
            String strInputDigit = txtDigitNum.Text.Trim();
            String strInputDigitSimpLittel = txtDigitNumSimpLittle.Text.Trim();
            String strInputDigitSimpBig = txtDigitNumSimpBig.Text.Trim();

            String strDigitResArabicNum = "", strDigitResSimpLittle = "", strDigitResSimpBig = "";

            if (!strInputDigit.Equals(""))
            {
//                 double dbTmp = 0.0;
//                 if(!double.TryParse(strInputDigit,out dbTmp))
//                 {
//                     txtDigitNum.SelectAll();
//                     MessageBox.Show("数字转换中数字非数字");
//                     txtDigitNum.Focus();
// 
//                     return;
//                 }

                m_commonTools.digitTranslate(strInputDigit, out strDigitResArabicNum, out strDigitResSimpLittle, out strDigitResSimpBig);// 数值转换
                strDigitResArabicNum = strInputDigit;
            }
            else if (!strInputDigitSimpLittel.Equals(""))
            {
                m_commonTools.digitTranslate(strInputDigitSimpLittel, out strDigitResArabicNum, out strDigitResSimpLittle, out strDigitResSimpBig);// 数值转换
                strDigitResSimpLittle = strInputDigitSimpLittel;
            }
            else if (!strInputDigitSimpBig.Equals(""))
            {
                m_commonTools.digitTranslate(strInputDigitSimpBig, out strDigitResArabicNum, out strDigitResSimpLittle, out strDigitResSimpBig);// 数值转换
                strDigitResSimpBig = strInputDigitSimpBig;
            }
            else
            {
                // 
            }

            txtDigitNum.Text = strDigitResArabicNum;
            txtDigitNumSimpLittle.Text = strDigitResSimpLittle;
            txtDigitNumSimpBig.Text = strDigitResSimpBig;

            return;
        }

        // 清空
        private void btnNumTransClear_Click(object sender, EventArgs e)
        {
            // 数额转换
            txtNumMoney.Text = "";
            txtMoneySimpLittle.Text = "";
            txtMoneySimpBig.Text = "";

            txtMoneySimpLittleTbl.Text = "";
            txtMoneySimpBigTbl.Text = "";


            // 数值转换
            txtNumValue.Text = "";
            txtNumValueSimpLittle.Text = "";
            txtNumValueSimpBig.Text = "";

            txtNumValueSimpLittleTbl.Text = "";
            txtNumValueSimpBigTbl.Text = "";


            // 数字转换
            txtDigitNum.Text = "";
            txtDigitNumSimpLittle.Text = "";
            txtDigitNumSimpBig.Text = "";

            return;
        }


        Object m_objStyle = null;
        // 测试代码
        private void button4_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = dstDoc.ActiveWindow.Selection;

            if (sel.Start == sel.End)
            {
                MessageBox.Show("请选中目标段落章节");
                return;
            }

            ClassFont cFnt = null;
            ClassParagraphFormat cParaFmt = null;
            int nLvl = -1;

            m_addin.m_bExistListLevels = false;
            m_addin.m_arrFont.Clear();
            m_addin.m_arrParaFmt.Clear();

            Hashtable hashFont = new Hashtable();
            Hashtable hashParaFmt = new Hashtable();

            foreach (Word.Paragraph para in sel.Paragraphs)
            {
                nLvl = (int)para.OutlineLevel;

                if (!hashFont.Contains(nLvl))
                {
                    cFnt = new ClassFont();
                    cFnt.clone(para.Range.Font);

                    hashFont.Add(nLvl, cFnt);
                }

                if (!hashParaFmt.Contains(nLvl))
                {
                    cParaFmt = new ClassParagraphFormat();
                    cParaFmt.clone(para.Range.ParagraphFormat);

                    hashParaFmt.Add(nLvl, cParaFmt);
                }

                if (!m_addin.m_bExistListLevels)
                {
                    if (nLvl != (int)Word.WdOutlineLevel.wdOutlineLevelBodyText && para.Range.ListFormat.ListTemplate != null)
                    {
                        for (int i = 1; i <= para.Range.ListFormat.ListTemplate.ListLevels.Count; i++)
                        {
                            m_addin.m_listLevels[i - 1].clone(para.Range.ListFormat.ListTemplate.ListLevels[i]);
                        }

                        m_addin.m_bExistListLevels = true;
                    }
                }
            }


            for (int i = (int)Word.WdOutlineLevel.wdOutlineLevel1; i < (int)Word.WdOutlineLevel.wdOutlineLevelBodyText; i++)
            {
                if (hashFont.Contains(i))
                {
                    m_addin.m_arrFont.Add(hashFont[i]);
                }

                if (hashParaFmt.Contains(i))
                {
                    m_addin.m_arrParaFmt.Add(hashParaFmt[i]);
                }

            }

            MessageBox.Show("DONE");

            return;
        }

        // 测试代码
        private void button5_Click(object sender, EventArgs e)
        {
            return;
        }

        private void btnHeadingSnFont_Click(object sender, EventArgs e)
        {

            Word.Application app = m_addin.Application;

//             if (app.Documents.Count == 0)
//             {
//                 MessageBox.Show("须有打开的文档");
//                 return;
//             }

            if (!(m_nCurSelLevelIndex >= 0 && m_nCurSelLevelIndex < 9))
            {
                MessageBox.Show("请选中某级");
                return;
            }

            // MessageBox.Show("请确保当前光标位置允许修改");

            //Word.Application app = Globals.ThisAddIn.Application;
            Word.Document dstDoc = null;

            try
            {
                dstDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = dstDoc.ActiveWindow.Selection;

//             // app.FontNames
// 
//             ClassFont restoreFnt = new ClassFont();
// 
//             restoreFnt.clone(sel.Range.Font);
// 
//             CommandBarControl fntCtrl = m_addin.m_commTools.getFontDialogControl(app);
// 
//             if (fntCtrl != null)
//             {
//                 if (m_curListLevels[m_nCurSelLevelIndex].Font != null)
//                 {
//                     m_curListLevels[m_nCurSelLevelIndex].Font.copy2(sel.Range.Font);
//                 }
// 
//                 fntCtrl.Execute(); // how to fill old font info into font dialog?
//                 
//                 // do you know whether them click OK/Cancel?
//                 // font compare?
//                 // if changed then save font into to curlistlevel
//                 // 
// 
//                 if (m_curListLevels[m_nCurSelLevelIndex].Font != null)
//                 {
//                     if (m_curListLevels[m_nCurSelLevelIndex].Font.diff(sel.Range.Font))
//                     {
//                         // 
//                         m_curListLevels[m_nCurSelLevelIndex].Font.clone(sel.Range.Font);
//                     }
//                 }
//             }
// 
//             restoreFnt.copy2(sel.Range.Font);

            ClassFontDialogItems digItems = new ClassFontDialogItems(); // 新建dialogs
            
            Word.Dialog fntDialog = app.Dialogs[Word.WdWordDialog.wdDialogFormatFont]; // system dialog

            if (!m_curListLevels[m_nCurSelLevelIndex].Font.Name.Equals("")) // 不空
            {
                digItems.clone(m_curListLevels[m_nCurSelLevelIndex].Font); // clone
                digItems.copy2(fntDialog); // copy 
            }

//             Type dialogType = ((Word.Dialog)fntDialog).GetType();
// 
// 
//             dialogType.InvokeMember(
//                 "Underline", System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance,
//                 null, fntDialog, new Object[] {3}
//                 );


            int res = fntDialog.Display(); // 显示

            if (res == -1) // ok
            {
                digItems.clone(fntDialog); // clone
                digItems.copy2(m_curListLevels[m_nCurSelLevelIndex].Font); // copy
            }

            headingSnPreview(); // preview

            return;
        }


        /*
         * 
        .NumberFormat = "第%1章"
        .TrailingCharacter = wdTrailingTab
        '.NumberStyle = wdListNumberStyleArabic
        .NumberStyle = wdListNumberStyleSimpChinNum3
        .NumberPosition = CentimetersToPoints(0)
        .Alignment = wdListLevelAlignLeft
        .TextPosition = CentimetersToPoints(0.76)
        .TabPosition = wdUndefined
        .ResetOnHigher = 0
        .StartAt = 1
        With .Font
            .Bold = wdUndefined
            .Italic = wdUndefined
            .StrikeThrough = wdUndefined
            .Subscript = wdUndefined
            .Superscript = wdUndefined
            .Shadow = wdUndefined
            .Outline = wdUndefined
            .Emboss = wdUndefined
            .Engrave = wdUndefined
            .AllCaps = wdUndefined
            .Hidden = wdUndefined
            .Underline = wdUndefined
            .Color = wdUndefined
            .Size = wdUndefined
            .Animation = wdUndefined
            .DoubleStrikeThrough = wdUndefined
            .Name = ""
        End With
        .LinkedStyle = "标题 1"
         */

        private void initMultiObjNavPage()
        {
            colorComboBoxNav.setColors(m_arrColorNames, m_hashName2Color);
            colorComboBoxNav.Text = "白色";
            
            return;
        }


        private void initMultiSelPage()
        {
            chkListBoxMultiListSnType.Items.Clear();
            //chkListBoxMultiListSnType.Items.Add(@"（无）");
            chkListBoxMultiListSnType.Items.Add(@"1,2,3,…");
            chkListBoxMultiListSnType.Items.Add(@"I,II,III,…");
            chkListBoxMultiListSnType.Items.Add(@"i,ii,iii,…");
            chkListBoxMultiListSnType.Items.Add(@"A,B,C,…");
            chkListBoxMultiListSnType.Items.Add(@"a,b,c,…");
            chkListBoxMultiListSnType.Items.Add(@"一,二,三（简）…");
            chkListBoxMultiListSnType.Items.Add(@"壹,贰,叁 …");
            chkListBoxMultiListSnType.Items.Add(@"甲,乙,丙 …");
            chkListBoxMultiListSnType.Items.Add(@"子,丑,寅 …");
            chkListBoxMultiListSnType.Items.Add(@"1st,2nd,3rd …");
            chkListBoxMultiListSnType.Items.Add(@"One,Two,Three …");
            chkListBoxMultiListSnType.Items.Add(@"First,Second,Third …");
            chkListBoxMultiListSnType.Items.Add(@"01,02,03,…");
            chkListBoxMultiListSnType.Items.Add(@"①,②…,⑳,21,22…");


            //m_hashMultiSelIndex2ListStyle.Add(0, Word.WdListNumberStyle.wdListNumberStyleNone);
            //m_hashMultiSelIndex2ListStyle.Add(1, Word.WdListNumberStyle.wdListNumberStyleArabic);
            //m_hashMultiSelIndex2ListStyle.Add(2, Word.WdListNumberStyle.wdListNumberStyleUppercaseRoman);
            //m_hashMultiSelIndex2ListStyle.Add(3, Word.WdListNumberStyle.wdListNumberStyleLowercaseRoman);
            //m_hashMultiSelIndex2ListStyle.Add(4, Word.WdListNumberStyle.wdListNumberStyleUppercaseLetter);
            //m_hashMultiSelIndex2ListStyle.Add(5, Word.WdListNumberStyle.wdListNumberStyleLowercaseLetter);
            //m_hashMultiSelIndex2ListStyle.Add(6, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3);
            //m_hashMultiSelIndex2ListStyle.Add(7, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2);
            //m_hashMultiSelIndex2ListStyle.Add(8, Word.WdListNumberStyle.wdListNumberStyleZodiac1);
            //m_hashMultiSelIndex2ListStyle.Add(9, Word.WdListNumberStyle.wdListNumberStyleZodiac2);
            //m_hashMultiSelIndex2ListStyle.Add(10, Word.WdListNumberStyle.wdListNumberStyleOrdinal);
            //m_hashMultiSelIndex2ListStyle.Add(11, Word.WdListNumberStyle.wdListNumberStyleCardinalText);
            //m_hashMultiSelIndex2ListStyle.Add(12, Word.WdListNumberStyle.wdListNumberStyleOrdinalText);
            //m_hashMultiSelIndex2ListStyle.Add(13, Word.WdListNumberStyle.wdListNumberStyleArabicLZ);

            // m_hashMultiSelIndex2ListStyle.Add(0, Word.WdListNumberStyle.wdListNumberStyleNone);
            m_hashMultiSelIndex2ListStyle.Add(0, Word.WdListNumberStyle.wdListNumberStyleArabic);
            m_hashMultiSelIndex2ListStyle.Add(1, Word.WdListNumberStyle.wdListNumberStyleUppercaseRoman);
            m_hashMultiSelIndex2ListStyle.Add(2, Word.WdListNumberStyle.wdListNumberStyleLowercaseRoman);
            m_hashMultiSelIndex2ListStyle.Add(3, Word.WdListNumberStyle.wdListNumberStyleUppercaseLetter);
            m_hashMultiSelIndex2ListStyle.Add(4, Word.WdListNumberStyle.wdListNumberStyleLowercaseLetter);
            m_hashMultiSelIndex2ListStyle.Add(5, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3);
            m_hashMultiSelIndex2ListStyle.Add(6, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2);
            m_hashMultiSelIndex2ListStyle.Add(7, Word.WdListNumberStyle.wdListNumberStyleZodiac1);
            m_hashMultiSelIndex2ListStyle.Add(8, Word.WdListNumberStyle.wdListNumberStyleZodiac2);
            m_hashMultiSelIndex2ListStyle.Add(9, Word.WdListNumberStyle.wdListNumberStyleOrdinal);
            m_hashMultiSelIndex2ListStyle.Add(10, Word.WdListNumberStyle.wdListNumberStyleCardinalText);
            m_hashMultiSelIndex2ListStyle.Add(11, Word.WdListNumberStyle.wdListNumberStyleOrdinalText);
            m_hashMultiSelIndex2ListStyle.Add(12, Word.WdListNumberStyle.wdListNumberStyleArabicLZ);
            m_hashMultiSelIndex2ListStyle.Add(13, Word.WdListNumberStyle.wdListNumberStyleNumberInCircle);

            ArrayList arrSimilars = new ArrayList();
            Word.WdListNumberStyle numberStyle = Word.WdListNumberStyle.wdListNumberStyleNone;

            // ...

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleArabicFullWidth);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleNumberInCircle);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum1);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum2);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum3);

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum4); // ?
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac1);// ?
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac2);// ?

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum4);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseGreek);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseGreek);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleArabicLZ2);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleArabicLZ3);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleArabicLZ4);

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseTurkish);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseTurkish);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseBulgarian);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseBulgarian);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleLegal);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleLegalLZ);

            numberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);

            // 
            arrSimilars = new ArrayList();

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleKanji);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleKanjiDigit);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleKanjiTraditional2);

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum4); // ?

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleTradChinNum1);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleTradChinNum3);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleTradChinNum4);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum1);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleHanja);

            numberStyle = Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);

            // 
            arrSimilars = new ArrayList();

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleKanjiTraditional);
            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleTradChinNum2);



            numberStyle = Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);

            // 
            arrSimilars = new ArrayList();

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac3);


            numberStyle = Word.WdListNumberStyle.wdListNumberStyleZodiac1;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);

            // 
            arrSimilars = new ArrayList();

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac3);

            numberStyle = Word.WdListNumberStyle.wdListNumberStyleZodiac2;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);

            //
            arrSimilars = new ArrayList();

            arrSimilars.Add(Word.WdListNumberStyle.wdListNumberStyleGBNum3);

            numberStyle = Word.WdListNumberStyle.wdListNumberStyleNumberInCircle;
            m_hashSnParaNumberStyle.Add(numberStyle, arrSimilars);


            // 
            IncludeColorComboBox.setColors(m_arrColorNames, m_hashName2Color);
            IncludeColorComboBox.Text = "亮绿";

            ExcludeColorComboBox.setColors(m_arrColorNames, m_hashName2Color);
            ExcludeColorComboBox.Text = "红色";

            colorComboBoxHighlight.setColors(m_arrColorNames, m_hashName2Color);
            colorComboBoxHighlight.Text = "白色";

            return;
        }

        private void initCommonPreivewBase()
        {
            m_hashStyle2Name.Clear();
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleNone, "");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleArabic, "1");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseRoman, "I");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseRoman, "i");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseLetter, "A");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseLetter, "a");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3, "一");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2, "壹");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac1, "甲");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac2, "子");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleOrdinal, "1st");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleCardinalText, "One");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleOrdinalText, "First");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleArabicLZ, "01");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLegalLZ, "01");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLegal, "1");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleNumberInCircle, "①");

            return;
        }

        // init 初始化
        private void initHeadingSnListLevels()
        {
            if (m_bLoadedHeadingSn)
            {
                return;
            }

            Word.Application app = m_addin.Application;

            String strLinkedStylePrefix = "标题 ";
            String strNumberFormat = "";

            for (int i = 0; i < 9; i++)
            {
                m_defaultListLevels[i] = new ClassListLevel();
                // m_defaultListLevels[i].Font = new ClassFont();

                strNumberFormat += "%" + (i +1) + ".";
                m_defaultListLevels[i].NumberFormat = strNumberFormat;
                m_defaultListLevels[i].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
                m_defaultListLevels[i].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
                m_defaultListLevels[i].NumberStyleSel = Word.WdListNumberStyle.wdListNumberStyleArabic;

                m_defaultListLevels[i].TabPosition = (float)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].NumberPosition = app.CentimetersToPoints(0);
                m_defaultListLevels[i].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
                m_defaultListLevels[i].TextPosition = app.CentimetersToPoints(m_fTextPositions[i]);
                m_defaultListLevels[i].ResetOnHigher = i;
                m_defaultListLevels[i].StartAt = 1;
                m_defaultListLevels[i].LinkedStyle = strLinkedStylePrefix + (i + 1);

                // FONT
                m_defaultListLevels[i].Font.Bold = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Italic = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.StrikeThrough = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Subscript = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Superscript = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Shadow = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Outline = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Emboss = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Engrave = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.AllCaps = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Hidden = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Underline = Word.WdUnderline.wdUnderlineNone;
                m_defaultListLevels[i].Font.Color = Word.WdColor.wdColorAutomatic;
                m_defaultListLevels[i].Font.Size = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Animation = Word.WdAnimation.wdAnimationNone;
                m_defaultListLevels[i].Font.DoubleStrikeThrough = (int)Word.WdConstants.wdUndefined;
                m_defaultListLevels[i].Font.Name = "";

            } // for

            for (int i = 0; i < 9; i++)
            {
                m_curListLevels[i] = new ClassListLevel();
                //m_curListLevels[i].Font = new ClassFont();

                m_curListLevels[i].clone(m_defaultListLevels[i]);
            }


            // follow word
            cmbSnShowStyle.Items.Clear();
            cmbSnShowStyle.Items.Add(@"（无）");
            cmbSnShowStyle.Items.Add(@"1,2,3,…");
            cmbSnShowStyle.Items.Add(@"I,II,III,…");
            cmbSnShowStyle.Items.Add(@"i,ii,iii,…");
            cmbSnShowStyle.Items.Add(@"A,B,C,…");
            cmbSnShowStyle.Items.Add(@"a,b,c,…");
            cmbSnShowStyle.Items.Add(@"一,二,三（简）…");
            cmbSnShowStyle.Items.Add(@"壹,贰,叁 …");
            cmbSnShowStyle.Items.Add(@"甲,乙,丙 …");
            cmbSnShowStyle.Items.Add(@"子,丑,寅 …");
            cmbSnShowStyle.Items.Add(@"1st,2nd,3rd …");
            cmbSnShowStyle.Items.Add(@"One,Two,Three …");
            cmbSnShowStyle.Items.Add(@"First,Second,Third …");
            cmbSnShowStyle.Items.Add(@"01,02,03,…");
            cmbSnShowStyle.Items.Add(@"①,②…,⑳,21,22…");


            initCommonPreivewBase();
            /*
            m_hashStyle2Name.Clear();
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleNone, "");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleArabic, "1");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseRoman, "I");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseRoman, "i");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleUppercaseLetter, "A");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLowercaseLetter, "a");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3, "一");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2, "壹");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac1, "甲");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleZodiac2, "子");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleOrdinal, "1st");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleCardinalText, "One");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleOrdinalText, "First");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleArabicLZ, "01");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLegalLZ, "01");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleLegal, "1");
            m_hashStyle2Name.Add(Word.WdListNumberStyle.wdListNumberStyleNumberInCircle, "①");
            */

            m_hashIndex2ListStyle.Clear();
            m_hashIndex2ListStyle.Add(0, Word.WdListNumberStyle.wdListNumberStyleNone);
            m_hashIndex2ListStyle.Add(1, Word.WdListNumberStyle.wdListNumberStyleArabic);
            m_hashIndex2ListStyle.Add(2, Word.WdListNumberStyle.wdListNumberStyleUppercaseRoman);
            m_hashIndex2ListStyle.Add(3, Word.WdListNumberStyle.wdListNumberStyleLowercaseRoman);
            m_hashIndex2ListStyle.Add(4, Word.WdListNumberStyle.wdListNumberStyleUppercaseLetter);
            m_hashIndex2ListStyle.Add(5, Word.WdListNumberStyle.wdListNumberStyleLowercaseLetter);
            m_hashIndex2ListStyle.Add(6, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum3);
            m_hashIndex2ListStyle.Add(7, Word.WdListNumberStyle.wdListNumberStyleSimpChinNum2);
            m_hashIndex2ListStyle.Add(8, Word.WdListNumberStyle.wdListNumberStyleZodiac1);
            m_hashIndex2ListStyle.Add(9, Word.WdListNumberStyle.wdListNumberStyleZodiac2);
            m_hashIndex2ListStyle.Add(10, Word.WdListNumberStyle.wdListNumberStyleOrdinal);
            m_hashIndex2ListStyle.Add(11, Word.WdListNumberStyle.wdListNumberStyleCardinalText);
            m_hashIndex2ListStyle.Add(12, Word.WdListNumberStyle.wdListNumberStyleOrdinalText);
            m_hashIndex2ListStyle.Add(13, Word.WdListNumberStyle.wdListNumberStyleArabicLZ);
            m_hashIndex2ListStyle.Add(14, Word.WdListNumberStyle.wdListNumberStyleNumberInCircle);

            // 
            m_hashListStyle2Index.Clear();
            foreach (DictionaryEntry entry in m_hashIndex2ListStyle)
            {
                m_hashListStyle2Index.Add(entry.Value, entry.Key);
            }


            lstHeadingSnLevel.SelectedIndex = 0;


            trvHeadingSnScheme.Nodes.Clear(); // 初始化

            TreeNode rootNode = new TreeNode(m_strHeadingSnPreBuiltIn);
            rootNode.Name = m_strHeadingSnPreBuiltIn;
            rootNode.ImageIndex = rootNode.SelectedImageIndex = 13;
            trvHeadingSnScheme.Nodes.Add(rootNode);
            m_trndHeadingSnPreBuiltIn = rootNode;

            rootNode = new TreeNode(m_strHeadingSnUserDefine);
            rootNode.Name = m_strHeadingSnUserDefine;
            rootNode.ImageIndex = rootNode.SelectedImageIndex = 13;
            trvHeadingSnScheme.Nodes.Add(rootNode);
            m_trndHeadingSnUserDefine = rootNode;

            loadallHeadingSn2Ui(); // load 章节序号

            m_bLoadedHeadingSn = true;
            return;
        }


        private void headingSnSaveUi2ListLevel()
        {
            ClassListLevel curListLvl = null;
            int nSelIndex = lstHeadingSnLevel.SelectedIndex;
            int nSelStyleIndex = -1;

            // save
            if (m_nCurSelLevelIndex != -1 && m_nCurSelLevelIndex < 9)
            {
                curListLvl = m_curListLevels[m_nCurSelLevelIndex];
                curListLvl.NumberFormat = txtSnDefInput.Text;

                nSelStyleIndex = cmbSnShowStyle.SelectedIndex;
                if (m_hashIndex2ListStyle.Contains(nSelStyleIndex)) // 是否存在
                {
                    curListLvl.NumberStyle = (Word.WdListNumberStyle)m_hashIndex2ListStyle[nSelStyleIndex];
                    curListLvl.NumberStyleSel = curListLvl.NumberStyle;
                }

                if (chkHeadingSnLegal.Checked)
                {
                    if (cmbSnShowStyle.SelectedIndex < 13)
                    {
                        curListLvl.NumberStyle = Word.WdListNumberStyle.wdListNumberStyleLegal;
                    }
                    else
                    {
                        curListLvl.NumberStyle = Word.WdListNumberStyle.wdListNumberStyleLegalLZ;
                    }

                    cmbSnShowStyle.Enabled = false;
                }
                else
                {
                    cmbSnShowStyle.Enabled = true;
                }

                //@TODO, save font and position
                //
            }

            return;
        }

        /// <summary>
        /// load
        /// </summary>
        private void headingSnLoad2Ui()
        {
            ClassListLevel curListLvl = null;
//            int nSelIndex = lstHeadingSnLevel.SelectedIndex;
            int nSelStyleIndex = -1;

            // load

            if (m_nCurSelLevelIndex != -1 && m_nCurSelLevelIndex < 9)
            {
                curListLvl = m_curListLevels[m_nCurSelLevelIndex];
                txtSnDefInput.Text = curListLvl.NumberFormat;

                nSelStyleIndex = cmbSnShowStyle.SelectedIndex;

                if (m_hashListStyle2Index.Contains(curListLvl.NumberStyle)) // 是否存在
                {
                    nSelStyleIndex = (int)m_hashListStyle2Index[curListLvl.NumberStyle];
                    cmbSnShowStyle.SelectedIndex = nSelStyleIndex; // ??
                }
                else if (m_hashListStyle2Index.Contains(curListLvl.NumberStyleSel))
                {
                    nSelStyleIndex = (int)m_hashListStyle2Index[curListLvl.NumberStyleSel];
                    cmbSnShowStyle.SelectedIndex = nSelStyleIndex; // ??
                }

                if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegal) // 
                {
                    chkHeadingSnLegal.Checked = true;
                    cmbSnShowStyle.Enabled = false;
                }
                else if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegalLZ) // 
                {
                    chkHeadingSnLegal.Checked = true;
                    //cmbSnShowStyle.SelectedIndex = 13;
                    cmbSnShowStyle.Enabled = false;
                }
                else
                {
                    chkHeadingSnLegal.Checked = false;
                    cmbSnShowStyle.Enabled = true;
                }

                //@TODO, load font and position
                //
            }

            return;
        }

        private Boolean m_bFromLevelChange = false; // 

        private void lstHeadingSnLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            int nSelIndex = lstHeadingSnLevel.SelectedIndex;

            m_bFromLevelChange = true;

            if (m_nCurSelLevelIndex != nSelIndex)
            {
                // save
                headingSnSaveUi2ListLevel();
                m_nCurSelLevelIndex = nSelIndex;

                // load
                headingSnLoad2Ui();
                // preview
                headingSnPreview();
            }

            m_bFromLevelChange = false;

            return;
        }



        private String buildHeadingSnPreview(ClassListLevel[] curListLevels, int nCurIndex)
        {
            ClassListLevel curListLvl = null;
            String strDefInput = curListLevels[nCurIndex].NumberFormat;
            String strItem = "";

            // for (int i = nCurIndex; i > -1; i--) // 遍历
            // for (int i = 0; i <= nCurIndex; i++) // 遍历
            curListLvl = curListLevels[nCurIndex];

            if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegalLZ) // 特定格式
            {
                for (int j = 0; j <= nCurIndex; j++)
                {   // 
                    if (curListLevels[j].NumberStyleSel != Word.WdListNumberStyle.wdListNumberStyleArabicLZ)  // 特定格式
                    {
                        strItem = "1"; // 名称
                    }
                    else
                    {
                        strItem = "01"; // 名称
                    }

                    strDefInput = strDefInput.Replace("%" + (j + 1), strItem); // 转换
                }
                //break;
            }
            else if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegal) // 特定格式
            {
                for (int j = 0; j <= nCurIndex; j++) // 遍历
                {
                    if (curListLevels[j].NumberStyleSel != Word.WdListNumberStyle.wdListNumberStyleArabicLZ) // 特定格式
                    {
                        strItem = "1"; // 名称
                    }
                    else
                    {
                        strItem = "01"; // 名称
                    }

                    strDefInput = strDefInput.Replace("%" + (j + 1), strItem); // 转换
                }
                //break;
            }
            else
            {
                for (int i = 0; i <= nCurIndex; i++) // 遍历
                {
                    curListLvl = curListLevels[i];
                    if (m_hashStyle2Name.Contains(curListLvl.NumberStyle)) // 判断
                    {
                        strItem = (String)m_hashStyle2Name[curListLvl.NumberStyle];

                        if (strItem != null)
                        {
                            strDefInput = strDefInput.Replace("%" + (i + 1), strItem); // 转换
                        }
                    }
                }
            }


//             for (int i = 8; i > nCurIndex; i--)
//             {
//                 strDefInput = strDefInput.Replace("%" + (i + 1), ""); // 替换
//             }


            return strDefInput;
        }

        /// <summary>
        /// 预览功能
        /// </summary>
        /// <param name="curListLevels"></param>
        /// <param name="nCurIndex"></param>
        /// <returns></returns>
        private String buildHeadingSnPreview_v1(ClassListLevel[] curListLevels, int nCurIndex)
        {
            ClassListLevel curListLvl = null;
            String strDefInput = curListLevels[nCurIndex].NumberFormat;
            String strItem = "";

            for (int i = nCurIndex; i > -1; i--) // 遍历
            {
                curListLvl = curListLevels[i];

                if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegalLZ) // 特定格式
                {
                    for (int j = 0; j <= i; j++)
                    {   // 
                        if (curListLevels[j].NumberStyleSel != Word.WdListNumberStyle.wdListNumberStyleArabicLZ)  // 特定格式
                        {
                            strItem = "1"; // 名称
                        }
                        else
                        {
                            strItem = "01"; // 名称
                        }

                        strDefInput = strDefInput.Replace("%" + (j + 1), strItem); // 转换
                    }
                    break;
                }
                else if (curListLvl.NumberStyle == Word.WdListNumberStyle.wdListNumberStyleLegal) // 特定格式
                {
                    for (int j = 0; j <= i; j++) // 遍历
                    {
                        if (curListLevels[j].NumberStyleSel != Word.WdListNumberStyle.wdListNumberStyleArabicLZ) // 特定格式
                        {
                            strItem = "1"; // 名称
                        }
                        else
                        {
                            strItem = "01"; // 名称
                        }

                        strDefInput = strDefInput.Replace("%" + (j + 1), strItem); // 转换
                    }
                    break;
                }
                else
                {
                    if (m_hashStyle2Name.Contains(curListLvl.NumberStyle)) // 判断
                    {
                        strItem = (String)m_hashStyle2Name[curListLvl.NumberStyle];

                        if (strItem != null)
                        {
                            strDefInput = strDefInput.Replace("%" + (i + 1), strItem); // 转换
                        }
                    }
                }
            }


            for (int i = 8; i > nCurIndex; i--) 
            {
                strDefInput = strDefInput.Replace("%" + (i + 1), ""); // 替换
            }


            return strDefInput;
        }

        // 章节序号预览
        private void headingSnPreview_v1()
        {
            ClassListLevel curListLvl = null;

            if (m_nCurSelLevelIndex != -1 && m_nCurSelLevelIndex < 9)
            {
                // save
                // headingSnSaveUi2ListLevel();
            }
            else
            {
                return;
            }

            // 建立章节序号预览信息
            String strDefInput = buildHeadingSnPreview(m_curListLevels, m_nCurSelLevelIndex);

            int i = m_nCurSelLevelIndex;

            Word.Application app = m_addin.Application;
            Font fnt = null;

            ClassFont lstLevelFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;

            String strHeading = "", strFntName = "同标题字体", strFntNum = "", strFntSize = "";
            String strPreviewCnt = "";

            // get sys styles font infomration.
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            strHeading = "标题 " + (i + 1);
            Word.Style styleHeading = curDoc.Styles[strHeading];

            if (styleHeading == null)
            {
                MessageBox.Show("无对应级别标题样式："+ strHeading);
                return;
            }

            richTxtHeadingSnPreview.Text = "";

            wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;

            lstLevelFnt = m_curListLevels[i].Font;

            if (lstLevelFnt.Name.Equals("")) // 设置样式
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (wFnt.Superscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 0;
                }

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                }

                richTxtHeadingSnPreview.SelectionFont = fnt;

                richTxtHeadingSnPreview.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxtHeadingSnPreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色
                }

            }
            else
            {
                if (lstLevelFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (lstLevelFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (lstLevelFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (lstLevelFnt.StrikeThrough != 0 || lstLevelFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (lstLevelFnt.Superscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 1000;
                }
                else if (lstLevelFnt.Subscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 0;
                }

                strFntName = lstLevelFnt.Name;
                strFntNum = ""; 
                strFntSize = "" + lstLevelFnt.Size;


                strFntNum = m_addin.GetWordFontNumber(lstLevelFnt.Size);

                if (lstLevelFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, fntStyle);
                }

                richTxtHeadingSnPreview.SelectionFont = fnt;

                richTxtHeadingSnPreview.SelectionColor = Color.Black;
                if (lstLevelFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)lstLevelFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxtHeadingSnPreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色
                }

            }
            // 缩进对齐
            richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Left;
            if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Left;
            }
            else if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Center;
            }
            else if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Right;
            }

            // 组合
            if (strFntNum.Equals(strFntSize))
            {
                strPreviewCnt = strDefInput + "[" + strFntName + strFntNum + "]\r\n";
            }
            else
            {
                strPreviewCnt = strDefInput + "[" + strFntName + strFntNum + strFntSize + "]\r\n";
            }

            richTxtHeadingSnPreview.AppendText(strPreviewCnt); // 显示

            return;
        }


        private void headingSnPreview()
        {
            ClassListLevel curListLvl = null;

            if (m_nCurSelLevelIndex != -1 && m_nCurSelLevelIndex < 9)
            {
                // save
                // headingSnSaveUi2ListLevel();
            }
            else
            {
                return;
            }

            // 建立章节序号预览信息
            String strDefInput = buildHeadingSnPreview(m_curListLevels, m_nCurSelLevelIndex);

            if (strDefInput.Length == 0)
            {
                strDefInput += "(空)";
            }

            int i = m_nCurSelLevelIndex;

            Word.Application app = m_addin.Application;
            Font fnt = null;

            ClassFont lstLevelFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;

            String strHeading = "", strFntName = "同标题字体", strFntNum = "", strFntSize = "";
            String strPreviewCnt = "";

            // get sys styles font infomration.
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }


            strHeading = "标题 " + (i + 1);
            Word.Style styleHeading = null;// curDoc.Styles[strHeading];

            try
            {
            	styleHeading = curDoc.Styles[strHeading];
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无对应级别标题样式：" + strHeading + "\r\n错误原因："+ex.Message);
                return;
            }
            finally
            {
            }

            if (styleHeading == null)
            {
                MessageBox.Show("无对应级别标题样式：" + strHeading);
                return;
            }

            wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;

            lstLevelFnt = m_curListLevels[i].Font;

            richTxtHeadingSnPreview.Text = "";

            String strFmtInfo = "", strBoldItalic = "";

            if (String.IsNullOrWhiteSpace(lstLevelFnt.Name) || lstLevelFnt.Size == (float)Word.WdConstants.wdUndefined) // 设置样式
            {
                if (String.IsNullOrWhiteSpace(lstLevelFnt.Name))
                {
                    strFntName += ":" + styleHeading.Font.Name;
                }
                else
                {
                    strFntName = lstLevelFnt.Name;
                }

                strFntSize = styleHeading.Font.Size.ToString();
                strFntNum = m_addin.GetWordFontNumber(styleHeading.Font.Size);

                // 字体转换
                if (styleHeading.Font.Bold != 0 || styleHeading.Font.Italic != 0)
                {
                    strBoldItalic = "[";
                    if (styleHeading.Font.Bold != 0)
                    {
                        strBoldItalic += "加粗";
                    }

                    if (styleHeading.Font.Italic != 0)
                    {
                        strBoldItalic += "斜体";
                    }

                    strBoldItalic += "]";
                }
            }
            else
            {
                strFntName = lstLevelFnt.Name;
                strFntNum = "";
                strFntSize = "" + lstLevelFnt.Size;

                strFntNum = m_addin.GetWordFontNumber(lstLevelFnt.Size);

                // 字体转换
                if (lstLevelFnt.Bold != 0 || lstLevelFnt.Italic != 0)
                {
                    strBoldItalic = "[";
                    if (lstLevelFnt.Bold != 0)
                    {
                        strBoldItalic += "加粗";
                    }

                    if (lstLevelFnt.Italic != 0)
                    {
                        strBoldItalic += "斜体";
                    }

                    strBoldItalic += "]";
                }

            }

            // 组合
            strFmtInfo = " [" + strFntName + strFntNum + strFntSize + "]" + strBoldItalic + "\r\n";

            int nStart = richTxtHeadingSnPreview.Text.Length;

            strPreviewCnt = strDefInput + strFmtInfo;
            richTxtHeadingSnPreview.AppendText(strPreviewCnt); // 显示

            richTxtHeadingSnPreview.Select(nStart, strDefInput.Length);


            if (String.IsNullOrWhiteSpace(lstLevelFnt.Name) || lstLevelFnt.Size == (float)Word.WdConstants.wdUndefined) // 设置样式
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (wFnt.Superscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 0;
                }

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else if (String.IsNullOrWhiteSpace(wFnt.Name))
                {
                    fnt = new Font("宋体", wFnt.Size, fntStyle);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                }

                richTxtHeadingSnPreview.SelectionFont = fnt;

                richTxtHeadingSnPreview.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxtHeadingSnPreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色
                }

            }
            else
            {
                if (lstLevelFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (lstLevelFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (lstLevelFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (lstLevelFnt.StrikeThrough != 0 || lstLevelFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (lstLevelFnt.Superscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 1000;
                }
                else if (lstLevelFnt.Subscript != 0)
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxtHeadingSnPreview.SelectionCharOffset = 0;
                }

                strFntName = lstLevelFnt.Name;
                strFntNum = "";
                strFntSize = "" + lstLevelFnt.Size;


                strFntNum = m_addin.GetWordFontNumber(lstLevelFnt.Size);

                if (lstLevelFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, FontStyle.Italic);
                }
                else if (String.IsNullOrWhiteSpace(lstLevelFnt.Name))
                {
                    fnt = new Font("宋体", lstLevelFnt.Size, fntStyle);
                }
                else
                {
                    fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, fntStyle);
                }

                richTxtHeadingSnPreview.SelectionFont = fnt;

                richTxtHeadingSnPreview.SelectionColor = Color.Black;
                if (lstLevelFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)lstLevelFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxtHeadingSnPreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色
                }

            }
            // 缩进对齐
            richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Left;
            if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Left;
            }
            else if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Center;
            }
            else if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
            {
                richTxtHeadingSnPreview.SelectionAlignment = HorizontalAlignment.Right;
            }

            richTxtHeadingSnPreview.Select(nStart + strDefInput.Length, strFmtInfo.Length);

            fntStyle = FontStyle.Regular;

            // fnt = new Font("宋体", 10.5f, fntStyle);
            fnt = new Font("宋体", 8.0f, fntStyle);

            richTxtHeadingSnPreview.SelectionFont = fnt;
            richTxtHeadingSnPreview.SelectionColor = Color.Black;
            richTxtHeadingSnPreview.SelectionCharOffset = 0;

            return;
        }


        private void chkHeadingSnLegal_CheckedChanged(object sender, EventArgs e)
        {
            if (!m_bFromLevelChange)
            {
                headingSnSaveUi2ListLevel(); // save
                headingSnPreview(); // 更新预览
            }

            return;
        }


        private void cmbSnShowStyle_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (!m_bFromLevelChange)
            {
                headingSnSaveUi2ListLevel();  // save
                headingSnPreview(); // 更新预览
            }

            return;
        }

        private void txtSnDefInput_Leave(object sender, EventArgs e)
        {
            headingSnSaveUi2ListLevel();  // save
            headingSnPreview(); // 更新预览

            return;
        }


        private void lstUnitedStyleHistoryDoc_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            // 
            int nIndex = lstUnitedStyleHistoryDoc.SelectedIndex;

            if (nIndex == -1)
                return;

//             String strFileName = "", strPath = "", strItem = "";
// 
//             String strDoc = (String)lstUnitedStyleHistoryDoc.Items[nIndex];
// 
//             String[] strArr = strDoc.Split(',');
// 
//             if (strArr.GetLength(0) != 2)
//             {
//                 return;
//             }
// 
//             strFileName = strArr[0];
//             strPath = strArr[1];
// 
//             strItem = strPath + strFileName;

            String strItem = (String)lstUnitedStyleHistoryDoc.SelectedItem;
            UniformStyleLoadDocStylesInfo(strItem); // 统一样式加载

            return;
        }

        /// <summary>
        ///  建立章节样式
        /// </summary>
        /// <param name="hsItem"></param>
        /// <param name="nOutlineLevel"></param>
        /// <returns></returns>
        private String buildHeadingStyleBriefItem(ClassHeadingStyle hsItem, int nOutlineLevel)
        {
            String strTxt = "";

            String strFntName = "";
            String strFntNum = "";
            String strFntSize = hsItem.m_fnt.Size.ToString();
            String strHeading = "";
            String strAlignment = "";
            Word.Application app = m_addin.Application;

            strFntNum = m_addin.GetWordFontNumber(hsItem.m_fnt.Size); // 获得字体大小

            if (nOutlineLevel >= 1 && nOutlineLevel < 10)
            {
                strHeading = "标题" + nOutlineLevel + "级";
            }
            else
            {
                strHeading = "正文";
            }

            if(hsItem.m_fnt.Name.Equals(""))
            {
                strFntName = "-";
            }
            else
            {
                strFntName = hsItem.m_fnt.Name;
            }

            // 对齐操作
            switch (hsItem.m_paraFmt.Alignment)
            {
                case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    strAlignment = "居左";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphRight:
                    strAlignment = "居右";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                    strAlignment = "居中";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphJustify:
                    strAlignment = "两端对齐";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphDistribute:
                    strAlignment = "分散对齐";
                    break;

                default:
                    strAlignment = "两端对齐";
                    break;
            }

            String strBoldItalic = "";
            // 加粗的设置
            if (hsItem.m_fnt.Bold != 0 || hsItem.m_fnt.Italic != 0)
            {
                strBoldItalic = "[";
                if (hsItem.m_fnt.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }
                
                if (hsItem.m_fnt.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }

            String strSpaceRule = "";

            switch (hsItem.m_paraFmt.LineSpacingRule)
            {
                case Word.WdLineSpacing.wdLineSpace1pt5:
                    strSpaceRule = "1.5倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceAtLeast:
                    strSpaceRule = "最小值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceDouble:
                    strSpaceRule = "2倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceExactly:
                    strSpaceRule = "固定值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceMultiple:
                    strSpaceRule = "多倍行距：" + (int)app.PointsToLines(hsItem.m_paraFmt.LineSpacing) + "倍";
                    break;

                case Word.WdLineSpacing.wdLineSpaceSingle:
                    strSpaceRule = "单倍行距";
                    break;

                default:
                    break;
            }

            String strIndent = "缩进：";


            strIndent += "左：" + app.PointsToCentimeters(hsItem.m_paraFmt.LeftIndent).ToString("0.##") + "厘米，" +
                         "右：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";

            if (hsItem.m_paraFmt.RightIndent > 0.0f)
            {
                strIndent += ",首行：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";
            }

            if (hsItem.m_paraFmt.CharacterUnitLeftIndent != 0.0f)
            {
                strIndent += "(左：" + (int)hsItem.m_paraFmt.CharacterUnitLeftIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitRightIndent != 0.0f)
            {
                strIndent += "(右：" + (int)hsItem.m_paraFmt.CharacterUnitRightIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitFirstLineIndent != 0.0f)
            {
                strIndent += "(首行：" + (int)hsItem.m_paraFmt.CharacterUnitFirstLineIndent + "字符)";
            }

            String strFmtInfo = "";

            // String strFntNum = m_addin.GetWordFontNumber(fFntSize); // 字体号

            strFmtInfo = "[" + strFntName + strFntNum + strFntSize + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]";

//             // 字体字号设置
//             if (strFntNum.Equals(strFntSize))
//             {
//                 // strTxt = "[" + strHeading + "][" + strFntName + strFntNum + "]" + "[" + strAlignment + "]";
//                 strTxt = "[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]";
//             }
//             else
//             {
//                 // strTxt = "[" + strHeading + "][" + strFntName + strFntNum + strFntSize + "]" + "[" + strAlignment + "]";
//                 strTxt = "[" + strFntName + strFntNum + strFntSize + "]" + strBoldItalic + "[" + strAlignment + "]";
//             }

            return strFmtInfo;

        }


        /// <summary>
        /// 建立章节样式树节点项
        /// </summary>
        /// <param name="strName"></param>
        /// <param name="hs"></param>
        /// <returns></returns>
        private TreeNode buildHeadingStyleTreeNodeItem(String strName, ClassHeadingStyle[] hs)
        {
            TreeNode node = new TreeNode(strName);
            node.Name = node.Text;

            String strItem = "";
            TreeNode childNode = null;

            for (int i = 0; i < 10; i++)
            {
                strItem = buildHeadingStyleBriefItem(hs[i],i+1); // 建立概要信息

                childNode = new TreeNode(strItem);
                childNode.Name = childNode.Text;
                childNode.ImageIndex = (i + 1);
                childNode.SelectedImageIndex = (i + 1);
                node.Nodes.Add(childNode); // 添加新节点
            }

            return node;
        }

        /// <summary>
        /// 建立章节样式格式信息
        /// </summary>
        /// <param name="listLevelItem"></param>
        /// <returns></returns>
        private String buildHeadingSnFormatInfo(ClassListLevel listLevelItem)
        {
            String strFmtInfo = "";// "[标题字体]";

            if (listLevelItem.Font.Name.Equals(""))
            {
                return strFmtInfo;
            }

            ClassFont lstLevelFnt = listLevelItem.Font;

            String strFntName = lstLevelFnt.Name;
            String strFntNum = "";
            String strFntSize = "" + lstLevelFnt.Size;
            String strBold = "";

            String strBoldItalic = "";
            // 粗体或斜体
            if (lstLevelFnt.Bold != 0 || lstLevelFnt.Italic != 0)
            {
                strBoldItalic = "[";
                if (lstLevelFnt.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }

                if (lstLevelFnt.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }
            // 字号
            strFntNum = m_addin.GetWordFontNumber(lstLevelFnt.Size);

            if (strFntNum.Equals(strFntSize))
            {
                strFmtInfo = "[" + strFntName + strFntNum + "]" + strBoldItalic;
            }
            else
            {
                strFmtInfo = "[" + strFntName + strFntNum + strFntSize + "]" + strBoldItalic;
            }

            return strFmtInfo;
        }

        /// <summary>
        /// 建立章节序号树节点项
        /// </summary>
        /// <param name="strName"></param>
        /// <param name="listLevels"></param>
        /// <returns></returns>
        private TreeNode buildHeadingSnTreeNodeItem(String strName, ClassListLevel[] listLevels)
        {
            TreeNode node = new TreeNode(strName);
            node.Name = node.Text;

            String strItem = "", strFmtInfo = "";
            TreeNode childNode = null;

            for (int i = 0; i < 9; i++)
            {
                strItem = buildHeadingSnPreview(listLevels, i); // 更新预览

                if (strItem.Length == 0)
                {
                    strItem = "(空)";
                }

                strFmtInfo = buildHeadingSnFormatInfo(listLevels[i]); // 建立章节序号格式信息

                childNode = new TreeNode(strItem + strFmtInfo); // 建立树节点
                childNode.Name = childNode.Text;
                childNode.ImageIndex = (i+1);
                childNode.SelectedImageIndex = (i+1);

                if (listLevels[i].Font.Color != (Word.WdColor)Word.WdConstants.wdUndefined) // 颜色
                {
                    int nColorVal = (int)listLevels[i].Font.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    childNode.ForeColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色转换
                }

                node.Nodes.Add(childNode); // 节点添加
            }

            return node;
        }

        /// <summary>
        /// 加载章节样式
        /// </summary>
        private void loadallHeadingStyle2Ui()
        {
            // m_addin.loadAllHeadingStyleSchemes();


            String strSchemeName = "";
            ClassHeadingStyle[] hs = null;


            ArrayList arrSort = new ArrayList();

            arrSort.Clear();
            // 提取
            foreach (DictionaryEntry entry in m_addin.m_hashHeadingStylePreBuiltInScheme)
            {
                strSchemeName = (String)entry.Key;
                arrSort.Add(strSchemeName);
            }

            arrSort.Sort();
            // 
            foreach (String strName in arrSort) // 遍历
            {
                hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStylePreBuiltInScheme[strName]; // 转换

                TreeNode node = buildHeadingStyleTreeNodeItem(strName, hs); // 建立章节样式节点项

                if (m_trndHeadingStylePreBuiltIn != null && node != null)
                {
                    m_trndHeadingStylePreBuiltIn.Nodes.Add(node); // 添加节点
                }
            }

            arrSort.Clear();

            foreach (DictionaryEntry entry in m_addin.m_hashHeadingStyleUserDefineScheme) // 遍历
            {
                strSchemeName = (String)entry.Key;
                arrSort.Add(strSchemeName);
            }

            arrSort.Sort();
            foreach (String strName in arrSort)
            {
                hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStyleUserDefineScheme[strName]; // 转换

                TreeNode node = buildHeadingStyleTreeNodeItem(strName, hs); // 建立节点项

                if (m_trndHeadingStyleUserDefine != null && node != null)
                {
                    m_trndHeadingStyleUserDefine.Nodes.Add(node); // 添加
                }
            }

            return;
        }

        /// <summary>
        /// 加载章节序号到UI
        /// </summary>
        private void loadallHeadingSn2Ui()
        {
            // m_addin.loadAllHeadingSnSchemes();


            String strSchemeName = "";
            ClassListLevel[] listLevels = null;

//        private readonly String m_strHeadingSnPreBuiltIn = "预置";
//        private readonly String m_strHeadingSnUserDefine = "自定义";


//             foreach (TreeNode childNd in trvHeadingSnScheme.Nodes)
//             {
//                 if (childNd.Text.Equals(m_strHeadingSnPreBuiltIn))
//                 {
//                     m_trndPreBuiltIn = childNd;
//                 }
//                 else if (childNd.Text.Equals(m_strHeadingSnUserDefine))
//                 {
//                     m_trndUserDefine = childNd;
//                 }
//                 else
//                 {
//                     return;
//                 }
//             }

            ArrayList arrSort = new ArrayList();

            arrSort.Clear();

            foreach (DictionaryEntry entry in m_addin.m_hashHeadingSnPreBuiltInScheme) // 遍历
            {
                strSchemeName = (String)entry.Key;
                arrSort.Add(strSchemeName);
            }

            arrSort.Sort();

            foreach (String strName in arrSort) // 遍历
            {
                listLevels = (ClassListLevel[])m_addin.m_hashHeadingSnPreBuiltInScheme[strName]; // 转换

                TreeNode node = buildHeadingSnTreeNodeItem(strName, listLevels); // 建立节点项

                if (m_trndHeadingSnPreBuiltIn != null && node != null)
                {
                    m_trndHeadingSnPreBuiltIn.Nodes.Add(node); // 添加
                }
            }

            arrSort.Clear();

            foreach (DictionaryEntry entry in m_addin.m_hashHeadingSnUserDefineScheme) // 遍历
            {
                strSchemeName = (String)entry.Key;
                arrSort.Add(strSchemeName);
            }

            arrSort.Sort();
            foreach (String strName in arrSort)
            {
                listLevels = (ClassListLevel[])m_addin.m_hashHeadingSnUserDefineScheme[strName]; // 转换

                TreeNode node = buildHeadingSnTreeNodeItem(strName, listLevels); // 建立树节点项

                if (m_trndHeadingSnUserDefine != null && node != null)
                {
                    m_trndHeadingSnUserDefine.Nodes.Add(node); // 添加
                }
            }

            return;
        }
        /// <summary>
        /// 加载章节序号方案到UI树节点
        /// </summary>
        /// <param name="strSchemeName"></param>
        /// <param name="newListLevels"></param>
        /// <param name="bPreBuiltIn"></param>
        /// <returns></returns>
        private TreeNode loadHeadingSnScheme2Tree(String strSchemeName, ClassListLevel[] newListLevels, Boolean bPreBuiltIn = false)
        {
            // show a tree
            TreeNode node = buildHeadingSnTreeNodeItem(strSchemeName, newListLevels); // 建立树节点项

            TreeNode parentNode = null;

            if (bPreBuiltIn) // 预置
            {
                parentNode = m_trndHeadingSnPreBuiltIn;
            }
            else
            {
                parentNode = m_trndHeadingSnUserDefine;
            }

            if (parentNode != null && node != null)
            {
                parentNode.Nodes.Add(node);

                // SYNC
                m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节序号", 1, parentNode.FullPath,node);

                // node.ExpandAll();
                // node.EnsureVisible();
            }

            return node;
        }

        /// <summary>
        /// 是否输入合法
        /// </summary>
        /// <param name="strSchemeName"></param>
        /// <param name="strRetMsg"></param>
        /// <returns></returns>
        private Boolean IsValidHeadingSnInput(String strSchemeName ,ref String strRetMsg)
        {
            if (strSchemeName.Length == 0)
            {
                strRetMsg = "输入为空";
                return false;
            }
            else if (strSchemeName.Length > 120)
            {
                strRetMsg = "输入过长";
                return false;
            }

            return true;
        }

        private void btnHeadingSnSchemeAdd_Click(object sender, EventArgs e)
        {
            String strSchemeName = txtHeadingSnSchemeName.Text.Trim();

            String strRetMsg = "";
            Boolean bValid = IsValidHeadingSnInput(strSchemeName,ref strRetMsg);

            if (!bValid)
            {
                MessageBox.Show(strRetMsg);
                return;
            }

            // search whether exist same name scheme
            TreeNode[] fndNode = trvHeadingSnScheme.Nodes.Find(strSchemeName, true);

            if (fndNode.GetLength(0) > 0)
            {
                fndNode[0].EnsureVisible();
                MessageBox.Show("名称重名，请输入不同名称");
                txtHeadingSnSchemeName.Focus();
                return;
            }

            // m_nMaxListLevelSchemeCount
            if (m_addin.m_hashHeadingSnUserDefineScheme.Count > m_nMaxListLevelSchemeCount)
            {
                MessageBox.Show("方案数超上限，请清理后再增加");
                return;
            }


            // save into db
            ClassListLevel[] newListLevels = new ClassListLevel[9];

            for (int i = 0; i < 9; i++)
            {
                newListLevels[i] = new ClassListLevel();
                //newListLevels[i].Font = new ClassFont();

                newListLevels[i].clone(m_curListLevels[i]);
            }
            // 新增章节序号方案
            int nRet = m_addin.addHeadingSnScheme(strSchemeName, newListLevels);

            if (nRet < 0)
            {
                MessageBox.Show("保存异常，请联系管理检查数据库");
                return;
            }

//             // show a tree
//             TreeNode node = buildHeadingSnTreeNodeItem(strSchemeName, newListLevels);
// 
//             if (m_trndUserDefine != null && node != null)
//             {
//                 m_trndUserDefine.Nodes.Add(node);
//                 node.ExpandAll();
//                 node.EnsureVisible();
//             }

            // 装载章节序号方案到树节点
            TreeNode node = loadHeadingSnScheme2Tree(strSchemeName, newListLevels);
            if (node != null)
            {
                node.ExpandAll(); // 展开
                node.EnsureVisible();
            }

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingSnPos_Click(object sender, EventArgs e)
        {
            if (!(m_nCurSelLevelIndex >= 0 && m_nCurSelLevelIndex < 9))
            {
                MessageBox.Show("请选中某级");
                return;
            }

            Word.Application app = m_addin.Application;

            FormHeadingSnPos frmPos = new FormHeadingSnPos();

            // 提取信息
            frmPos.m_nLevel = m_nCurSelLevelIndex;

            frmPos.m_alignment = m_curListLevels[m_nCurSelLevelIndex].Alignment;
            frmPos.m_chAfterHeadingSn = m_curListLevels[m_nCurSelLevelIndex].TrailingCharacter;

            frmPos.m_NumberPosition = app.PointsToCentimeters(m_curListLevels[m_nCurSelLevelIndex].NumberPosition); // align pos对齐位置
            frmPos.m_TextPosition = app.PointsToCentimeters(m_curListLevels[m_nCurSelLevelIndex].TextPosition); // 文本缩进位置

            if (m_curListLevels[m_nCurSelLevelIndex].TabPosition == (float)Word.WdConstants.wdUndefined)
            {
                frmPos.chkHeadingSnTabPos.Checked = false;
                frmPos.m_TabPosition = 0.0f;
            }
            else
            {
                frmPos.chkHeadingSnTabPos.Checked = true;
                frmPos.m_TabPosition = app.PointsToCentimeters(m_curListLevels[m_nCurSelLevelIndex].TabPosition); // 制表位添加位置
            }

            frmPos.m_StartAt = (uint)m_curListLevels[m_nCurSelLevelIndex].StartAt;
            frmPos.m_ResetOnHigher = (uint)m_curListLevels[m_nCurSelLevelIndex].ResetOnHigher;


            DialogResult res = frmPos.ShowDialog(this);

            if (res == DialogResult.OK)
            {   // 记录信息
                m_curListLevels[m_nCurSelLevelIndex].Alignment = frmPos.m_alignment;
                m_curListLevels[m_nCurSelLevelIndex].TrailingCharacter = frmPos.m_chAfterHeadingSn;
                m_curListLevels[m_nCurSelLevelIndex].NumberPosition = app.CentimetersToPoints(frmPos.m_NumberPosition); // align pos对齐位置
                m_curListLevels[m_nCurSelLevelIndex].TextPosition = app.CentimetersToPoints(frmPos.m_TextPosition); // 文本缩进位置

                if (frmPos.chkHeadingSnTabPos.Checked)
                {
                    m_curListLevels[m_nCurSelLevelIndex].TabPosition = app.CentimetersToPoints(frmPos.m_TabPosition); // 制表位添加位置
                }
                else
                {
                    m_curListLevels[m_nCurSelLevelIndex].TabPosition = (float)Word.WdConstants.wdUndefined;
                }
                
                m_curListLevels[m_nCurSelLevelIndex].StartAt = (int)frmPos.m_StartAt;

                m_curListLevels[m_nCurSelLevelIndex].ResetOnHigher = (int)frmPos.m_ResetOnHigher;
            }

            return;
        }

        private void btnHeadingSnSchemeDel_Click(object sender, EventArgs e)
        {
            String strSchemeName = txtHeadingSnSchemeName.Text.Trim();

            TreeNode selNode = trvHeadingSnScheme.SelectedNode;

            if (strSchemeName.Equals("") && selNode == null)
            {
                MessageBox.Show("请输入方案名称或选择方案");
                return;
            }
            else
            {
                if (strSchemeName.Equals(""))
                {
                    if (selNode.Level == 0)
                    {
                        MessageBox.Show("请选择方案");
                    }

                    if (selNode.Level == 2)
                    {
                        selNode = selNode.Parent;
                    }

                    strSchemeName = selNode.Text;
                }
                else
                {
                    // 
                }
            }


            String strRetMsg = "";
            Boolean bValid = IsValidHeadingSnInput(strSchemeName,ref strRetMsg);

            if (!bValid)
            {
                MessageBox.Show(strRetMsg);
                return;
            }

            // search whether exist same name scheme
            TreeNode[] fndNode = trvHeadingSnScheme.Nodes.Find(strSchemeName, true);

            if (fndNode.GetLength(0) == 0 || fndNode[0].Level != 1)
            {
                MessageBox.Show("没有此名称的方案:'" + strSchemeName + "'");
                return;
            }

            selNode = fndNode[0];

            if (selNode.Parent == m_trndHeadingSnPreBuiltIn)
            {
                MessageBox.Show("不能删除预置方案");
                return;
            }

            DialogResult res = MessageBox.Show("确定删除？", "警告", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }
            // 删除
            // remove from db
            int nRet = m_addin.removeHeadingSnScheme(strSchemeName);

            if (nRet != 0)
            {
                MessageBox.Show("操作数据库异常，请联系管理检查数据库");
                return;
            }

            if (selNode.PrevNode != null)
            {
                trvHeadingSnScheme.SelectedNode = selNode.PrevNode;
            }
            else if (selNode.NextNode != null)
            {
                trvHeadingSnScheme.SelectedNode = selNode.NextNode;
            }
            else
            {
                trvHeadingSnScheme.SelectedNode = selNode.Parent;
            }

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节序号", 3, selNode.FullPath);

            selNode.Remove();

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingSnSchemeUpdate_Click(object sender, EventArgs e)
        {
            // update db

            String strSchemeName = txtHeadingSnSchemeName.Text.Trim();

            TreeNode selNode = trvHeadingSnScheme.SelectedNode;

            if (strSchemeName.Equals("") && selNode == null)
            {
                MessageBox.Show("请输入方案名称或选择方案");
                return;
            }
            else
            {
                if (strSchemeName.Equals(""))
                {
                    if (selNode.Level == 0)
                    {
                        MessageBox.Show("请选择方案");
                    }

                    if (selNode.Level == 2)
                    {
                        selNode = selNode.Parent;
                    }

                    strSchemeName = selNode.Text;
                }
                else
                {
                    // 
                }
            }

            String strRetMsg = "";
            Boolean bValid = IsValidHeadingSnInput(strSchemeName, ref strRetMsg);

            if (!bValid)
            {
                MessageBox.Show(strRetMsg);
                return;
            }


            // search whether exist same name scheme
            TreeNode[] fndNode = trvHeadingSnScheme.Nodes.Find(strSchemeName, true);

            if (fndNode.GetLength(0) == 0 || fndNode[0].Level != 1)
            {
                MessageBox.Show("没有此名称的方案:'" + strSchemeName + "'");
                return;
            }

            selNode = fndNode[0];

            if (selNode.Parent == m_trndHeadingSnPreBuiltIn)
            {
                MessageBox.Show("不能更改预置方案");
                return;
            }


            int nRet = m_addin.updateHeadingSnScheme(strSchemeName,m_curListLevels);

            if (nRet < 0)
            {
                MessageBox.Show("操作数据库异常，请联系管理检查数据库");
                return;               
            }

            // update tree ui, special with FONT
            selNode = fndNode[0];
            // 更新树节点
            TreeNode node = buildHeadingSnTreeNodeItem(strSchemeName, m_curListLevels);
            // 
            foreach (TreeNode childNode in selNode.Nodes) // 遍历
            {
                childNode.Text = node.Nodes[childNode.Index].Text;
                childNode.Name = childNode.Text;
                childNode.ForeColor = node.Nodes[childNode.Index].ForeColor;
            }

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节序号", 2, selNode.FullPath,selNode);

            MessageBox.Show("完成");

            return;
        }

//         private void btnHeadingSnSchemeUpdate_Click(object sender, EventArgs e)
//         {
//             // update db
// 
//             String strSchemeName = txtHeadingSnSchemeName.Text.Trim();
// 
//             TreeNode selNode = trvHeadingSnScheme.SelectedNode;
// 
//             if (strSchemeName.Equals("") && selNode == null)
//             {
//                 MessageBox.Show("请输入方案名称或选择方案");
//                 return;
//             }
//             else
//             {
//                 if (strSchemeName.Equals(""))
//                 {
//                     if (selNode.Level == 0)
//                     {
//                         MessageBox.Show("请选择方案");
//                     }
// 
//                     if (selNode.Level == 2)
//                     {
//                         selNode = selNode.Parent;
//                     }
// 
//                     strSchemeName = selNode.Text;
//                 }
//                 else
//                 {
//                     // 
//                 }
//             }
// 
//             String strRetMsg = "";
//             Boolean bValid = IsValidHeadingSnInput(strSchemeName, ref strRetMsg);
// 
//             if (!bValid)
//             {
//                 MessageBox.Show(strRetMsg);
//                 return;
//             }
// 
// 
//             // search whether exist same name scheme
//             TreeNode[] fndNode = trvHeadingSnScheme.Nodes.Find(strSchemeName, true);
// 
//             if (fndNode.GetLength(0) == 0 || fndNode[0].Level != 1)
//             {
//                 MessageBox.Show("没有此名称的方案:'" + strSchemeName + "'");
//                 return;
//             }
// 
//             selNode = fndNode[0];
// 
//             if (selNode.Parent == m_trndPreBuiltIn)
//             {
//                 MessageBox.Show("不能更改预置方案");
//                 return;
//             }
// 
// 
//             int nRet = m_addin.updateHeadingSnScheme(strSchemeName, m_curListLevels);
// 
//             if (nRet != 0)
//             {
//                 MessageBox.Show("操作数据库异常，请联系管理检查数据库");
//                 return;
//             }
// 
//             // update tree ui, special with FONT
//             selNode = fndNode[0];
// 
//             TreeNode node = buildHeadingSnTreeNodeItem(strSchemeName, m_curListLevels);
// 
//             foreach (TreeNode childNode in selNode.Nodes)
//             {
//                 selNode.Nodes.Remove(childNode);
//             }
// 
//             foreach (TreeNode childNode in node.Nodes)
//             {
//                 selNode.Nodes.Add(childNode);
//             }
// 
//             return;
//         }


        private void btnHeadingSnSchemeGet_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = doc.ActiveWindow.Selection;

            if (sel.Range.End - sel.Range.Start <= 1)
            {
                MessageBox.Show("请选中有多级序号的段落");
                return;
            }


            foreach (Word.Paragraph para in sel.Paragraphs) // 遍历选中区
            {
//                 if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
//                 {
//                     continue;
//                 }

                if (para.Range.ListFormat != null)
                {
                    if (para.Range.ListFormat.ListTemplate != null)
                    {
                        Word.ListLevels olvls = para.Range.ListFormat.ListTemplate.ListLevels;

                        for (int i = 0; i < 9; i++)
                        {
                            m_curListLevels[i].clone(olvls[i + 1]); // 复制
                        }

                        headingSnUpdateUiFromTreeNode(); // 更新
                        
                        break;
                    }
                }
            }

            MessageBox.Show("完成");

            return;
        }

//         设置多级序号
//                 private void setTemplateList(ClassListLevel[] oListLvels)
//                 {
//                     Word.Application app = m_addin.Application;
//                     // 自动编号 
//                     Word.ListGallery listGallery = app.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];
//         
//                     Object objIndex = 1;
//                     Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;
//         
//                     if (oListLvels != null)
//                     {
//                         for (int i = 1; i <= lstLvels.Count; i++) // 遍历
//                         {   // 设置
//                             lstLvels[i].NumberFormat = oListLvels[i-1].NumberFormat;
//                             lstLvels[i].TrailingCharacter = oListLvels[i - 1].TrailingCharacter;
//                             lstLvels[i].NumberStyle = oListLvels[i - 1].NumberStyle;
//                             lstLvels[i].NumberPosition = oListLvels[i - 1].NumberPosition;
//                             lstLvels[i].Alignment = oListLvels[i - 1].Alignment;
//                             lstLvels[i].TextPosition = oListLvels[i - 1].TextPosition;
//                             lstLvels[i].TabPosition = oListLvels[i - 1].TabPosition;
//                             lstLvels[i].ResetOnHigher = oListLvels[i - 1].ResetOnHigher;
//                             lstLvels[i].StartAt = oListLvels[i - 1].StartAt;
//                             lstLvels[i].LinkedStyle = oListLvels[i - 1].LinkedStyle;
//         
//                             if (lstLvels[i].Font != null)
//                             {
//                                 oListLvels[i - 1].Font.copy2(lstLvels[i].Font); // 复制字体
//                             }
//                         }
//                     }
//                     else
//                     {
//                         // Word.Document doc = app.ActiveDocument;
//                         // Word.Selection sel = doc.ActiveWindow.Selection;
//                         // 参照word的设置进行配置，下同
//                         lstLvels[1].NumberFormat = "%1";
//                         lstLvels[1].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[1].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[1].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[1].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[1].TextPosition = app.CentimetersToPoints(0.76f);
//                         lstLvels[1].TabPosition = 0f;
//                         lstLvels[1].ResetOnHigher = 0;
//                         lstLvels[1].StartAt = 1;
//                         lstLvels[1].LinkedStyle = "标题 1";
//         
//                         lstLvels[2].NumberFormat = "%1.%2";
//                         lstLvels[2].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[2].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[2].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[2].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[2].TextPosition = app.CentimetersToPoints(1.02f);
//                         lstLvels[2].TabPosition = 0f;
//                         lstLvels[2].ResetOnHigher = 1;
//                         lstLvels[2].StartAt = 1;
//                         lstLvels[2].LinkedStyle = "标题 2";
//         
//                         lstLvels[3].NumberFormat = "%1.%2.%3";
//                         lstLvels[3].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[3].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[3].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[3].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[3].TextPosition = app.CentimetersToPoints(1.27f);
//                         lstLvels[3].TabPosition = 0f;
//                         lstLvels[3].ResetOnHigher = 2;
//                         lstLvels[3].StartAt = 1;
//                         lstLvels[3].LinkedStyle = "标题 3";
//         
//                         lstLvels[4].NumberFormat = "%1.%2.%3.%4";
//                         lstLvels[4].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[4].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[4].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[4].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[4].TextPosition = app.CentimetersToPoints(1.52f);
//                         lstLvels[4].TabPosition = 0f;
//                         lstLvels[4].ResetOnHigher = 3;
//                         lstLvels[4].StartAt = 1;
//                         lstLvels[4].LinkedStyle = "标题 4";
//         
//         
//                         lstLvels[5].NumberFormat = "%1.%2.%3.%4.%5";
//                         lstLvels[5].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[5].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[5].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[5].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[5].TextPosition = app.CentimetersToPoints(1.78f);
//                         lstLvels[5].TabPosition = 0f;
//                         lstLvels[5].ResetOnHigher = 4;
//                         lstLvels[5].StartAt = 1;
//                         lstLvels[5].LinkedStyle = "标题 5";
//         
//                         lstLvels[6].NumberFormat = "%1.%2.%3.%4.%5.%6";
//                         lstLvels[6].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[6].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[6].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[6].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[6].TextPosition = app.CentimetersToPoints(2.03f);
//                         lstLvels[6].TabPosition = 0f;
//                         lstLvels[6].ResetOnHigher = 5;
//                         lstLvels[6].StartAt = 1;
//                         lstLvels[6].LinkedStyle = "标题 6";
//         
//                         lstLvels[7].NumberFormat = "%1.%2.%3.%4.%5.%6.%7";
//                         lstLvels[7].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[7].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[7].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[7].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[7].TextPosition = app.CentimetersToPoints(2.29f);
//                         lstLvels[7].TabPosition = 0f;
//                         lstLvels[7].ResetOnHigher = 6;
//                         lstLvels[7].StartAt = 1;
//                         lstLvels[7].LinkedStyle = "标题 7";
//         
//                         lstLvels[8].NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8";
//                         lstLvels[8].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[8].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[8].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[8].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[8].TextPosition = app.CentimetersToPoints(2.54f);
//                         lstLvels[8].TabPosition = 0f;
//                         lstLvels[8].ResetOnHigher = 7;
//                         lstLvels[8].StartAt = 1;
//                         lstLvels[8].LinkedStyle = "标题 8";
//         
//         
//                         lstLvels[9].NumberFormat = "%1.%2.%3.%4.%5.%6.%7.%8.%9";
//                         lstLvels[9].TrailingCharacter = Word.WdTrailingCharacter.wdTrailingTab;
//                         lstLvels[9].NumberStyle = Word.WdListNumberStyle.wdListNumberStyleArabic;
//                         lstLvels[9].NumberPosition = app.CentimetersToPoints(0f);
//                         lstLvels[9].Alignment = Word.WdListLevelAlignment.wdListLevelAlignLeft;
//                         lstLvels[9].TextPosition = app.CentimetersToPoints(2.79f);
//                         lstLvels[9].TabPosition = 0f;
//                         lstLvels[9].ResetOnHigher = 8;
//                         lstLvels[9].StartAt = 1;
//                         lstLvels[9].LinkedStyle = "标题 9";
//                     }
//         
//                     // listGallery.ListTemplates[objIndex].Name = "myList";
//         
//                 }

        private void applyHeadingSnScheme2CurDoc()
        {
            DialogResult res = MessageBox.Show( "确定将当前多级列表方案应用于所有的大纲章节？\r\n\r\n" +
                                                "请注意：章节序号可能改变章节段落的样式！\r\n"+ 
                                                "当章节样式与样式库中不一致时，以样式库（如\"标题 1\"）为准\r\n" +
                                                "例如：大纲级别为1级的章节应用章节序号后，以样式库\"标题 1\"样式为准", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No || m_curListLevels == null)
                return;

            Boolean bRestoreStyle = false;

            // bRestoreStyle = chkHeadingSnReserveCurStyle.Checked;

            Word.Application app = m_addin.Application;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            int oSaveInterval = app.Options.SaveInterval;
            app.Options.SaveInterval = 120;


            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;


            Word.WdViewType oViewType = doc.ActiveWindow.View.Type;

            // 切换到normal view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }

            m_addin.m_commTools.setTemplateList(app, m_curListLevels);

            Word.ListGallery listGallery = m_addin.Application.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];
            Object objIndex = 1;
            Word.ListTemplate lstTemplate = listGallery.ListTemplates[objIndex];

            dynamic styleDialog = app.Dialogs[Word.WdWordDialog.wdDialogFormatStyle];

            ArrayList arrParaArrs = null, arrParas = null;
            Boolean bWillChange = false;

            int[] nHeadings = new int[9];

            for (int i = 0; i < 9; i++)
            {
                nHeadings[i] = (i+1);
            }

            arrParaArrs = m_commonTools.getSpecificHeadingParaArrsInScope(doc, null, nHeadings);

            for (int i = 1; i <= 9; i++)
            {
                arrParas = (ArrayList)arrParaArrs[i];
                if (arrParas.Count > 0)
                {
                    bWillChange = true;
                    break;
                }
            }

            ///////// original code
            progBarHeadingSn.Left = txtHeadingSnSchemeName.Left;
            progBarHeadingSn.Top = txtHeadingSnSchemeName.Top;
            progBarHeadingSn.Width = txtHeadingSnSchemeName.Width;
            progBarHeadingSn.Height = txtHeadingSnSchemeName.Height;

            progBarHeadingSn.Maximum = 9;//arrHeadingParas.Count;
            progBarHeadingSn.Value = 0;

            btnExitHeadingSnApply.Left = btnHeadingSnNameGen.Left;
            btnExitHeadingSnApply.Top = btnHeadingSnNameGen.Top;

            btnExitHeadingSnApply.Visible = true;
            progBarHeadingSn.Visible = true;

            m_bExitHeadingSnApply = false;

            if (m_addin.AppVersion >= 15 && bWillChange) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("设置章节序号");
            }

            Word.Style styleHeading = null;
            String strHeading = "";

            int nTotalParas = 0;
            String strStat = "";

            for (int i = 1; i <= 9; i++)
            {
                arrParas = (ArrayList)arrParaArrs[i];
                if (arrParas.Count > 0)
                {
                    nTotalParas += arrParas.Count;
                    strStat += i + "级：" + arrParas.Count + "\r\n";

                    foreach (Word.Paragraph para in arrParas)
                    {
                        m_commonTools.RecordMultiSel(para.Range);
                    }
                    m_commonTools.ExecMultiSel(doc);


                    strHeading = "标题 " + i;

                    try
                    {
                        // sel.Range.ListFormat.RemoveNumbers(Word.WdNumberType.wdNumberParagraph);

                        styleHeading = doc.Styles[strHeading];
                        if (styleHeading.ListTemplate != null)
                        {
                            styleHeading.LinkToListTemplate(null);
                        }
                        styleHeading.LinkToListTemplate(lstTemplate);

                        // styleDialog.Name = strHeading;
                        // styleDialog.Apply();
                        sel.set_Style(styleHeading);
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("没有内置样式名：'" + "标题 " + i + "'的样式\r\n" + ex.Message);
                    }
                    finally
                    {
                    }
                }

                progBarHeadingSn.Value++;
            }


            //for (int i = 1; i <= 9; i++)
            //{
            //    strHeading = "标题 " + i;

            //    try
            //    {
            //        styleHeading = doc.Styles[strHeading];
            //        if (styleHeading.ListTemplate != null)
            //        {
            //            styleHeading.LinkToListTemplate(null);
            //        }
            //        styleHeading.LinkToListTemplate(lstTemplate,(object)i);
            //    }
            //    catch (System.Exception ex)
            //    {
            //        MessageBox.Show("没有内置样式名：'" + "标题 " + i + "'的样式\r\n" + ex.Message);
            //    }
            //    finally
            //    {
            //    }

            //    progBarHeadingSn.Value++;
            //}

            if (m_addin.AppVersion >= 15 && bWillChange) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            progBarHeadingSn.Visible = false;
            btnExitHeadingSnApply.Visible = false;
            m_bExitHeadingSnApply = false;

            // 恢复特定view
            doc.ActiveWindow.View.Type = oViewType;

            // restore original position
            sel.Start = nOStart;
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range); // 视角恢复


            app.Options.SaveInterval = oSaveInterval;

            if (bWillChange)
            {
                MessageBox.Show("完成\r\n" + "章节总数：" + nTotalParas + "\r\n" + strStat);
            }
            else
            {
                MessageBox.Show("完成");
            }

            return;
        }


        private void applyHeadingSnScheme2CurDoc_v1()
        {
            DialogResult res = MessageBox.Show("确定将当前多级列表方案应用于所有的大纲章节？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No || m_curListLevels == null)
                return;

            Boolean bRestoreStyle = false;

            // res = MessageBox.Show("保留当前章节段落已设置的样式？", "注意", MessageBoxButtons.YesNo);
            // if (res == DialogResult.Yes)

            bRestoreStyle = chkHeadingSnReserveCurStyle.Checked;

            Word.Application app = m_addin.Application;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (bRestoreStyle)
            {
                //DialogResult ret = MessageBox.Show("选择的‘" + chkHeadingSnReserveCurStyle.Text + "’将使运行较慢，确定继续吗？", "注意", MessageBoxButtons.YesNo);

                //if (ret == DialogResult.No)
                //    return;
            }
            else
            {
                DialogResult ret = MessageBox.Show("没有选择‘" + chkHeadingSnReserveCurStyle.Text + "’将使章节样式变化（同当前文档的标题样式），确定继续吗？", "注意", MessageBoxButtons.YesNo);

                if (ret == DialogResult.No)
                    return;
            }


            Word.Selection sel = doc.ActiveWindow.Selection;

            int nOStart = sel.Start;
            int nOEnd = sel.End;

            Word.ListGallery listGallery = m_addin.Application.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];

            Object objIndex = 1;
            Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;

            Object objContinue = false ;
            Object objApplyTo = Word.WdListApplyTo.wdListApplyToSelection;// wdListApplyToWholeList;
            Object objDefaultBehav = Word.WdDefaultListBehavior.wdWord10ListBehavior;

            // 切换到normal view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }

            // set list levels templates
//             // 设置多级序号
//             for (int ix = 0; ix < 9; ix++)
//             {
//                 if(m_curListLevels[ix].ResetOnHigher == 0)
//                 {
//                     m_curListLevels[ix].ResetOnHigher = ix;
//                 }
//             }

            m_addin.m_commTools.setTemplateList(app, m_curListLevels);

            // ArrayList arrHeadingParas = m_commonTools.getHeadingParasInScopeByNav(app, doc);// 取章节段落
            ArrayList arrHeadingParas = m_commonTools.getHeadingParas(doc);// 取章节段落

            /*
                       foreach (Word.Paragraph para in arrHeadingParas)
                       {
                           m_addin.m_commTools.RecordMultiSel(para.Range);
                           m_curDoc.ActiveWindow.ScrollIntoView(para.Range, true);
                       }

                       m_addin.m_commTools.ExecMultiSel(m_curDoc);

                       // assign
                       //Word.ListGallery listGallery = m_addin.Application.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];

                       //Object objIndex = 1;
                       //Word.ListLevels lstLvels = listGallery.ListTemplates[objIndex].ListLevels;

                       objContinue = false;//false ;
                       //Object objApplyTo = Word.WdListApplyTo.wdListApplyToSelection;// wdListApplyToWholeList;
                       //Object objDefaultBehav = Word.WdDefaultListBehavior.wdWord10ListBehavior;

                       // list levels
                       // sel.Range.Select();
                       sel.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                           objContinue, objApplyTo, objDefaultBehav);*/

            ///////// original code
            progBarHeadingSn.Left = txtHeadingSnSchemeName.Left;
            progBarHeadingSn.Top = txtHeadingSnSchemeName.Top;
            progBarHeadingSn.Width = txtHeadingSnSchemeName.Width;
            progBarHeadingSn.Height = txtHeadingSnSchemeName.Height;

            progBarHeadingSn.Maximum = arrHeadingParas.Count;
            progBarHeadingSn.Value = 0;

            btnExitHeadingSnApply.Left = btnHeadingSnNameGen.Left;
            btnExitHeadingSnApply.Top = btnHeadingSnNameGen.Top;
            
            btnExitHeadingSnApply.Visible = true;

            progBarHeadingSn.Visible = true;

            m_bExitHeadingSnApply = false;

            ClassFont cFnt = new ClassFont();
            ClassParagraphFormat cParaFmt = new ClassParagraphFormat();

            // ClassFont[] arrFonts = null;
            // ClassParagraphFormat[] arrParaFormat = null;

//             if (bRestoreStyle)
//             {
//                 arrFonts = new ClassFont[arrHeadingParas.Count];
//                 arrParaFormat = new ClassParagraphFormat[arrHeadingParas.Count];
// 
//                 if (arrFonts == null || arrParaFormat == null)
//                 {
//                     return;
//                 }
//             }

            Word.Style headingStyle = null;
            String strHeading = "标题 ";
            int i = 0, nLvl = 0;

            if (m_addin.AppVersion >= 15 && arrHeadingParas.Count > 0) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("设置章节序号");
            }

            foreach (Word.Paragraph dstPara in arrHeadingParas) // 遍历段落
            {
                progBarHeadingSn.Value++;

                if (m_bExitHeadingSnApply)
                    break;

                // viewpoint follow
                doc.ActiveWindow.ScrollIntoView(dstPara.Range, true); 

                if (bRestoreStyle)
                {
                    // arrFonts[i] = new ClassFont();
                    // arrParaFormat[i] = new ClassParagraphFormat();

                    cFnt.clone(dstPara.Range.Font); // clone复制
                    cParaFmt.clone(dstPara.Range.ParagraphFormat); // clone复制

                    // arrFonts[i].clone(dstPara.Range.Font);
                    // arrParaFormat[i].clone(dstPara.Range.ParagraphFormat);
                }

                // dstPara.Range.Text = dstPara.Range.Text.TrimStart();
                if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText) // 非正文
                {
                    nLvl = (int)dstPara.OutlineLevel;

                    try
                    {
                    	headingStyle = doc.Styles[strHeading + nLvl]; // 取章节
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show("关联的内置样式：\'" + strHeading + nLvl + "\'异常，请检查此文档的此名称内置样式是否存在！");
                        break;
                    }
                    finally
                    {

                    }

                    if(headingStyle != null)
                    {
                        dstPara.set_Style(headingStyle); // 设置样式
                        //dstPara.Range.set_Style(headingStyle);
                    }

                    // list levels
                    // dstPara.Range.Select();
                    // dstPara.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                    //    objContinue, objApplyTo, objDefaultBehav);

                    if (i == 0)
                    {
                        Word.Paragraph para = (Word.Paragraph)arrHeadingParas[0];

                        para.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
                                objContinue, objApplyTo, objDefaultBehav); // 应用多级序号 
                    }
                }


                if (bRestoreStyle)
                {
                    cFnt.copy2(dstPara.Range.Font); // 恢复原字体
                    cParaFmt.copy2(dstPara.Range.ParagraphFormat); // 恢复原段落样式

                    // arrFonts[i].copy2(dstPara.Range.Font);
                    // arrParaFormat[i].copy2(dstPara.Range.ParagraphFormat);
                }

                i++;

            }// foreach

            if (m_addin.AppVersion >= 15 && arrHeadingParas.Count > 0) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

//             if (arrHeadingParas.Count > 0)
//             {
//                 Word.Paragraph para = (Word.Paragraph)arrHeadingParas[0];
// 
//                 para.Range.ListFormat.ApplyListTemplateWithLevel(listGallery.ListTemplates[objIndex],
//                         objContinue, objApplyTo, objDefaultBehav);
//             }

            progBarHeadingSn.Visible = false;
            btnExitHeadingSnApply.Visible = false;
            m_bExitHeadingSnApply = false;

            // 恢复特定view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            }


            // restore original position
            sel.Start = nOStart;
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range); // 视角恢复

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingSnSchemeLinkHeadings_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确定将当前多级列表方案连接到标题样式？\r\n\r\n" +
                                                "例如：1级的章节序号连接到\"标题 1\"样式，依次类推\r\n" +
                                                "请注意：章节序号可能改变章节段落的样式！", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No || m_curListLevels == null)
                return;

            Word.Application app = m_addin.Application;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            m_addin.m_commTools.setTemplateList(app, m_curListLevels);

            Word.ListGallery listGallery = m_addin.Application.ListGalleries[Word.WdListGalleryType.wdOutlineNumberGallery];
            Object objIndex = 1;
            Word.ListTemplate lstTemplate = listGallery.ListTemplates[objIndex];

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("连接章节序号到样式库");
            }

            Word.Style styleHeading = null;
            String strHeading = "";

            for (int i = 1; i <= 9; i++)
            {
                strHeading = "标题 " + i;

                try
                {
                    styleHeading = doc.Styles[strHeading];
                    if (styleHeading.ListTemplate != null)
                    {
                        styleHeading.LinkToListTemplate(null);
                    }
                    styleHeading.LinkToListTemplate(lstTemplate);
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("没有内置样式名：'" + "标题 " + i + "'的样式\r\n" + ex.Message);
                }
                finally
                {
                }
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            MessageBox.Show("完成！请在样式库中查看结果");
            return;
        }


        private void btnHeadingSnSchemeApply_Click(object sender, EventArgs e)
        {
            applyHeadingSnScheme2CurDoc(); // 应用章节序号到当前文档
            return;
        }


        private void trvHeadingSnScheme_AfterSelect(object sender, TreeViewEventArgs e)
        {
            TreeNode selNode = trvHeadingSnScheme.SelectedNode;

            if (selNode.Level == 0)
            {
                return;
            }
            else if (selNode.Level == 2)
            {
                m_nCurSelLevelIndex = selNode.ImageIndex - 1;
                selNode = selNode.Parent;
            }

            String strSchemeName = selNode.Text;

            if (strSchemeName.Equals(""))
            {
                return;
            }

            ClassListLevel[] listLevels = null;
            if (selNode.Parent == m_trndHeadingSnPreBuiltIn)
            {
                // 预置方案
                listLevels = (ClassListLevel[])m_addin.m_hashHeadingSnPreBuiltInScheme[strSchemeName];
            }
            else
            {
                // user define
                listLevels = (ClassListLevel[])m_addin.m_hashHeadingSnUserDefineScheme[strSchemeName];
            }

            if (listLevels != null)
            {
                txtHeadingSnSchemeName.Text = strSchemeName;

                if (m_trndCurSchemeNode != selNode)
                {
                    m_trndCurSchemeNode = selNode;
                    for (int i = 0; i < 9; i++)
                    {
                        m_curListLevels[i].clone(listLevels[i]); // clone
                    }
                }

                lstHeadingSnLevel.SelectedIndex = m_nCurSelLevelIndex;

                // update input ui
                m_bFromLevelChange = true;
                headingSnUpdateUiFromTreeNode(); // 更新树节点信息
                m_bFromLevelChange = false;
            }

            return;
        }

        private void headingSnUpdateUiFromTreeNode()
        {
            headingSnLoad2Ui(); // 加载
            headingSnPreview(); // 更新预览

            return;
        }


        public String headingSnNameBriefGen()
        {
            String strName = "", strItem = "";

            if (m_curListLevels != null)
            {
                for (int i = 0; i < 5; i++)
                {
                    strItem = buildHeadingSnPreview(m_curListLevels, i); // 建立预览信息
                    strName += strItem + "/"; // 连接
                }

                strName += "...";
            }

            return strName;
        }


        private void btnHeadingSnNameGen_Click(object sender, EventArgs e)
        {
            String strName = headingSnNameBriefGen(); // 产生概要信息

            txtHeadingSnSchemeName.Text += ":" + strName; // 连接显示

            return;
        }

        private void trvHeadingSnScheme_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            TreeNode selNode = trvHeadingSnScheme.SelectedNode;

            if (selNode.Level == 0)
            {
                MessageBox.Show("请选中方案节点");
                return;
            }

            applyHeadingSnScheme2CurDoc(); // 应用章节序号方案到当前文档

            return;
        }

        private void btnHeadingSnReset_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确认将当前活动章节序号方案重置到缺省章节序号？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            for (int i = 0; i < 9; i++)
            {
                m_curListLevels[i].clone(m_defaultListLevels[i]); // 各级clone
            }

            m_nCurSelLevelIndex = 0;
            m_trndCurSchemeNode = null;

            headingSnLoad2Ui(); // 加载
            headingSnPreview(); // 更新预览

            return;
        }


        private void headingSnSchemePreview_v1()
        {
            Word.Application app = m_addin.Application;

            FormPreview frmPreview = new FormPreview();
            frmPreview.richTextBoxCnt.Clear();

            Font fnt = null;

            float fIndent = 0.0f;

            //             frmPreview.richTextBox1.SelectionFont = fnt;
            //             frmPreview.richTextBox1.AppendText("标题" + (i + 1) + "级\r");
            // 
            //             dbTmp = 4*fnt.SizeInPoints*96/72;
            // 
            //             dbHeightPixels += (fnt.SizeInPoints) * 96 / 72 + fnt.Height;
            //             if (dbTmp > dbWidthMaxPixels)
            //             {
            //             dbWidthMaxPixels = dbTmp;
            //             }

            ClassFont lstLevelFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;

            String strHeading = "", strSpace = "";
            double dbWidth = 0.0, dbMaxWidth = 0.0, dbSnHeight = 0.0, dbHeadingHeight = 0.0;
            double dbMaxHeight = 0.0, dbAccumHeight = 0.0;

            // get current list levels
            for (int i = 0; i < 9; i++)
            {
                dbWidth = 0.0;
                dbSnHeight = 0.0;
                dbHeadingHeight = 0.0;
                dbMaxHeight = 0.0;
                strSpace = "";

                // get sys styles font infomration.
                strHeading = "标题 " + (i + 1);
                // Word.Application app = Globals.ThisAddIn.Application;
                Word.Document curDoc = null;

                try
                {
                    curDoc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

                Word.Style styleHeading = curDoc.Styles[strHeading];

                if (styleHeading == null)
                {
                    continue;
                }

                wFnt = styleHeading.Font;
                fntStyle = FontStyle.Regular;
                
                String strDefInput = buildHeadingSnPreview(m_curListLevels, i); // 建立章节序号预览信息

                if (m_curListLevels[i].Font.Name.Equals("")) // 分析字体
                {
                    if (wFnt.Bold != 0) // 粗体
                    {
                        fntStyle |= FontStyle.Bold;
                    }

                    if (wFnt.Underline != 0) // 下划线
                    {
                        fntStyle |= FontStyle.Underline;
                    }

                    if (wFnt.Italic != 0) // 斜体
                    {
                        fntStyle |= FontStyle.Italic;
                    }

                    if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0) // 中贯线
                    {
                        fntStyle |= FontStyle.Strikeout;
                    }

                    if (wFnt.Superscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 1000;
                    }
                    else if (wFnt.Subscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = -1000;
                    }
                    else
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 0;
                    }

                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);

                    frmPreview.richTextBoxCnt.SelectionFont = fnt;

                    fIndent = app.PointsToPixels(m_curListLevels[i].NumberPosition);// 转化换算

                    frmPreview.richTextBoxCnt.SelectionIndent = (int)fIndent;

                    dbSnHeight = wFnt.Size * 96 / 72;
                    dbWidth = wFnt.Size * 96 / 72 + fIndent;

                    // 颜色
                    frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                    if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                    {
                        int nColorVal = (int)wFnt.Color;
                        int nRed = (nColorVal & 0xFF);
                        int nGreen = (nColorVal & 0xFF00) >> 8;
                        int nBlue = (nColorVal & 0xFF0000) >> 16;

                        frmPreview.richTextBoxCnt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                    }
                    // 对齐转换
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Left;
                    }
                    // 对齐居中
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Center;
                    }
                    // 对齐居右
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Right;
                    }

                }
                else
                {
                    lstLevelFnt = m_curListLevels[i].Font;

                    if (lstLevelFnt.Bold != 0)
                    {
                        fntStyle |= FontStyle.Bold; // 粗体
                    }

                    if (lstLevelFnt.Underline != 0)
                    {
                        fntStyle |= FontStyle.Underline; // 下划线
                    }

                    if (lstLevelFnt.Italic != 0)
                    {
                        fntStyle |= FontStyle.Italic; // 斜体
                    }

                    if (lstLevelFnt.StrikeThrough != 0 || lstLevelFnt.DoubleStrikeThrough != 0)
                    {
                        fntStyle |= FontStyle.Strikeout; // 中贯线
                    }

                    if (lstLevelFnt.Superscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 1000;
                    }
                    else if (lstLevelFnt.Subscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = -1000;
                    }
                    else
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 0;
                    }

                    fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, fntStyle);

                    frmPreview.richTextBoxCnt.SelectionFont = fnt;

                    fIndent = app.PointsToPixels(m_curListLevels[i].NumberPosition);

                    frmPreview.richTextBoxCnt.SelectionIndent = (int)fIndent;

                    dbSnHeight = lstLevelFnt.Size * 96 / 72;
                    dbWidth = (strDefInput.Length * lstLevelFnt.Size * 96 / 72) + fIndent;
                    // 颜色
                    frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                    if (lstLevelFnt.Color != Word.WdColor.wdColorAutomatic)
                    {
                        int nColorVal = (int)lstLevelFnt.Color;
                        int nRed = (nColorVal & 0xFF);
                        int nGreen = (nColorVal & 0xFF00) >> 8;
                        int nBlue = (nColorVal & 0xFF0000) >> 16;

                        frmPreview.richTextBoxCnt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                    }
                    // 居中转换
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Left;
                    }
                    // 居中对齐
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Center;
                    }
                    // 居右对齐
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Right;
                    }

                }

                frmPreview.richTextBoxCnt.AppendText(strDefInput);

                // 一级标题
                fntStyle = FontStyle.Regular;

                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;// 粗体
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (wFnt.Superscript != 0)
                {
                    frmPreview.richTextBoxCnt.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    frmPreview.richTextBoxCnt.SelectionCharOffset = -1000;
                }
                else
                {
                    frmPreview.richTextBoxCnt.SelectionCharOffset = 0;
                }

                fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);

                frmPreview.richTextBoxCnt.SelectionFont = fnt;

                if (m_curListLevels[i].TabPosition != (float)Word.WdConstants.wdUndefined)
                {
                    fIndent = app.PointsToPixels(m_curListLevels[i].TextPosition + m_curListLevels[i].TabPosition);
                }
                else
                {
                    fIndent = app.PointsToPixels(m_curListLevels[i].TextPosition);
                }


                int nCnt = (int)(fIndent / fnt.SizeInPoints);

                for (int j = 0; j < nCnt; j++)
                {
                    strSpace += " ";
                }

                // frmPreview.richTextBoxCnt.SelectionIndent = (int)fIndent;
                // 颜色
                frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    frmPreview.richTextBoxCnt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
                // 对齐转换
                if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
                {
                    frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Left;
                }
                // 居中
                if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
                {
                    frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Center;
                }
                // 居右
                if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
                {
                    frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Right;
                }

                dbHeadingHeight = wFnt.Size * 96 / 72;
                dbWidth += ((5 + nCnt) * wFnt.Size * 96 / 72) + fIndent;

                if (dbWidth > dbMaxWidth)
                {
                    dbMaxWidth = dbWidth;
                }

                dbMaxHeight = (dbSnHeight > dbHeadingHeight) ? dbSnHeight : dbHeadingHeight;

                dbAccumHeight += dbMaxHeight;
                // 显示
                frmPreview.richTextBoxCnt.AppendText(strSpace + "标题" + (i + 1) + "级\r\n");
            } // foreach

            //             frmPreview.richTextBoxCnt.Width = 400;// (int)dbMaxWidth;
            //             frmPreview.richTextBoxCnt.Height = (int)(dbAccumHeight*1.4);
            // 
            //             frmPreview.Width = frmPreview.richTextBoxCnt.Width + 10;
            //             frmPreview.Height = frmPreview.richTextBoxCnt.Height + 10;

            frmPreview.ShowDialog(); // 展示对话框

            return;
        }

        private void headingSnSchemePreview()
        {
            Word.Application app = m_addin.Application;

            FormPreview frmPreview = new FormPreview();
            frmPreview.richTextBoxCnt.Clear();

            Font fnt = null;

            float fIndent = 0.0f;

            //             frmPreview.richTextBox1.SelectionFont = fnt;
            //             frmPreview.richTextBox1.AppendText("标题" + (i + 1) + "级\r");
            // 
            //             dbTmp = 4*fnt.SizeInPoints*96/72;
            // 
            //             dbHeightPixels += (fnt.SizeInPoints) * 96 / 72 + fnt.Height;
            //             if (dbTmp > dbWidthMaxPixels)
            //             {
            //             dbWidthMaxPixels = dbTmp;
            //             }

            ClassFont lstLevelFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;

            String strHeading = "", strSpace = "",strFntName = "", strFntNum = "", strFntSize = "";
            double dbWidth = 0.0, dbMaxWidth = 0.0, dbSnHeight = 0.0, dbHeadingHeight = 0.0;
            double dbMaxHeight = 0.0, dbAccumHeight = 0.0;

            // get current list levels
            for (int i = 0; i < 9; i++)
            {
                dbWidth = 0.0;
                dbSnHeight = 0.0;
                dbHeadingHeight = 0.0;
                dbMaxHeight = 0.0;
                strSpace = "";

                // get sys styles font infomration.
                strHeading = "标题 " + (i + 1);
                // Word.Application app = Globals.ThisAddIn.Application;
                Word.Document curDoc = null;

                try
                {
                    curDoc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

                Word.Style styleHeading = null;

                try
                {
                	styleHeading = curDoc.Styles[strHeading];
                }
                catch (System.Exception ex)
                {
                    continue;
                }
                finally
                {
                }

                if (styleHeading == null)
                {
                    continue;
                }

                wFnt = styleHeading.Font;
                fntStyle = FontStyle.Regular;

                String strDefInput = buildHeadingSnPreview(m_curListLevels, i); // 建立章节序号预览信息

                if (strDefInput.Length == 0)
                {
                    strDefInput += "(空)";
                }

                String strFmtInfo = "";
                String strBoldItalic = "";

                if (String.IsNullOrWhiteSpace(m_curListLevels[i].Font.Name) )
                {
                    if (wFnt.Bold != 0)
                    {
                        fntStyle |= FontStyle.Bold; // 粗体
                    }

                    if (wFnt.Underline != 0)
                    {
                        fntStyle |= FontStyle.Underline; // 下划线
                    }

                    if (wFnt.Italic != 0)
                    {
                        fntStyle |= FontStyle.Italic; // 斜体
                    }

                    if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                    {
                        fntStyle |= FontStyle.Strikeout; // 中贯线
                    }


                    if (wFnt.Name.Equals("思源黑体"))
                    {
                        fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                    }
                    else
                    {
                        if (String.IsNullOrWhiteSpace(wFnt.Name)) // 设置样式
                        {
                            fnt = new Font("宋体", 10.5f, fntStyle);
                        }
                        else
                        {
                            fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                        }

                        // fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                    }

                    strFntName = "同标题字体:" + wFnt.Name;
                    strFntSize = "" + wFnt.Size;

                    strFntNum = m_addin.GetWordFontNumber(wFnt.Size);

                    // 字体转换
                    if (wFnt.Bold != 0 || wFnt.Italic != 0)
                    {
                        strBoldItalic = "[";
                        if (wFnt.Bold != 0)
                        {
                            strBoldItalic += "加粗";
                        }

                        if (wFnt.Italic != 0)
                        {
                            strBoldItalic += "斜体";
                        }

                        strBoldItalic += "]";
                    }
                }
                else
                {
                    lstLevelFnt = m_curListLevels[i].Font;

                    if (lstLevelFnt.Bold != 0)
                    {
                        fntStyle |= FontStyle.Bold; // 粗体
                    }

                    if (lstLevelFnt.Underline != 0)
                    {
                        fntStyle |= FontStyle.Underline; // 下划线
                    }

                    if (lstLevelFnt.Italic != 0)
                    {
                        fntStyle |= FontStyle.Italic; // 斜体
                    }

                    if (lstLevelFnt.StrikeThrough != 0 || lstLevelFnt.DoubleStrikeThrough != 0)
                    {
                        fntStyle |= FontStyle.Strikeout; // 中贯线
                    }

                    if (lstLevelFnt.Name.Equals("思源黑体"))
                    {
                        fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, FontStyle.Italic);
                    }
                    else
                    {
                        if (String.IsNullOrWhiteSpace(lstLevelFnt.Name)) // 设置样式
                        {
                            fnt = new Font("宋体", 10.5f, fntStyle);
                        }
                        else
                        {
                            fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, fntStyle);
                        }

                        // fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                    }

                    strFntName = lstLevelFnt.Name;
                    strFntSize = "" + lstLevelFnt.Size;

                    strFntNum = m_addin.GetWordFontNumber(lstLevelFnt.Size);

                    // 字体转换
                    if (lstLevelFnt.Bold != 0 || lstLevelFnt.Italic != 0)
                    {
                        strBoldItalic = "[";
                        if (lstLevelFnt.Bold != 0)
                        {
                            strBoldItalic += "加粗";
                        }

                        if (lstLevelFnt.Italic != 0)
                        {
                            strBoldItalic += "斜体";
                        }

                        strBoldItalic += "]";
                    }
                }

                if (m_curListLevels[i].TabPosition != (float)Word.WdConstants.wdUndefined)
                {
                    fIndent = app.PointsToPixels(m_curListLevels[i].TextPosition + m_curListLevels[i].TabPosition);
                }
                else
                {
                    fIndent = app.PointsToPixels(m_curListLevels[i].TextPosition);
                }


                int nCnt = (int)(fIndent / fnt.SizeInPoints);

                strSpace = "";
                for (int j = 0; j < nCnt; j++)
                {
                    strSpace += " ";
                }

                strFmtInfo = " [" + strFntName + strFntNum + strFntSize + "]" + strBoldItalic + "\r\n";

                int nStart = frmPreview.richTextBoxCnt.Text.Length;

                strDefInput += strSpace + "标题" + (i + 1) + "级";

                frmPreview.richTextBoxCnt.AppendText(strDefInput + strFmtInfo);

                frmPreview.richTextBoxCnt.Select(nStart, strDefInput.Length);
                
                if (String.IsNullOrWhiteSpace(m_curListLevels[i].Font.Name)) // 分析字体
                {
                    if (wFnt.Bold != 0) // 粗体
                    {
                        fntStyle |= FontStyle.Bold;
                    }

                    if (wFnt.Underline != 0) // 下划线
                    {
                        fntStyle |= FontStyle.Underline;
                    }

                    if (wFnt.Italic != 0) // 斜体
                    {
                        fntStyle |= FontStyle.Italic;
                    }

                    if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0) // 中贯线
                    {
                        fntStyle |= FontStyle.Strikeout;
                    }

                    if (wFnt.Superscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 1000;
                    }
                    else if (wFnt.Subscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = -1000;
                    }
                    else
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 0;
                    }

                    // fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);

                    frmPreview.richTextBoxCnt.SelectionFont = fnt;

                    //fIndent = app.PointsToPixels(m_curListLevels[i].NumberPosition);// 转化换算

                    //frmPreview.richTextBoxCnt.SelectionIndent = (int)fIndent;

                    dbSnHeight = wFnt.Size * 96 / 72;
                    dbWidth = wFnt.Size * 96 / 72 + fIndent;

                    // 颜色
                    frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                    if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                    {
                        int nColorVal = (int)wFnt.Color;
                        int nRed = (nColorVal & 0xFF);
                        int nGreen = (nColorVal & 0xFF00) >> 8;
                        int nBlue = (nColorVal & 0xFF0000) >> 16;

                        frmPreview.richTextBoxCnt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                    }
                    // 对齐转换
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Left;
                    }
                    // 对齐居中
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Center;
                    }
                    // 对齐居右
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Right;
                    }

                }
                else
                {
                    lstLevelFnt = m_curListLevels[i].Font;

                    if (lstLevelFnt.Bold != 0)
                    {
                        fntStyle |= FontStyle.Bold; // 粗体
                    }

                    if (lstLevelFnt.Underline != 0)
                    {
                        fntStyle |= FontStyle.Underline; // 下划线
                    }

                    if (lstLevelFnt.Italic != 0)
                    {
                        fntStyle |= FontStyle.Italic; // 斜体
                    }

                    if (lstLevelFnt.StrikeThrough != 0 || lstLevelFnt.DoubleStrikeThrough != 0)
                    {
                        fntStyle |= FontStyle.Strikeout; // 中贯线
                    }

                    if (lstLevelFnt.Superscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 1000;
                    }
                    else if (lstLevelFnt.Subscript != 0)
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = -1000;
                    }
                    else
                    {
                        frmPreview.richTextBoxCnt.SelectionCharOffset = 0;
                    }

                    // fnt = new Font(lstLevelFnt.Name, lstLevelFnt.Size, fntStyle);

                    frmPreview.richTextBoxCnt.SelectionFont = fnt;

                    //fIndent = app.PointsToPixels(m_curListLevels[i].NumberPosition);

                    // frmPreview.richTextBoxCnt.SelectionIndent = (int)fIndent;

                    dbSnHeight = lstLevelFnt.Size * 96 / 72;
                    dbWidth = (strDefInput.Length * lstLevelFnt.Size * 96 / 72) + fIndent;
                    // 颜色
                    frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                    if (lstLevelFnt.Color != Word.WdColor.wdColorAutomatic)
                    {
                        int nColorVal = (int)lstLevelFnt.Color;
                        int nRed = (nColorVal & 0xFF);
                        int nGreen = (nColorVal & 0xFF00) >> 8;
                        int nBlue = (nColorVal & 0xFF0000) >> 16;

                        frmPreview.richTextBoxCnt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                    }
                    // 居中转换
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignLeft)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Left;
                    }
                    // 居中对齐
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignCenter)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Center;
                    }
                    // 居右对齐
                    if (m_curListLevels[i].Alignment == Word.WdListLevelAlignment.wdListLevelAlignRight)
                    {
                        frmPreview.richTextBoxCnt.SelectionAlignment = HorizontalAlignment.Right;
                    }

                }

                frmPreview.richTextBoxCnt.Select(nStart + strDefInput.Length, strFmtInfo.Length);

                fntStyle = FontStyle.Regular;

                // fnt = new Font("宋体", 10.5f, fntStyle);
                fnt = new Font("宋体", 8.0f, fntStyle);

                frmPreview.richTextBoxCnt.SelectionFont = fnt;
                frmPreview.richTextBoxCnt.SelectionColor = Color.Black;
                frmPreview.richTextBoxCnt.SelectionCharOffset = 0;

            } // foreach

            int nEnd = frmPreview.richTextBoxCnt.Text.Length - 1;
            frmPreview.richTextBoxCnt.Select(nEnd, 0);

            frmPreview.ShowDialog(); // 展示对话框

            return;
        }

        private void cxtMenuItemPreview_Click(object sender, EventArgs e)
        {
            headingSnSchemePreview(); // 章节序号预览

            return;
        }

        private void btnHeadingSnPreview_Click(object sender, EventArgs e)
        {
            headingSnSchemePreview(); // 章节序号预览

            return;
        }

        // 初始化
        private void initHeadingStyleSchemes()
        {
            if (m_bLoadedHeadingStyle)
            {
                return;
            }

            trvHeadingStyleScheme.Nodes.Clear();

            TreeNode rootNode = new TreeNode(m_strHeadingStylePreBuiltIn);
            rootNode.Name = m_strHeadingStylePreBuiltIn;
            rootNode.ImageIndex = rootNode.SelectedImageIndex = 13;
            trvHeadingStyleScheme.Nodes.Add(rootNode);
            m_trndHeadingStylePreBuiltIn = rootNode;

            rootNode = new TreeNode(m_strHeadingStyleUserDefine);
            rootNode.Name = m_strHeadingStyleUserDefine;
            rootNode.ImageIndex = rootNode.SelectedImageIndex = 13;
            trvHeadingStyleScheme.Nodes.Add(rootNode);
            m_trndHeadingStyleUserDefine = rootNode;


            for (int i = 0; i < 10; i++)
            {
                m_curHeadingStyles[i] = new ClassHeadingStyle();
                m_addin.fillHeadingStyleItem(m_curHeadingStyles,i,"宋体");// 填充

                m_defaultHeadingStyles[i] = new ClassHeadingStyle();
                m_addin.fillHeadingStyleItem(m_defaultHeadingStyles, i, "宋体");// 填充
            }

            m_nCurHStyleSelLevelIndex = 0;
            lstOutlineLevel.SelectedIndex = 0;

            richHeadingStylePreview.Text = "";
            // 预览章节样式项
            previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);

            // load data from db
            loadallHeadingStyle2Ui();

            m_bLoadedHeadingStyle = true;

            return;
        }



//         private void btnHeadingStyleFont_Click(object sender, EventArgs e)
//         {
//             if (!(m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10))
//             {
//                 MessageBox.Show("请选中某级");
//                 return;
//             }
// 
//             Word.Application app = m_addin.Application;
// 
//             ClassFontDialogItems digItems = new ClassFontDialogItems();
// 
//             dynamic fntDialog = app.Dialogs[Word.WdWordDialog.wdDialogFormatFont];
// 
//             if (!m_curHeadingStyles[m_nCurHStyleSelLevelIndex].m_fnt.Name.Equals(""))
//             {
//                 digItems.clone(m_curHeadingStyles[m_nCurHStyleSelLevelIndex].m_fnt);
//                 digItems.copy2(fntDialog);
//             }
// 
//             int res = fntDialog.Display();
// 
//             if (res == -1) // ok
//             {
//                 digItems.clone(fntDialog);
//                 digItems.copy2(m_curHeadingStyles[m_nCurHStyleSelLevelIndex].m_fnt);
//             }
// 
//             return;
//         }
// 
// 
// 
//         private void btnHeadingStyleParaFormat_Click(object sender, EventArgs e)
//         {
//             if (!(m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10))
//             {
//                 MessageBox.Show("请选中某级");
//                 return;
//             }
// 
//             Word.Application app = m_addin.Application;
// 
//             dynamic paraFmtDialog = app.Dialogs[Word.WdWordDialog.wdDialogFormatParagraph];
// 
//             int res = paraFmtDialog.Display();
//             
//             // 摘要:
//             //     LeftIndent, RightIndent, Before, After, LineSpacingRule, LineSpacing, Alignment,
//             //     WidowControl, KeepWithNext, KeepTogether, PageBreak, NoLineNum, DontHyphen,
//             //     Tab, FirstIndent, OutlineLevel, Kinsoku, WordWrap, OverflowPunct, TopLinePunct,
//             //     AutoSpaceDE, LineHeightGrid, AutoSpaceDN, CharAlign, CharacterUnitLeftIndent,
//             //     AdjustRight, CharacterUnitFirstIndent, CharacterUnitRightIndent, LineUnitBefore,
//             //     LineUnitAfter, NoSpaceBetweenParagraphsOfSameStyle, OrientationBi
// 
//             if (res == -1) // ok
//             {
// 
//             }
// 
//             return;
//         }



        private void lstOutlineLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            int nSelIndex = lstOutlineLevel.SelectedIndex;

            if (m_nCurHStyleSelLevelIndex != nSelIndex)
            {
                // save
                m_nCurHStyleSelLevelIndex = nSelIndex;

                // preview
                // 
                richHeadingStylePreview.Text = "";
                // 预览章节样式项
                previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);

            }

            return;
        }


        private void btnHeadingStyleSchemeExtract_Click(object sender, EventArgs e)
        {
            //Word.Application app = m_addin.Application;
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            DialogResult res = MessageBox.Show("确认将提取全文或选择区的章节/正文样式到当前章节方案？", "确认", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

            if (res == DialogResult.No)
            {
                return;
            }


            Word.Selection sel = curDoc.ActiveWindow.Selection;
            Word.Paragraphs paras = null;

            int nLevel = -1;

            if (sel.Range.End - sel.Range.Start <= 1)
            {
                res = MessageBox.Show("没有任何选择，确认提取全文？","确认",MessageBoxButtons.YesNo,MessageBoxIcon.Question);

                if (res == DialogResult.No)
                {
                    return;
                }

                paras = curDoc.Paragraphs;
            }
            else
            {
                paras = sel.Paragraphs;
            }


            foreach (Word.Paragraph para in paras) // 遍历
            {
                if (para.Range.Text.Trim().Equals(""))
                    continue;

                nLevel = (int)para.OutlineLevel;
                // 提取信息
                m_curHeadingStyles[nLevel-1].m_fnt.clone(para.Range.Font);
                m_curHeadingStyles[nLevel - 1].m_bFntAssigned = true;
                m_curHeadingStyles[nLevel-1].m_paraFmt.clone(para.Range.ParagraphFormat);
                m_curHeadingStyles[nLevel - 1].m_bParaFmtAssigned = true;

                // preview update
                m_nCurHStyleSelLevelIndex = nLevel - 1;
                if (m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10)
                {
                    lstOutlineLevel.SelectedIndex = m_nCurHStyleSelLevelIndex;

                    richHeadingStylePreview.Text = "";
                    // 预览章节样式项
                    previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);

                }

            }

            MessageBox.Show("完成");

            return;
        }


        private void headingStylePreviewCurSel()
        {
            if (!(m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10))
            {
                // MessageBox.Show("请选中某级");
                return;
            }

            Word.Application app = m_addin.Application;

            richHeadingStylePreview.Clear();


            Font fnt = null;

            ClassFont outlineLevelFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;

            String strHeading = "";

            int i = m_nCurHStyleSelLevelIndex;
            // get sys styles font infomration.
            

            //[标题x级/正文][字体名称][Size]
            if(i < 9)
            {
                strHeading = "[标题 " + (i + 1) + "级]";
            }
            else
            {
                strHeading = "[正文]";
            }
            // 文档预置章节样式
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }


            Word.Style styleHeading = curDoc.Styles[strHeading];

            if (styleHeading == null)
            {
                return; ;
            }

            wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;

            String strDefInput = strHeading;
            // 设置字体
            if (m_curHeadingStyles[i].m_fnt.Name.Equals(""))
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (wFnt.Superscript != 0)
                {
                    richHeadingStylePreview.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richHeadingStylePreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richHeadingStylePreview.SelectionCharOffset = 0;
                }

                strDefInput += "[" + wFnt.Name + "][" + wFnt.Size + "]";

                fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                // 颜色
                richHeadingStylePreview.SelectionFont = fnt;
                richHeadingStylePreview.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richHeadingStylePreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
                // 对齐转换
                switch (m_curHeadingStyles[i].m_paraFmt.Alignment)
                {
                    case Word.WdParagraphAlignment.wdAlignParagraphRight:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Right;
                        break;

                    case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Center;
                        break;

                    case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    default:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Left;
                        break;
                }

            }
            else
            {
                outlineLevelFnt = m_curHeadingStyles[i].m_fnt;
                // 字体样式
                if (outlineLevelFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (outlineLevelFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (outlineLevelFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (outlineLevelFnt.StrikeThrough != 0 || outlineLevelFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (outlineLevelFnt.Superscript != 0)
                {
                    richHeadingStylePreview.SelectionCharOffset = 1000;
                }
                else if (outlineLevelFnt.Subscript != 0)
                {
                    richHeadingStylePreview.SelectionCharOffset = -1000;
                }
                else
                {
                    richHeadingStylePreview.SelectionCharOffset = 0;
                }

                strDefInput += "[" + outlineLevelFnt.Name + "][" + outlineLevelFnt.Size + "]";

                fnt = new Font(outlineLevelFnt.Name, outlineLevelFnt.Size, fntStyle);

                richHeadingStylePreview.SelectionFont = fnt;

                // 颜色转换
                richHeadingStylePreview.SelectionColor = Color.Black;
                if (outlineLevelFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)outlineLevelFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richHeadingStylePreview.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

                // 对齐转换
                switch (m_curHeadingStyles[i].m_paraFmt.Alignment)
                {
                    case Word.WdParagraphAlignment.wdAlignParagraphRight:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Right;
                        break;

                    case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Center;
                        break;

                    case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    default:
                        richHeadingStylePreview.SelectionAlignment = HorizontalAlignment.Left;
                        break;
                }

            }

            // 连接显示内容
            richHeadingStylePreview.AppendText(strDefInput + "\r\n");
            // font info, and paragraph info
            
            return;
        }

        // 判断是否合法
        private Boolean IsHeadingStyleNameValid(String strName, ref String strRetMsg)
        {
            if (strName.Equals(""))
            {
                strRetMsg = "名称为空";
                return false;
            }

            if (strName.Length > 120)
            {
                strRetMsg = "名称过长";
                return false;
            }

            return true;
        }


        private void btnHeadingStyleSchemeAdd_Click(object sender, EventArgs e)
        {
            String strSchemeName = txtHeadingStyleSchemeName.Text.Trim();
            String strRetMsg = "";

            if (!IsHeadingStyleNameValid(strSchemeName, ref strRetMsg))
            {
                MessageBox.Show(strRetMsg);
                return;
            }
            // 同名检查
            if (m_addin.m_hashHeadingStylePreBuiltInScheme.Contains(strSchemeName) ||
                m_addin.m_hashHeadingStyleUserDefineScheme.Contains(strSchemeName))
            {
                MessageBox.Show("存在同名方案");
                return;
            }
            // 新建数据以保存
            TreeNode trScheme = new TreeNode(strSchemeName);
            trScheme.Name = trScheme.Text;

            trScheme.ImageIndex = trScheme.SelectedImageIndex = 0;
            String strNodeText = "";

            ClassHeadingStyle[] cHeadingStyles = new ClassHeadingStyle[10];

            for (int i = 0; i < 10; i++)
            {
                TreeNode childNode = new TreeNode();

                childNode.ImageIndex = childNode.SelectedImageIndex = (i + 1);

                strNodeText = buildHeadingStyleBriefItem(m_curHeadingStyles[i], i + 1); // 提取摘要

                cHeadingStyles[i] = new ClassHeadingStyle();
                // 复制数据
                cHeadingStyles[i].m_fnt.clone(m_curHeadingStyles[i].m_fnt);
                cHeadingStyles[i].m_paraFmt.clone(m_curHeadingStyles[i].m_paraFmt);

                childNode.Text = childNode.Name = strNodeText;

                trScheme.Nodes.Add(childNode); // 添加节点
            }

            // add into userdefine category treenode
            if (m_trndHeadingStyleUserDefine != null)
            {
                m_trndHeadingStyleUserDefine.Nodes.Add(trScheme);
            }

            m_addin.m_hashHeadingStyleUserDefineScheme.Add(strSchemeName, cHeadingStyles);// user define
            // 添加
            m_addin.addHeadingStyleScheme(strSchemeName, cHeadingStyles);

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节样式", 1, trScheme.FullPath, trScheme);

            if (m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10)
            {   // 更新预览
                richHeadingStylePreview.Text = "";
                previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);
            }

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingStyleSchemeDel_Click(object sender, EventArgs e)
        {
            String strSchemeName = txtHeadingStyleSchemeName.Text.Trim();
            String strRetMsg = "";

            if (!IsHeadingStyleNameValid(strSchemeName, ref strRetMsg))
            {
                MessageBox.Show(strRetMsg);
                return;
            }

            if(!(m_addin.m_hashHeadingStylePreBuiltInScheme.Contains(strSchemeName) ||
                m_addin.m_hashHeadingStyleUserDefineScheme.Contains(strSchemeName)) )
            {
                MessageBox.Show("方案不存在");
                return;
            }

            TreeNode[] trFnd = null;
            if (m_trndHeadingStylePreBuiltIn != null)
            {
                trFnd = m_trndHeadingStylePreBuiltIn.Nodes.Find(strSchemeName, false);

                if (trFnd != null && trFnd.GetLength(0) > 0)
                {
                    MessageBox.Show("不能删除内置方案");
                    return;
                }

            }

            if (m_trndHeadingStyleUserDefine != null)
            {
                trFnd = m_trndHeadingStyleUserDefine.Nodes.Find(strSchemeName, false);
                if (trFnd != null && trFnd.GetLength(0) == 0)
                {
                    MessageBox.Show("方案不存在");
                    return;
                }
            }

            DialogResult res = MessageBox.Show("确认删除方案：" + strSchemeName + "？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
                return;

            m_addin.removeHeadingStyleScheme(strSchemeName);

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节样式", 3, trFnd[0].FullPath);

            trFnd[0].Remove();// UI树节点删除
            m_addin.m_hashHeadingStyleUserDefineScheme.Remove(strSchemeName); // 数据删除

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingStyleSchemeUpdate_Click(object sender, EventArgs e)
        {
            String strRetMsg = "";
            String strSchemeName = txtHeadingStyleSchemeName.Text.Trim();

            TreeNode selNode = trvHeadingStyleScheme.SelectedNode;

            if (strSchemeName.Equals("") && selNode == null)
            {
                MessageBox.Show("请输入方案名称或选择方案");
                return;
            }
            else
            {
                if (strSchemeName.Equals(""))
                {
                    if (selNode.Level == 0)
                    {
                        MessageBox.Show("请选择方案");
                    }

                    if (selNode.Level == 2)
                    {
                        selNode = selNode.Parent;
                    }

                    strSchemeName = selNode.Text;
                }
                else
                {
                    // 
                }
            }


            if (!IsHeadingStyleNameValid(strSchemeName, ref strRetMsg))
            {
                MessageBox.Show(strRetMsg);
                return;
            }

            if (!(m_addin.m_hashHeadingStylePreBuiltInScheme.Contains(strSchemeName) ||
                m_addin.m_hashHeadingStyleUserDefineScheme.Contains(strSchemeName)))
            {
                MessageBox.Show("方案不存在");
                return;
            }

            TreeNode[] trFnd = null;
            if (m_trndHeadingStylePreBuiltIn != null)
            {
                trFnd = m_trndHeadingStylePreBuiltIn.Nodes.Find(strSchemeName, false);

                if (trFnd != null && trFnd.GetLength(0) > 0)
                {
                    MessageBox.Show("不能变更内置方案");
                    return;
                }

            }

            if (m_trndHeadingStyleUserDefine != null)
            {
                trFnd = m_trndHeadingStyleUserDefine.Nodes.Find(strSchemeName, false);
                if (trFnd != null && trFnd.GetLength(0) == 0)
                {
                    MessageBox.Show("方案不存在");
                    return;
                }
            }

            DialogResult res = MessageBox.Show("确认更新方案：" + strSchemeName + "？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
                return;



            TreeNode trScheme = trFnd[0];
            trScheme.ImageIndex = trScheme.SelectedImageIndex = 0;
            String strNodeText = "";

            ClassHeadingStyle[] cHeadingStyles = (ClassHeadingStyle[])m_addin.m_hashHeadingStyleUserDefineScheme[strSchemeName];

            if (cHeadingStyles == null)
            {
                MessageBox.Show("never reach");
                return;
            }


            int i = 0;
            for (i = 0; i < 10; i++)
            {
                // cHeadingStyles[i] = new ClassHeadingStyle();

                cHeadingStyles[i].m_fnt.clone(m_curHeadingStyles[i].m_fnt);
                cHeadingStyles[i].m_paraFmt.clone(m_curHeadingStyles[i].m_paraFmt);
            }

            foreach(TreeNode childNode in trScheme.Nodes) // 遍历
            {
                i = childNode.ImageIndex;

                if(!(i >= 1 && i <= 10))
                {
                    continue;
                }
                // 提取章节样式摘要
                strNodeText = buildHeadingStyleBriefItem(cHeadingStyles[i-1], i);
                // 颜色
                childNode.Text = childNode.Name = strNodeText;
                if (cHeadingStyles[i - 1].m_fnt.Color != (Word.WdColor)Word.WdConstants.wdUndefined)
                {
                    int nColorVal = (int)cHeadingStyles[i - 1].m_fnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    childNode.ForeColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

            }

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "章节样式", 2, trScheme.FullPath, trScheme);
            // 更新
            m_addin.m_hashHeadingStyleUserDefineScheme[strSchemeName] = cHeadingStyles;
            // 更新
            m_addin.updateHeadingStyleScheme(strSchemeName, cHeadingStyles);

            // update review current item
            if (m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10)
            {   // 更新预览
                richHeadingStylePreview.Text = "";
                previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);
            }

            MessageBox.Show("完成");

            return;
        }


        private void btnHeadingStyleSchemePreview_Click(object sender, EventArgs e)
        {
//             String strRetMsg = "";
//             String strSchemeName = txtHeadingStyleSchemeName.Text.Trim();
// 
//             TreeNode selNode = trvHeadingStyleScheme.SelectedNode;
// 
//             if (strSchemeName.Equals("") && selNode == null)
//             {
//                 MessageBox.Show("请输入方案名称或选择方案");
//                 return;
//             }
//             else
//             {
//                 if (strSchemeName.Equals(""))
//                 {
//                     if (selNode.Level == 0)
//                     {
//                         MessageBox.Show("请选择方案");
//                     }
// 
//                     if (selNode.Level == 2)
//                     {
//                         selNode = selNode.Parent;
//                     }
// 
//                     strSchemeName = selNode.Text;
//                 }
//                 else
//                 {
//                     // 
//                 }
//             }
// 
//             if (!IsHeadingStyleNameValid(strSchemeName, ref strRetMsg))
//             {
//                 MessageBox.Show(strRetMsg);
//                 return;
//             }
// 
//             ClassHeadingStyle[] hs = null;
// 
//             if (m_addin.m_hashHeadingStylePreBuiltInScheme.Contains(strSchemeName))
//             {
//                 hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStylePreBuiltInScheme[strSchemeName];
//             }
//             else if (m_addin.m_hashHeadingStyleUserDefineScheme.Contains(strSchemeName))
//             {
//                 hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStyleUserDefineScheme[strSchemeName];
//             }
//             else
//             {
//                 MessageBox.Show("方案不存在");
//                 return;
//             }

            // update richtext box view
            FormPreview frmPreview = new FormPreview();

            // 遍历
            for (int i = 0; i < 10; i++)
            {
                previewHeadingStyleItem(frmPreview.richTextBoxCnt, m_curHeadingStyles[i], i); // 更新预览
            }
            
            frmPreview.ShowDialog(); // 显示对话框

            return;
        }


        private void previewHeadingStyleItem_v1(RichTextBox richTxt, ClassHeadingStyle hsItem, int nOutlineLevel)
        {
            Word.Application app = m_addin.Application;

            Font fnt = null;

            ClassFont hsFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;
            float fFntSize = 0.0f;
            String strFntName = "";
            String strHeading = "", strSpace = "";


            // get sys styles font infomration.
            if (nOutlineLevel >= 0 && nOutlineLevel < 9)
            {
                strHeading = "标题 " + (nOutlineLevel + 1);
            }
            else if (nOutlineLevel == 9)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            Word.Style styleHeading = null;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            
            try
            {
                styleHeading = curDoc.Styles[strHeading];
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {
            }

            if (styleHeading == null)
            {
                MessageBox.Show("无缺省标题样式：" + strHeading);
                return;
            }

            wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;
            // 字体转换
            if (hsItem.m_fnt.Name.Equals(""))
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (wFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle); 
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

            }
            else
            {
                hsFnt = hsItem.m_fnt;
                // 字体转换
                if (hsFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (hsFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (hsFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (hsFnt.StrikeThrough != 0 || hsFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (hsFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (hsFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = hsFnt.Name;
                fFntSize = hsFnt.Size;

                if (hsFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(hsFnt.Name, hsFnt.Size, FontStyle.Italic);
                }
                else
                {
                    if (String.IsNullOrWhiteSpace(hsFnt.Name)) // 设置样式
                    {
                        fnt = new Font("宋体", 10.5f, fntStyle);
                    }
                    else
                    {
                        fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                    }

                    // fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (hsFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)hsFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
            }
            // 对齐转换
            String strAlignment = "居左";

            richTxt.SelectionAlignment = HorizontalAlignment.Left;
            switch (hsItem.m_paraFmt.Alignment)
            {
                case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    richTxt.SelectionAlignment = HorizontalAlignment.Left;
                    strAlignment = "居左";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphRight:
                    richTxt.SelectionAlignment = HorizontalAlignment.Right;
                    strAlignment = "居右";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                    richTxt.SelectionAlignment = HorizontalAlignment.Center;
                    strAlignment = "居中";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphJustify:
                    strAlignment = "两端对齐";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphDistribute:
                    strAlignment = "分散对齐";
                    break;

                default:
                    strAlignment = "两端对齐";
                    break;
            }

            String strSpaceRule = "";

            switch (hsItem.m_paraFmt.LineSpacingRule)
            {
                case Word.WdLineSpacing.wdLineSpace1pt5:
                    strSpaceRule = "1.5倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceAtLeast:
                    strSpaceRule = "最小值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceDouble:
                    strSpaceRule = "2倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceExactly:
                    strSpaceRule = "固定值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceMultiple:
                    strSpaceRule = "多倍行距：" + (int)app.PointsToLines(hsItem.m_paraFmt.LineSpacing) + "倍";
                    break;

                case Word.WdLineSpacing.wdLineSpaceSingle:
                    strSpaceRule = "单倍行距";
                    break;

                default:
                    break;
            }

            String strIndent = "缩进：";

            strIndent += "左：" + app.PointsToCentimeters(hsItem.m_paraFmt.LeftIndent).ToString("0.##") + "厘米，" +
                         "右：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";

            if (hsItem.m_paraFmt.RightIndent > 0.0f)
            {
                strIndent += ",首行：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";
            }

            if (hsItem.m_paraFmt.CharacterUnitLeftIndent != 0.0f)
            {
                strIndent += "(左：" + (int)hsItem.m_paraFmt.CharacterUnitLeftIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitRightIndent != 0.0f)
            {
                strIndent += "(右：" + (int)hsItem.m_paraFmt.CharacterUnitRightIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitFirstLineIndent != 0.0f)
            {
                strIndent += "(首行：" + (int)hsItem.m_paraFmt.CharacterUnitFirstLineIndent + "字符)";
            }

            String strFmtInfo = "";

            String strFntNum = m_addin.GetWordFontNumber(fFntSize); // 字体号

            if (nOutlineLevel >= 0 && nOutlineLevel < 9)
            {
                strHeading = "标题" + (nOutlineLevel + 1) + "级";
            }
            else if (nOutlineLevel == 9)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            richTxt.AppendText(strHeading + "\r\n"); // 信息附加


            String strBoldItalic = "";
            // 字体转换
            if (hsItem.m_fnt.Bold != 0 || hsItem.m_fnt.Italic != 0)
            {
                strBoldItalic = "[";
                if (hsItem.m_fnt.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }

                if (hsItem.m_fnt.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }

//             if (strFntNum.Equals(fFntSize.ToString()))
//             {
//                 // strFmtInfo = strHeading + ":[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]\r\n";
//                 strFmtInfo = "[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
//             }
//             else
//            {
                // strFmtInfo = "[" + strHeading + "][" + strFntName + strFntNum + fFntSize + "][" + strAlignment + "]\r\n";
                strFmtInfo = "[" + strFntName + strFntNum + fFntSize + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
//            }

            // 
            fntStyle = FontStyle.Regular;

            // fnt = new Font("宋体", 10.5f, fntStyle);
            fnt = new Font("宋体", 7.5f, fntStyle);

            richTxt.SelectionFont = fnt;
            richTxt.SelectionColor = Color.Black;
            richTxt.SelectionAlignment = HorizontalAlignment.Left;

            richTxt.AppendText(strFmtInfo);

            return;
        }

        private void previewHeadingStyleItem(RichTextBox richTxt, ClassHeadingStyle hsItem, int nOutlineLevel)
        {
            Word.Application app = m_addin.Application;

            Font fnt = null;

            ClassFont hsFnt = null;
            Word.Font wFnt = null;
            FontStyle fntStyle = FontStyle.Regular;
            float fFntSize = 0.0f;
            String strFntName = "";
            String strHeading = "", strSpace = "";


            // get sys styles font infomration.
            if (nOutlineLevel >= 0 && nOutlineLevel < 9)
            {
                strHeading = "标题 " + (nOutlineLevel + 1);
            }
            else if (nOutlineLevel == 9)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            Word.Style styleHeading = null;
            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            if (hsItem.m_fnt.Name.Equals(""))
            {
                try
                {
                    styleHeading = curDoc.Styles[strHeading];
                }
                catch (System.Exception ex)
                {
                    return;
                }
                finally
                {
                }

                if (styleHeading == null)
                {
                    MessageBox.Show("无缺省标题样式：" + strHeading);
                    return;
                }

                wFnt = styleHeading.Font;

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;
            }
            else
            {
                hsFnt = hsItem.m_fnt;

                strFntName = hsFnt.Name;
                fFntSize = hsFnt.Size;
            }


            // 对齐转换
            String strAlignment = "居左";

            HorizontalAlignment lineAlignMent = HorizontalAlignment.Left;
            
            switch (hsItem.m_paraFmt.Alignment)
            {
                case Word.WdParagraphAlignment.wdAlignParagraphLeft:
                    lineAlignMent = HorizontalAlignment.Left;
                    strAlignment = "居左";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphRight:
                    lineAlignMent = HorizontalAlignment.Right;
                    strAlignment = "居右";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphCenter:
                    lineAlignMent = HorizontalAlignment.Center;
                    strAlignment = "居中";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphJustify:
                    strAlignment = "两端对齐";
                    break;

                case Word.WdParagraphAlignment.wdAlignParagraphDistribute:
                    strAlignment = "分散对齐";
                    break;

                default:
                    strAlignment = "两端对齐";
                    break;
            }

            String strSpaceRule = "";

            switch (hsItem.m_paraFmt.LineSpacingRule)
            {
                case Word.WdLineSpacing.wdLineSpace1pt5:
                    strSpaceRule = "1.5倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceAtLeast:
                    strSpaceRule = "最小值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceDouble:
                    strSpaceRule = "2倍行距";
                    break;

                case Word.WdLineSpacing.wdLineSpaceExactly:
                    strSpaceRule = "固定值行距：" + (int)hsItem.m_paraFmt.LineSpacing + "磅";
                    break;

                case Word.WdLineSpacing.wdLineSpaceMultiple:
                    strSpaceRule = "多倍行距：" + (int)app.PointsToLines(hsItem.m_paraFmt.LineSpacing) + "倍";
                    break;

                case Word.WdLineSpacing.wdLineSpaceSingle:
                    strSpaceRule = "单倍行距";
                    break;

                default:
                    break;
            }

            String strIndent = "缩进：";

            strIndent += "左：" + app.PointsToCentimeters(hsItem.m_paraFmt.LeftIndent).ToString("0.##") + "厘米，" +
                         "右：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";

            if (hsItem.m_paraFmt.RightIndent > 0.0f)
            {
                strIndent += ",首行：" + app.PointsToCentimeters(hsItem.m_paraFmt.RightIndent).ToString("0.##") + "厘米";
            }

            if (hsItem.m_paraFmt.CharacterUnitLeftIndent != 0.0f)
            {
                strIndent += "(左：" + (int)hsItem.m_paraFmt.CharacterUnitLeftIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitRightIndent != 0.0f)
            {
                strIndent += "(右：" + (int)hsItem.m_paraFmt.CharacterUnitRightIndent + "字符)";
            }
            else if (hsItem.m_paraFmt.CharacterUnitFirstLineIndent != 0.0f)
            {
                strIndent += "(首行：" + (int)hsItem.m_paraFmt.CharacterUnitFirstLineIndent + "字符)";
            }

            String strFmtInfo = "";

            String strFntNum = m_addin.GetWordFontNumber(fFntSize); // 字体号

            if (nOutlineLevel >= 0 && nOutlineLevel < 9)
            {
                strHeading = "标题" + (nOutlineLevel + 1) + "级";
            }
            else if (nOutlineLevel == 9)
            {
                strHeading = "正文";
            }
            else
            {
                return;
            }

            String strBoldItalic = "";
            // 字体转换
            if (hsItem.m_fnt.Bold != 0 || hsItem.m_fnt.Italic != 0)
            {
                strBoldItalic = "[";
                if (hsItem.m_fnt.Bold != 0)
                {
                    strBoldItalic += "加粗";
                }

                if (hsItem.m_fnt.Italic != 0)
                {
                    strBoldItalic += "斜体";
                }

                strBoldItalic += "]";
            }

            //             if (strFntNum.Equals(fFntSize.ToString()))
            //             {
            //                 // strFmtInfo = strHeading + ":[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]\r\n";
            //                 strFmtInfo = "[" + strFntName + strFntNum + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
            //             }
            //             else
            //            {
            // strFmtInfo = "[" + strHeading + "][" + strFntName + strFntNum + fFntSize + "][" + strAlignment + "]\r\n";
            strFmtInfo = " [" + strFntName + strFntNum + fFntSize + "]" + strBoldItalic + "[" + strAlignment + "]" + "[" + strSpaceRule + "]" + "[" + strIndent + "]\r\n";
            //            }

            int nStart = richTxt.Text.Length;

            // 
            richTxt.AppendText(strHeading + strFmtInfo);

            richTxt.Select(nStart, strHeading.Length);
            richTxt.SelectionAlignment = lineAlignMent;

            // wFnt = styleHeading.Font;
            fntStyle = FontStyle.Regular;
            // 字体转换
            if (hsItem.m_fnt.Name.Equals(""))
            {
                if (wFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (wFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (wFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (wFnt.StrikeThrough != 0 || wFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (wFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (wFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = wFnt.Name;
                fFntSize = wFnt.Size;

                if (wFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, FontStyle.Italic);
                }
                else
                {
                    fnt = new Font(wFnt.Name, wFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (wFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)wFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }

            }
            else
            {
                hsFnt = hsItem.m_fnt;
                // 字体转换
                if (hsFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold;
                }

                if (hsFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline;
                }

                if (hsFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic;
                }

                if (hsFnt.StrikeThrough != 0 || hsFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout;
                }

                if (hsFnt.Superscript != 0)
                {
                    richTxt.SelectionCharOffset = 1000;
                }
                else if (hsFnt.Subscript != 0)
                {
                    richTxt.SelectionCharOffset = -1000;
                }
                else
                {
                    richTxt.SelectionCharOffset = 0;
                }

                strFntName = hsFnt.Name;
                fFntSize = hsFnt.Size;

                if (hsFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(hsFnt.Name, hsFnt.Size, FontStyle.Italic);
                }
                else
                {
                    if (String.IsNullOrWhiteSpace(hsFnt.Name)) // 设置样式
                    {
                        fnt = new Font("宋体", 10.5f, fntStyle);
                    }
                    else
                    {
                        fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                    }

                    // fnt = new Font(hsFnt.Name, hsFnt.Size, fntStyle);
                }

                richTxt.SelectionFont = fnt;
                // 颜色转换
                richTxt.SelectionColor = Color.Black;
                if (hsFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)hsFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    richTxt.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue);
                }
            }

            richTxt.Select(nStart + strHeading.Length, strFmtInfo.Length);
            
            fntStyle = FontStyle.Regular;

            // fnt = new Font("宋体", 10.5f, fntStyle);
            fnt = new Font("宋体", 8.0f, fntStyle);

            richTxt.SelectionFont = fnt;
            richTxt.SelectionColor = Color.Black;
            richTxt.SelectionCharOffset = 0;
            // richTxt.SelectionAlignment = HorizontalAlignment.Left;

            int nEnd = richTxt.Text.Length - 1;
            richTxt.Select(nEnd, 0);

            return;
        }

        private void trvHeadingStyleScheme_AfterSelect(object sender, TreeViewEventArgs e)
        {
            TreeNode selNode = trvHeadingStyleScheme.SelectedNode;

            if (selNode == null)
            {
                return;
            }

            if (selNode.Level == 0)
            {
                return;
            }

            String strSchemeName = "";
            int nOutlineLevel = m_nCurHStyleSelLevelIndex + 1;

            if (selNode.Level == 2) // 若是2级level节点
            {
                nOutlineLevel = selNode.ImageIndex;
                selNode = selNode.Parent;
            }

            strSchemeName = selNode.Text;

            ClassHeadingStyle[] hs = null;
            // 预置
            if (selNode.Parent == m_trndHeadingStylePreBuiltIn)
            {
                hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStylePreBuiltInScheme[strSchemeName];
            }
            else if (selNode.Parent == m_trndHeadingStyleUserDefine)
            {
                hs = (ClassHeadingStyle[])m_addin.m_hashHeadingStyleUserDefineScheme[strSchemeName]; // 用户自定义
            }
            else
            {
                return;
            }

            if (hs == null)
                return;

            for (int i = 0; i < 10; i++) // 遍历
            {
                m_curHeadingStyles[i].m_fnt.clone(hs[i].m_fnt); // 复制
                m_curHeadingStyles[i].m_paraFmt.clone(hs[i].m_paraFmt); // 复制
            }

            if (nOutlineLevel >= 1 && nOutlineLevel <= 10)
            {
                m_nCurHStyleSelLevelIndex = nOutlineLevel - 1;
                lstOutlineLevel.SelectedIndex = m_nCurHStyleSelLevelIndex;
            }
            else
            {
                
            }

            txtHeadingStyleSchemeName.Text = strSchemeName;
            // 更新预览
            richHeadingStylePreview.Text = "";
            previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);

            return;
        }


        private void btnHeadingStyleSchemeApply_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = curDoc.ActiveWindow.Selection;
            Word.Range scopeRange = null;
            Word.Paragraphs paras = null;

            FormApplyScope frmApplyScope = new FormApplyScope(); // 范围对话框

            frmApplyScope.m_bScopeAllDoc = m_bScopeAllDoc;
            frmApplyScope.m_bIgnoreToc = m_bIgnoreToc;
            frmApplyScope.m_bIgnoreTable = m_bIgnoreTable;
            frmApplyScope.m_bIgnorePages = m_bIgnorePages;
            frmApplyScope.m_nIgnoredPages = m_nIgnoredPages;
            frmApplyScope.m_bIgnoreHeadings = m_bIgnoreHeadings;
            frmApplyScope.m_bIgnoreTextBody = m_bIgnoreTextBody;
            frmApplyScope.m_bIgnoreFont = m_bIgnoreFont;
            frmApplyScope.m_bIgnoreParaFmt = m_bIgnoreParaFmt;

            DialogResult res = frmApplyScope.ShowDialog(); // 显示对话框

            if (res == DialogResult.Cancel)
            {
                return;
            }

            m_bScopeAllDoc = frmApplyScope.m_bScopeAllDoc;
            m_bIgnoreToc = frmApplyScope.m_bIgnoreToc;
            m_bIgnoreTable = frmApplyScope.m_bIgnoreTable;
            m_bIgnorePages = frmApplyScope.m_bIgnorePages;
            m_nIgnoredPages = frmApplyScope.m_nIgnoredPages;
            m_bIgnoreHeadings = frmApplyScope.m_bIgnoreHeadings;
            m_bIgnoreTextBody = frmApplyScope.m_bIgnoreTextBody;
            m_bIgnoreFont = frmApplyScope.m_bIgnoreFont;
            m_bIgnoreParaFmt = frmApplyScope.m_bIgnoreParaFmt;


            //             if (MessageBox.Show("确认应用样式？建议先备份", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
            //             {
            //                 return;
            //             }


            if (m_bScopeAllDoc)
            {
                paras = curDoc.Paragraphs;
                scopeRange = null;
            }
            else
            {
                paras = sel.Paragraphs;
                scopeRange = sel.Range;
            }

            if (paras.Count == 0 || (m_bIgnoreHeadings && m_bIgnoreTextBody) ||
                (m_bIgnoreFont && m_bIgnoreParaFmt))
            {
                return;
            }


            //             int nOStart = sel.Start;
            //             int nOEnd = sel.End;
            // 
            //             Word.WdViewType oViewType = curDoc.ActiveWindow.View.Type;
            // 
            // 
            //             curDoc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;


            // 初始化进度条
            prgbarHeadingStyleSchemeApply.Top = txtHeadingStyleSchemeName.Top;
            prgbarHeadingStyleSchemeApply.Left = txtHeadingStyleSchemeName.Left;
            prgbarHeadingStyleSchemeApply.Height = txtHeadingStyleSchemeName.Height;
            prgbarHeadingStyleSchemeApply.Width = txtHeadingStyleSchemeName.Width;

            prgbarHeadingStyleSchemeApply.Visible = true;

            prgbarHeadingStyleSchemeApply.Minimum = 0;
            prgbarHeadingStyleSchemeApply.Maximum = paras.Count;
            prgbarHeadingStyleSchemeApply.Value = 0;


            btnHeadingStyleExitApply.Left = btnHeadingStyleSchemeExtract.Left;
            btnHeadingStyleExitApply.Top = btnHeadingStyleSchemeExtract.Top;
            // btnHeadingStyleExitApply.Width = ;
            // btnHeadingStyleExitApply.Height = ;

            m_bExitHeadingStyleApply = false;

            btnHeadingStyleSchemeExtract.Visible = false;
            btnHeadingStyleSchemeApply.Visible = false;
            btnHeadingStyleExitApply.Visible = true;


            String strRetMsg = "";
            ArrayList arrClassFont = new ArrayList();
            ArrayList arrParaFmt = new ArrayList();

            for (int i = 0; i < m_curHeadingStyles.GetLength(0); i++)
            {
                arrClassFont.Add(m_curHeadingStyles[i].m_fnt);
                arrParaFmt.Add(m_curHeadingStyles[i].m_paraFmt);
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("设置章节样式");
            }

            int nRet = m_addin.m_commTools.changeTargetParasStyle(app, curDoc, ref strRetMsg, arrClassFont, arrParaFmt, m_bIgnoreToc, m_bIgnoreTable, m_bIgnorePages, m_nIgnoredPages,
                                          m_bIgnoreHeadings, m_bIgnoreTextBody, m_bIgnoreFont, m_bIgnoreParaFmt, scopeRange, null, null, prgbarHeadingStyleSchemeApply);

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            // 进度条消失
            prgbarHeadingStyleSchemeApply.Visible = false;

            btnHeadingStyleSchemeExtract.Visible = true;
            btnHeadingStyleSchemeApply.Visible = true;
            btnHeadingStyleExitApply.Visible = false;

            m_bExitHeadingStyleApply = false;


            if (nRet != 0)
            {
                MessageBox.Show(strRetMsg, "异常信息");
            }
            else
            {
                MessageBox.Show("完成\r\n" + strRetMsg,"成功");
            }

            return;
        }

        private void btnHeadingStyleSchemeLink2Headings_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确定将当前章节样式方案更新到样式库中的标题样式？\r\n\r\n" +
                                                "例如：1级的章节样式将更新到\"标题 1\"样式，依次类推。正文样式将更新到\"正文\"样式，\r\n" +
                                                "请注意：章节序号可能改变章节段落的样式！", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No || m_curHeadingStyles == null)
                return;

            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            
            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("用当前章节样式更新样式库");
            }

            Word.Style styleHeading = null;
            String strHeading = "";

            for (int i = 1; i <= 9; i++)
            {
                strHeading = "标题 " + i;

                try
                {
                    styleHeading = doc.Styles[strHeading];
                    // styleHeading.LinkToListTemplate(lstTemplate);

                    if (styleHeading != null)
                    {
                        if (m_curHeadingStyles[i - 1].m_fnt != null)
                        {
                            m_curHeadingStyles[i - 1].m_fnt.copy2(styleHeading.Font);
                        }

                        if (m_curHeadingStyles[i - 1].m_paraFmt != null)
                        {
                            m_curHeadingStyles[i - 1].m_paraFmt.copy2(styleHeading.ParagraphFormat);
                        }
                    }

                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("没有内置样式名：'" + "标题 " + i + "'的样式\r\n" + ex.Message);
                }
                finally
                {
                }
            }

            res = MessageBox.Show("即将更新样式库中\"正文\"样式，是否确认更新？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                strHeading = "正文";

                try
                {
                    styleHeading = doc.Styles[strHeading];
                    if (styleHeading != null)
                    {
                        if (m_curHeadingStyles[9].m_fnt != null)
                        {
                            m_curHeadingStyles[9].m_fnt.copy2(styleHeading.Font);
                        }

                        if (m_curHeadingStyles[9].m_paraFmt != null)
                        {
                            m_curHeadingStyles[9].m_paraFmt.copy2(styleHeading.ParagraphFormat);
                        }
                    }

                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("没有内置样式名：'" + "正文" + "'的样式\r\n" + ex.Message);
                }
                finally
                {
                }
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            MessageBox.Show("完成！请在样式库中查看结果");

            return;
        }


        private void btnHeadingStyleSchemeResetDefaultHeadings_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确认将当前活动样式方案重置到缺省样式？", "注意", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            for (int i = 0; i < 9; i++)
            {
                m_curHeadingStyles[i].m_fnt.clone(m_defaultHeadingStyles[i].m_fnt); // 各级clone
                m_curHeadingStyles[i].m_paraFmt.clone(m_defaultHeadingStyles[i].m_paraFmt); // 各级clone
            }

            txtHeadingStyleSchemeName.Text = "";

            richHeadingStylePreview.Text = "";
            // 预览章节样式项
            previewHeadingStyleItem(richHeadingStylePreview, m_curHeadingStyles[m_nCurHStyleSelLevelIndex], m_nCurHStyleSelLevelIndex);

            return;
        }


        private void btnHeadingStyleSchemeApply_Click_v2(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;
            Word.Range scopeRange = null;
            Word.Paragraphs paras = null;

            FormApplyScope frmApplyScope = new FormApplyScope(); // 范围对话框

            frmApplyScope.m_bScopeAllDoc = m_bScopeAllDoc;
            frmApplyScope.m_bIgnoreToc = m_bIgnoreToc;
            frmApplyScope.m_bIgnoreTable = m_bIgnoreTable;
            frmApplyScope.m_bIgnorePages = m_bIgnorePages;
            frmApplyScope.m_nIgnoredPages = m_nIgnoredPages;
            frmApplyScope.m_bIgnoreHeadings = m_bIgnoreHeadings;
            frmApplyScope.m_bIgnoreTextBody = m_bIgnoreTextBody;
            frmApplyScope.m_bIgnoreFont = m_bIgnoreFont;
            frmApplyScope.m_bIgnoreParaFmt = m_bIgnoreParaFmt;

            DialogResult res = frmApplyScope.ShowDialog(); // 显示对话框

            if (res == DialogResult.Cancel)
            {
                return;
            }

            m_bScopeAllDoc = frmApplyScope.m_bScopeAllDoc;
            m_bIgnoreToc = frmApplyScope.m_bIgnoreToc;
            m_bIgnoreTable = frmApplyScope.m_bIgnoreTable;
            m_bIgnorePages = frmApplyScope.m_bIgnorePages;
            m_nIgnoredPages = frmApplyScope.m_nIgnoredPages;
            m_bIgnoreHeadings = frmApplyScope.m_bIgnoreHeadings;
            m_bIgnoreTextBody = frmApplyScope.m_bIgnoreTextBody;
            m_bIgnoreFont = frmApplyScope.m_bIgnoreFont;
            m_bIgnoreParaFmt = frmApplyScope.m_bIgnoreParaFmt;


            //             if (MessageBox.Show("确认应用样式？建议先备份", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
            //             {
            //                 return;
            //             }


            if (m_bScopeAllDoc)
            {
                paras = curDoc.Paragraphs;
                scopeRange = null;
            }
            else
            {
                paras = sel.Paragraphs;
                scopeRange = sel.Range;
            }

            if (paras.Count == 0 || (m_bIgnoreHeadings && m_bIgnoreTextBody) ||
                (m_bIgnoreFont && m_bIgnoreParaFmt))
            {
                return;
            }


//             int nOStart = sel.Start;
//             int nOEnd = sel.End;
// 
//             Word.WdViewType oViewType = curDoc.ActiveWindow.View.Type;
// 
// 
//             curDoc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;


            // 初始化进度条
            prgbarHeadingStyleSchemeApply.Top = txtHeadingStyleSchemeName.Top;
            prgbarHeadingStyleSchemeApply.Left = txtHeadingStyleSchemeName.Left;
            prgbarHeadingStyleSchemeApply.Height = txtHeadingStyleSchemeName.Height;
            prgbarHeadingStyleSchemeApply.Width = txtHeadingStyleSchemeName.Width;

            prgbarHeadingStyleSchemeApply.Visible = true;

            prgbarHeadingStyleSchemeApply.Minimum = 0;
            prgbarHeadingStyleSchemeApply.Maximum = paras.Count;
            prgbarHeadingStyleSchemeApply.Value = 0;


            btnHeadingStyleExitApply.Left = btnHeadingStyleSchemeExtract.Left;
            btnHeadingStyleExitApply.Top = btnHeadingStyleSchemeExtract.Top;
            // btnHeadingStyleExitApply.Width = ;
            // btnHeadingStyleExitApply.Height = ;

            m_bExitHeadingStyleApply = false;

            btnHeadingStyleSchemeExtract.Visible = false;
            btnHeadingStyleSchemeApply.Visible = false;
            btnHeadingStyleExitApply.Visible = true;


            String strRetMsg = "";
            ArrayList arrClassFont = new ArrayList();
            ArrayList arrParaFmt = new ArrayList();

            for(int i = 0; i < m_curHeadingStyles.GetLength(0); i++)
            {
                arrClassFont.Add(m_curHeadingStyles[i].m_fnt);
                arrParaFmt.Add(m_curHeadingStyles[i].m_paraFmt);
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("设置章节样式");
            }

            int nRet = m_addin.m_commTools.changeTargetParasStyle(app, curDoc, ref strRetMsg, arrClassFont, arrParaFmt, m_bIgnoreToc, m_bIgnoreTable, m_bIgnorePages, m_nIgnoredPages,
                                          m_bIgnoreHeadings,m_bIgnoreTextBody,m_bIgnoreFont,m_bIgnoreParaFmt,scopeRange,null,null,prgbarHeadingStyleSchemeApply);

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }

            // 进度条消失
            prgbarHeadingStyleSchemeApply.Visible = false;

            btnHeadingStyleSchemeExtract.Visible = true;
            btnHeadingStyleSchemeApply.Visible = true;
            btnHeadingStyleExitApply.Visible = false;

            m_bExitHeadingStyleApply = false;


            if (nRet != 0)
            {
                MessageBox.Show(strRetMsg, "异常信息");
            }
            else
            {
                MessageBox.Show("完成");
            }

            return;
        }

        private void btnHeadingStyleSchemeApply_Click_v1(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            Word.Paragraphs paras = null;

            FormApplyScope frmApplyScope = new FormApplyScope(); // 范围对话框

            frmApplyScope.m_bScopeAllDoc = m_bScopeAllDoc;
            frmApplyScope.m_bIgnoreToc = m_bIgnoreToc;
            frmApplyScope.m_bIgnoreTable = m_bIgnoreTable;
            frmApplyScope.m_bIgnorePages = m_bIgnorePages;
            frmApplyScope.m_nIgnoredPages = m_nIgnoredPages;
            frmApplyScope.m_bIgnoreHeadings = m_bIgnoreHeadings;
            frmApplyScope.m_bIgnoreTextBody = m_bIgnoreTextBody;
            frmApplyScope.m_bIgnoreFont = m_bIgnoreFont;
            frmApplyScope.m_bIgnoreParaFmt = m_bIgnoreParaFmt;

            DialogResult res = frmApplyScope.ShowDialog(); // 显示对话框

            if (res == DialogResult.Cancel)
            {
                return;
            }

            m_bScopeAllDoc = frmApplyScope.m_bScopeAllDoc;
            m_bIgnoreToc = frmApplyScope.m_bIgnoreToc;
            m_bIgnoreTable = frmApplyScope.m_bIgnoreTable;
            m_bIgnorePages = frmApplyScope.m_bIgnorePages;
            m_nIgnoredPages = frmApplyScope.m_nIgnoredPages;
            m_bIgnoreHeadings = frmApplyScope.m_bIgnoreHeadings;
            m_bIgnoreTextBody = frmApplyScope.m_bIgnoreTextBody;
            m_bIgnoreFont = frmApplyScope.m_bIgnoreFont;
            m_bIgnoreParaFmt = frmApplyScope.m_bIgnoreParaFmt;


//             if (MessageBox.Show("确认应用样式？建议先备份", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
//             {
//                 return;
//             }


            if (m_bScopeAllDoc)
            {
                paras = curDoc.Paragraphs;
            }
            else
            {
                paras = sel.Paragraphs;
            }

            if (paras.Count == 0 || (m_bIgnoreHeadings && m_bIgnoreTextBody) ||
                (m_bIgnoreFont && m_bIgnoreParaFmt))
            {
                return;
            }


            int nOStart = sel.Start;
            int nOEnd = sel.End;

            // 切换view
            if (curDoc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                curDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                curDoc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }


            // 初始化进度条
            prgbarHeadingStyleSchemeApply.Top = txtHeadingStyleSchemeName.Top;
            prgbarHeadingStyleSchemeApply.Left = txtHeadingStyleSchemeName.Left;
            prgbarHeadingStyleSchemeApply.Height = txtHeadingStyleSchemeName.Height;
            prgbarHeadingStyleSchemeApply.Width = txtHeadingStyleSchemeName.Width;

            prgbarHeadingStyleSchemeApply.Visible = true;

            prgbarHeadingStyleSchemeApply.Minimum = 0;
            prgbarHeadingStyleSchemeApply.Maximum = paras.Count;
            prgbarHeadingStyleSchemeApply.Value = 0;


            btnHeadingStyleExitApply.Left = btnHeadingStyleSchemeExtract.Left;
            btnHeadingStyleExitApply.Top = btnHeadingStyleSchemeExtract.Top;
            // btnHeadingStyleExitApply.Width = ;
            // btnHeadingStyleExitApply.Height = ;

            m_bExitHeadingStyleApply = false;

            btnHeadingStyleSchemeExtract.Visible = false;
            btnHeadingStyleSchemeApply.Visible = false;
            btnHeadingStyleExitApply.Visible = true;


            // apply
            Boolean bPastIgnorePages = false;
            int nOutlineLevel = 0;
            foreach (Word.Paragraph dstPara in paras)
            {
                if (m_bExitHeadingStyleApply)
                    break;

                prgbarHeadingStyleSchemeApply.Value++;

                if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                    dstPara.Range.Text.Trim().Length == 0)
                {
                    continue;
                }

                // 忽略TOC
                if (m_bIgnoreToc)
                {
                    Boolean bIsInToc = false;
                    foreach (Word.TableOfContents tocs in curDoc.TablesOfContents)
                    {
                        if (dstPara.Range.InRange(tocs.Range))
                        {
                            bIsInToc = true;
                            break;
                        }
                    }

                    if (bIsInToc)
                    {
                        continue;
                    }
                }
                // 忽略表格
                if (m_bIgnoreTable)
                {
                    Boolean bIsInTable = dstPara.Range.get_Information(Word.WdInformation.wdWithInTable);
                    if (bIsInTable)
                    {
                        continue;
                    }
                }
                // 忽略页数
                if (!bPastIgnorePages && m_bIgnorePages && m_nIgnoredPages > 0)
                {
                    int nCurPage = dstPara.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);

                    if (nCurPage <= m_nIgnoredPages)
                    {
                        continue;
                    }
                    else
                    {
                        bPastIgnorePages = true;
                    }
                }
                // 忽略章节
                if (m_bIgnoreHeadings)
                {
                    if (dstPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        continue;
                    }
                }
                // 忽略文本
                if (m_bIgnoreTextBody)
                {
                    if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        continue;
                    }
                }

                nOutlineLevel = (int)dstPara.OutlineLevel - 1;

                m_curDoc.ActiveWindow.ScrollIntoView(dstPara.Range); // 视角跟随

                if (!m_curHeadingStyles[nOutlineLevel].m_fnt.Name.Equals(""))
                {
                    if (!m_bIgnoreFont)
                    {
                        m_curHeadingStyles[nOutlineLevel].m_fnt.copy2(dstPara.Range.Font); // 复制
                    }
                }

                if (!m_bIgnoreParaFmt)
                {
                    m_curHeadingStyles[nOutlineLevel].m_paraFmt.copy2(dstPara.Range.ParagraphFormat); // 复制
                }
                // 
            }
            // 进度条消失
            prgbarHeadingStyleSchemeApply.Visible = false;

            btnHeadingStyleSchemeExtract.Visible = true;
            btnHeadingStyleSchemeApply.Visible = true;
            btnHeadingStyleExitApply.Visible = false;

            m_bExitHeadingStyleApply = false;

            // 恢复view
            if (curDoc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                curDoc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView;
            }
            else
            {
                curDoc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            }


            sel.Start = nOStart; // 恢复原位置
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo();
            m_curDoc.ActiveWindow.ScrollIntoView(sel.Range); // 视角恢复

            return;
        }


        private void trvHeadingStyleScheme_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            btnHeadingStyleSchemeApply_Click(null,null); // 应用章节样式

            return;
        }

        private void btnHeadingStyleApplyScope_Click(object sender, EventArgs e)
        {
            FormApplyScope frmApplyScope = new FormApplyScope(); // 应用范围对话框

            frmApplyScope.m_bScopeAllDoc 	= m_bScopeAllDoc; // 初始化
            frmApplyScope.m_bIgnoreToc 	= m_bIgnoreToc;
            frmApplyScope.m_bIgnoreTable 	= m_bIgnoreTable;
            frmApplyScope.m_bIgnorePages 	= m_bIgnorePages;
            frmApplyScope.m_nIgnoredPages = m_nIgnoredPages;
            frmApplyScope.m_bIgnoreHeadings = m_bIgnoreHeadings;
            frmApplyScope.m_bIgnoreTextBody = m_bIgnoreTextBody;
            frmApplyScope.m_bIgnoreFont 	  = m_bIgnoreFont;
            frmApplyScope.m_bIgnoreParaFmt  = m_bIgnoreParaFmt;

            DialogResult res = frmApplyScope.ShowDialog(); // 显示

            if (res == DialogResult.Cancel)
            {
                return;
            }

            m_bScopeAllDoc 	= frmApplyScope.m_bScopeAllDoc; // 获值
            m_bIgnoreToc 	= frmApplyScope.m_bIgnoreToc;
            m_bIgnoreTable 	= frmApplyScope.m_bIgnoreTable;
            m_bIgnorePages 	= frmApplyScope.m_bIgnorePages;
            m_nIgnoredPages = frmApplyScope.m_nIgnoredPages;
            m_bIgnoreHeadings = frmApplyScope.m_bIgnoreHeadings;
            m_bIgnoreTextBody = frmApplyScope.m_bIgnoreTextBody;
            m_bIgnoreFont 	  = frmApplyScope.m_bIgnoreFont;
            m_bIgnoreParaFmt = frmApplyScope.m_bIgnoreParaFmt;

            return;
        }

        private void btnHeadingStyleExitApply_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确定退出？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                m_bExitHeadingStyleApply = true;
            }

            return;
        }

        private void btnUnitFormExitApply_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确定退出？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                m_bExitUnitFormApply = true;
            }

            return;
        }

        private void btnExitHeadingSnApply_Click(object sender, EventArgs e)
        {
            DialogResult res = MessageBox.Show("确定退出？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                m_bExitHeadingSnApply = true;
            }

            return;
        }

        private void btnHeadingStyleApplyCurSel_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            Word.Paragraphs paras = null;

            paras = sel.Paragraphs;

            if (!(m_nCurHStyleSelLevelIndex >= 0 && m_nCurHStyleSelLevelIndex < 10) || paras.Count == 0)
            {
                MessageBox.Show("请选中一个级别样式，并且选中文档的至少一个段落");
                return;
            }

            if (MessageBox.Show("确认将当前选择样式应用到选中段落？", "注意", MessageBoxButtons.YesNo) == DialogResult.No)
            {
                return;
            }

            int nOStart = sel.Start; // 原值记忆
            int nOEnd = sel.End;
            // 进度条准备
            prgbarHeadingStyleSchemeApply.Top = txtHeadingStyleSchemeName.Top;
            prgbarHeadingStyleSchemeApply.Left = txtHeadingStyleSchemeName.Left;
            prgbarHeadingStyleSchemeApply.Height = txtHeadingStyleSchemeName.Height;
            prgbarHeadingStyleSchemeApply.Width = txtHeadingStyleSchemeName.Width;

            prgbarHeadingStyleSchemeApply.Visible = true;

            prgbarHeadingStyleSchemeApply.Minimum = 0;
            prgbarHeadingStyleSchemeApply.Maximum = paras.Count;
            prgbarHeadingStyleSchemeApply.Value = 0;


            btnHeadingStyleExitApply.Left = btnHeadingStyleSchemeExtract.Left;
            btnHeadingStyleExitApply.Top = btnHeadingStyleSchemeExtract.Top;
            // btnHeadingStyleExitApply.Width = ;
            // btnHeadingStyleExitApply.Height = ;

            m_bExitHeadingStyleApply = false;

            btnHeadingStyleSchemeExtract.Visible = false;
            btnHeadingStyleSchemeApply.Visible = false;
            btnHeadingStyleExitApply.Visible = true;


            // 应用apply
            int nOutlineLevel = 0;
            foreach (Word.Paragraph dstPara in paras)
            {
                if (m_bExitHeadingStyleApply)
                    break;

                prgbarHeadingStyleSchemeApply.Value++;

                if (dstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                    dstPara.Range.Text.Trim().Length == 0)
                {
                    continue;
                }

                nOutlineLevel = m_nCurHStyleSelLevelIndex;

                m_curDoc.ActiveWindow.ScrollIntoView(dstPara.Range); // 视角跟随

                if (!m_curHeadingStyles[nOutlineLevel].m_fnt.Name.Equals(""))
                {
                    m_curHeadingStyles[nOutlineLevel].m_fnt.copy2(dstPara.Range.Font); // 复制字体
                }

                m_curHeadingStyles[nOutlineLevel].m_paraFmt.copy2(dstPara.Range.ParagraphFormat); // 复制字体
            }
            // 进度条消失
            prgbarHeadingStyleSchemeApply.Visible = false;

            btnHeadingStyleSchemeExtract.Visible = true;
            btnHeadingStyleSchemeApply.Visible = true;
            btnHeadingStyleExitApply.Visible = false;

            m_bExitHeadingStyleApply = false;


            sel.Start = nOStart; // 恢复原位置
            sel.End = nOEnd;
            // sel.Range.Select();
            sel.Range.GoTo();
            m_curDoc.ActiveWindow.ScrollIntoView(sel.Range); // 视角恢复

            MessageBox.Show("完成");

            return;
        }

        private void btnHeadingSnFontExtract_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                MessageBox.Show("请打开某文档");
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (!(m_nCurSelLevelIndex >= 0 && m_nCurSelLevelIndex < 9) || (sel.Range.End - sel.Range.Start <= 1))
            {
                MessageBox.Show(@"请选中一个级别并且在文档中选中要提取的字体","注意");
                return;
            }

            m_curListLevels[m_nCurSelLevelIndex].Font.clone(sel.Range.Font);

            headingSnPreview(); // 更新预览

            return;
        }

        private void btnHeadingSnSetDefaultFont_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;

            if (app.Documents.Count == 0)
            {
                MessageBox.Show("请打开某文档");
                return;
            }

            // Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (!(m_nCurSelLevelIndex >= 0 && m_nCurSelLevelIndex < 9))
            {
                MessageBox.Show("请选中一个级别并且在文档中选中要提取的字体", "注意");
                return;
            }

            m_curListLevels[m_nCurSelLevelIndex].Font.setDefault();

            headingSnPreview(); // 更新预览

            return;
        }


        public void refreshShareLibTree(TreeNodeCollection trndSrcTree)
        {
            tvShareLib.Nodes.Clear();

            foreach(TreeNode nd in trndSrcTree)
            {
                tvShareLib.Nodes.Add((TreeNode)nd.Clone());
            }
            
            return;
        }

        private void btnShareLibUpdate_Click(object sender, EventArgs e)
        {
            UpdateOneShareItem(""); // 更新文库
            resetShareSearch(); // 重置

            return;
        }

        /// <summary>
        /// icon的index
        /// </summary>
        /// <param name="strFileName"></param>
        /// <returns></returns>
        private int iconIndex(String strFileName)
        {
            int nIndex = 17;

            String strExt = Path.GetExtension(strFileName); // 取扩展名

            if (strExt != null && !strExt.Equals(""))
            {
                strExt = strExt.ToUpper(); // 大写

                if (strExt.Equals(".DOC") || strExt.Equals(".DOCX")) // word
                {
                    nIndex = 0;
                }
                else if (strExt.Equals(".XLS") || strExt.Equals(".XLSX")) // excel
                {
                    nIndex = 14;
                }
                else if (strExt.Equals(".PPT") || strExt.Equals(".PPTX")) // ppt
                {
                    nIndex = 15;
                }
                else if (strExt.Equals(".PDF")) // pdf
                {
                    nIndex = 16;
                }

            }

            return nIndex;
        }

        // 列出驱动器
        private void ListDrivers(ref TreeNode myComputerRootNode)
        {
            DriveInfo[] drivers = DriveInfo.GetDrives();
            foreach (DriveInfo driver in drivers) // 遍历
            {
                TreeNode node = myComputerRootNode.Nodes.Add(driver.Name); // 加节点

                //判断驱动器类型，用不同图标显示
                switch (driver.DriveType)
                {
                    case DriveType.CDRom:   //光驱
                        {
                            node.ImageIndex = node.SelectedImageIndex = 18;
                            break;
                        }
                    default:    //默认，显示为磁盘图标
                        {
                            node.ImageIndex = node.SelectedImageIndex = 19;
                            break;
                        }
                }
            }

            foreach (TreeNode node in myComputerRootNode.Nodes) // 向下再找
            {
                NodeUpdate(node);
            }

            return;
        }


        private void NodeUpdate(TreeNode node)
        {
            try
            {
                node.Nodes.Clear(); // 旧节点清除

                if (node.Level == 0) // 当前节点是顶层
                {
                    ListDrivers(ref node); // 列驱动器
                    return;
                }
	
	            String strFullPath = node.FullPath.Replace("我的电脑\\", ""); 
	
	            DirectoryInfo dir = new DirectoryInfo(strFullPath);
	            DirectoryInfo[] dirs = dir.GetDirectories(); // 列目录
	            foreach (DirectoryInfo d in dirs)
	            {
                    if ((d.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden || 
                        (d.Attributes & FileAttributes.System) == FileAttributes.System)  // 不显示隐藏及系统目录
                    {
                        continue;
                    }

                    TreeNode newNd = new TreeNode(d.Name); // 新建节点
                    newNd.Name = newNd.Text;
                    newNd.ImageIndex = newNd.SelectedImageIndex = 13; // 赋值

                    node.Nodes.Add(newNd); // 添加
	            }
	
	            FileInfo[] files = dir.GetFiles(); // 列文件
	
	            foreach (FileInfo fileItem in files)
	            {
                    if ((fileItem.Attributes & FileAttributes.Hidden) == FileAttributes.Hidden ||
                        (fileItem.Attributes & FileAttributes.System) == FileAttributes.Hidden)  // 不显示隐藏及系统目录
                    {
                        continue;
                    }

                    TreeNode newNd = new TreeNode(fileItem.Name); // 新建节点
                    newNd.Name = newNd.Text;
                    newNd.ImageIndex = newNd.SelectedImageIndex = iconIndex(fileItem.Name); // 赋值

                    node.Nodes.Add(newNd);
	            }
            }
            catch (System.Exception ex)
            {
            	
            }
            finally
            {
            }

            return;
        }


        private void tvShareLib_BeforeExpand(object sender, TreeViewCancelEventArgs e)
        {
            if (e.Node.FullPath.StartsWith("我的电脑"))
            {
                NodeUpdate(e.Node); //更新当前结点
                foreach (TreeNode node in e.Node.Nodes) //更新所有子结点
                {
                    NodeUpdate(node);
                }
            }
            else if (e.Node.FullPath.StartsWith("公共库") || e.Node.FullPath.StartsWith("个人库"))
            {
                if (!m_addin.m_bLoginedStatus)
                {
                    MessageBox.Show("请先登录");
                    return;
                }

                ShareContributorOper.TypeNode ndTag = (ShareContributorOper.TypeNode)e.Node.Tag;

                if (ndTag == null)
                {
                    return;
                }

                String strObjId = ndTag.id;
                String strObjType = ndTag.type;

                TreeNode privLibNode = new TreeNode();
                TreeNode tmpNode = new TreeNode();

                TreeNode dataNode = m_scOper.getSubNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref m_addin.m_hashFilePermission); // 获取节点

                if (e.Node.FullPath.StartsWith("公共库"))
                {
                    if (dataNode != null)
                    {
                        e.Node.Nodes.Clear();

                        foreach (TreeNode newNd in dataNode.Nodes) // 遍历
                        {
                            ndTag = (ShareContributorOper.TypeNode)newNd.Tag;

                            if (ndTag.isLeaf != 1)
                            {
                                TreeNode tmp2Node = new TreeNode(DateTime.Now.Ticks.ToString());
                                tmp2Node.Name = tmp2Node.Text;
                                tmp2Node.Tag = ndTag;
                                newNd.Nodes.Add(tmp2Node);
                            }

                            /*
                            strObjId = ndTag.id;
                            strObjType = ndTag.type;

                            TreeNode childNode = m_scOper.getNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref tmpNode, ref m_addin.m_hashFilePermission); // 获取节点

                            if (childNode != null)
                            {
                                foreach (TreeNode childNd in childNode.Nodes)
                                {
                                    newNd.Nodes.Add(childNd);
                                }
                            }
                            */

                            e.Node.Nodes.Add(newNd); // 添加
                        }
                    }
                }
                else
                {
                    // 
                    e.Node.Nodes.Clear();

                    foreach (TreeNode newNd in dataNode.Nodes) // 遍历
                    {
                        ndTag = (ShareContributorOper.TypeNode)newNd.Tag;

                        if (ndTag.isLeaf != 1)
                        {
                            TreeNode tmp2Node = new TreeNode(DateTime.Now.Ticks.ToString());
                            tmp2Node.Name = tmp2Node.Text;
                            tmp2Node.Tag = ndTag;
                            newNd.Nodes.Add(tmp2Node);
                        }

                        /*
                        strObjId = ndTag.id;
                        strObjType = ndTag.type;

                        TreeNode trNd = new TreeNode();
                        TreeNode childNode = m_scOper.getNodes(m_addin.m_strLoginedUser, "", strObjId, strObjType, ref trNd, ref m_addin.m_hashFilePermission); // 获取节点

                        foreach (TreeNode childNd in trNd.Nodes)
                        {
                            newNd.Nodes.Add(childNd);
                        }
                        */

                        e.Node.Nodes.Add(newNd); // 添加
                    }
                }
            }
            else
            {
                
            }

            return;
        }


        private DataSet m_tbl2ExcelDataSet = new DataSet();
        private char[] m_trimChars = new char[] { ' ', '\t', '\r', '\n', '\a' };


        private class classW2XTagItem // 转换节点
        {
            public Word.Table curTargetTable = null; // 当前目标表
            public String strCurTblTopoKey = ""; // 当前表Topo Key
        }
        
        // private Word.Table m_curTargetTable = null;
        // private String m_strCurTblTopoKey = "";

        private Hashtable m_hashSelTargetTables = new Hashtable();
        private uint m_nTageIndex = 1;
        private ClassTableRangeComparer m_TblCmper = new ClassTableRangeComparer();

        private void btnAddColName_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            String strSelText = "";// sel.Range.Text.Trim(m_trimChars);


//             if (sel.End - sel.Start <= 1 || strSelText.Equals(""))
//             {
//                 MessageBox.Show("请选择文档中的表格列名区(非空内容)");
//                 return;
//             }

            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable); // 判断是否在表中

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在表格的列名区");
                return;
            }


            // 增加字段名称
            if (m_tbl2ExcelDataSet.Tables.Count == 0)
            {
                DataTable dt = new DataTable();

                m_tbl2ExcelDataSet.Tables.Add(dt);

            }


            // get position in table
            Word.Table curTable = null;

            curTable = sel.Tables[1]; // 取选中的表

            /*
            foreach (Word.Table tbl in doc.Tables)
            {
                if(sel.Range.InRange(tbl.Range))
                {
                    curTable = tbl;
                    break;
                }
            }
             * */

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            classW2XTagItem tagItem = null;
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable); // 取topo key

            if (trvDataDocTbl2Excel.Nodes[0].Tag == null)
            {
                // m_curTargetTable = curTable;
                tagItem = new classW2XTagItem(); // 新建节点

                tagItem.curTargetTable = curTable; // 记录
                tagItem.strCurTblTopoKey = strTblTopoKey; // 记录

                trvDataDocTbl2Excel.Nodes[0].Tag = tagItem; // 记录
            }
            else
            {
                tagItem = (classW2XTagItem)trvDataDocTbl2Excel.Nodes[0].Tag; // 提取

                if (!tagItem.strCurTblTopoKey.Equals(strTblTopoKey)) // 对比
                {
                    MessageBox.Show("请在同结构表中选择列名");
                    return;
                }
            }
            // 提取行列数
            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

            if (nRowNum2 != nRowNum || nColNum2 != nColNum)
            {
                MessageBox.Show("请不要在表格中跨列或行进行选择");
                return;
            }

            Word.Cell cel = null;
                
            try
            {
            	cel = curTable.Cell(nRowNum, nColNum); // 取单元对象
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }

            strSelText = cel.Range.Text.Trim(m_trimChars); // 取值

            Boolean bColNameEmpty = false;
            if (strSelText.Equals("")) // 产生摘要
            {
                strSelText = "[" + nRowNum + "," + nColNum + "]"; 
                bColNameEmpty = true;
            }
            else if (strSelText.Length > 10)
            {
                strSelText = strSelText.Substring(0, 10);
                strSelText += "...";
            }


            // search dataset to keep Same Name col
            int nColIndex = m_tbl2ExcelDataSet.Tables[0].Columns.IndexOf(strSelText);

            if (nColIndex != -1)
            {
                MessageBox.Show("列名存在重名，请更名后再使用本功能");
                return;
            }
            // 加列名
            m_tbl2ExcelDataSet.Tables[0].Columns.Add(strSelText);

            TreeNode newColNameNd = null;
            // 新建节点
            if (!bColNameEmpty)
            {
                newColNameNd = new TreeNode(strSelText + "[" + nRowNum + "," + nColNum + "]");
            }
            else
            {
                newColNameNd = new TreeNode(strSelText);
            }
            // 添加
            newColNameNd.Name = strSelText;// newColNameNd.Text;

            newColNameNd.Tag = "$" + nRowNum + "," + nColNum; // 记录标记
            newColNameNd.ForeColor = Color.Red; // 区别显示

            trvDataDocTbl2Excel.Nodes[0].Nodes.Add(newColNameNd); // 添加
            newColNameNd.EnsureVisible();

            return;
        }

/*
        private void btnAddColName_Click(object sender, EventArgs e)
        {
            Word.Document doc = m_addin.Application.ActiveDocument;
            Word.Selection sel = doc.ActiveWindow.Selection;

            String strSelText = sel.Range.Text.Trim(m_trimChars);


            if (sel.End - sel.Start <= 1 || strSelText.Equals(""))
            {
                MessageBox.Show("请选择文档中的表格列名区(非空内容)");
                return;
            }

            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请选择在表格中选定列名区");
                return;
            }


            // 增加字段名称
            if (m_tbl2ExcelDataSet.Tables.Count == 0)
            {
                DataTable dt = new DataTable();

                m_tbl2ExcelDataSet.Tables.Add(dt);

            }


            // get position in table
            Word.Table curTable = null;

            foreach (Word.Table tbl in doc.Tables)
            {
                if (sel.Range.InRange(tbl.Range))
                {
                    curTable = tbl;
                    break;
                }
            }

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }


            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

            if (nRowNum2 != nRowNum || nColNum2 != nColNum)
            {
                MessageBox.Show("请不要在表格中跨列或行进行选择");
                return;
            }

            Word.Cell cel = curTable.Cell(nRowNum, nColNum);

            strSelText = cel.Range.Text.Trim(m_trimChars);

            // search dataset to keep Same Name col
            int nColIndex = m_tbl2ExcelDataSet.Tables[0].Columns.IndexOf(strSelText);

            if (nColIndex != -1)
            {
                MessageBox.Show("列名存在重名，请更名后再使用本功能");
                return;
            }

            m_tbl2ExcelDataSet.Tables[0].Columns.Add(strSelText);

            TreeNode newColNameNd = new TreeNode(strSelText);
            newColNameNd.Name = newColNameNd.Text;
            newColNameNd.Tag = "$" + nRowNum + "," + nColNum;
            newColNameNd.ForeColor = Color.Red;

            trvDataDocTbl2Excel.Nodes[0].Nodes.Add(newColNameNd);
            newColNameNd.EnsureVisible();

            return;
        }*/



        private void btnAddColValue_Click(object sender, EventArgs e)
        {
            // 增加字段值

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            String strSelText = "";// sel.Range.Text.Trim(m_trimChars);

//             if (sel.End - sel.Start <= 1 || strSelText.Equals(""))
//             {
//                 MessageBox.Show("请选择文档中的表格值区(非空内容)");
//                 return;
//             }
            // 判断是否在表中
            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在表格选定值区");
                return;
            }

            // 增加字段值
            if (m_tbl2ExcelDataSet.Tables.Count == 0)
            {
                MessageBox.Show("请先创建列名");
                return;

                // DataTable dt = new DataTable();
                // m_tbl2ExcelDataSet.Tables.Add(dt);

            }

            TreeNode selNode = trvDataDocTbl2Excel.SelectedNode;

            if (selNode == null || selNode.Level != 1)
            {
                MessageBox.Show("请选中列名节点");
                return;
            }

            if (selNode.Nodes.Count > 0)
            {
                MessageBox.Show("不能增加，已存在值节点");
                return;
            }


            // get position in table
            Word.Table curTable = null;

            curTable = sel.Tables[1];

            /*
            foreach (Word.Table tbl in doc.Tables)
            {
                if(sel.Range.InRange(tbl.Range))
                {
                    curTable = tbl;
                    break;
                }
            }
             * */

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            classW2XTagItem tagItem = null;
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable); // 提取topo key

            if (trvDataDocTbl2Excel.Nodes[0].Tag == null)
            {
                // m_curTargetTable = curTable;
                tagItem = new classW2XTagItem(); // 新建记录项

                tagItem.curTargetTable = curTable; // 记录
                tagItem.strCurTblTopoKey = strTblTopoKey; // 记录

                trvDataDocTbl2Excel.Nodes[0].Tag = tagItem;
            }
            else
            {
                tagItem = (classW2XTagItem)trvDataDocTbl2Excel.Nodes[0].Tag;

                if (!tagItem.strCurTblTopoKey.Equals(strTblTopoKey))
                {
                    MessageBox.Show("请在同结构表中选择列名");
                    return;
                }
            }
            // 取行列值
            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

            if (nRowNum2 != nRowNum || nColNum2 != nColNum)
            {
                MessageBox.Show("请不要在表格中跨列或行进行选择");
                return;
            }

            Word.Cell cel = null;

            try
            {
                cel = curTable.Cell(nRowNum, nColNum); // 访问cell对象
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }

            strSelText = cel.Range.Text.Trim(m_trimChars); // 构建显示文本
            if (strSelText.Length > 10)
            {
                strSelText = strSelText.Substring(0, 10);
                strSelText += "...";
            }

            String strColName = "";
            String strSelNodeText = selNode.Text;

            int nLeftBIndex = strSelNodeText.LastIndexOf('['); //.IndexOf('[');

            if (nLeftBIndex == 0)
            {
                strColName = strSelNodeText;
            }
            else
            {
                strColName = strSelNodeText.Substring(0, nLeftBIndex);
            }


            // search dataset to keep Same Name col
            int nColIndex = m_tbl2ExcelDataSet.Tables[0].Columns.IndexOf(strColName);

            if (nColIndex == -1)
            {
                MessageBox.Show("列名不存在，可能异常");
                return;
            }
            // 构建显示名称
            String strValueText = "行列[" + nRowNum + "," + nColNum + "]，例：" + strSelText;

            TreeNode newColValueNd = new TreeNode(strValueText);
            newColValueNd.Name = newColValueNd.Text;
            newColValueNd.Tag = "#" + nRowNum + "," + nColNum; // 区分处理
            newColValueNd.ForeColor = Color.Green; // 颜色区分

            selNode.Nodes.Add(newColValueNd); // 加入节点
            newColValueNd.EnsureVisible();

            return;
        }


        private void btnAddTagCol_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            if (sel.End - sel.Start <= 1)
            {
                MessageBox.Show("请选择文档中的非空内容");
                return;
            }

            String strSelText = sel.Range.Text.Trim(m_trimChars);
            if (strSelText.Equals(""))
            {
                MessageBox.Show("请选择文档中的非空内容");
                return;
            }

            // 增加字段名称
            if (m_tbl2ExcelDataSet.Tables.Count == 0)
            {
                DataTable dt = new DataTable();

                m_tbl2ExcelDataSet.Tables.Add(dt);

            }

            // search dataset to keep Same Name col
            int nColIndex = -1;
            String strTagName = "标识" + m_nTageIndex;
            // 添加新列
            nColIndex = m_tbl2ExcelDataSet.Tables[0].Columns.IndexOf(strTagName);

            //if (nColIndex != -1)
            //{
                while (nColIndex != -1)
                {
                    m_nTageIndex++;

                    strTagName = "标识" + m_nTageIndex;
                    nColIndex = m_tbl2ExcelDataSet.Tables[0].Columns.IndexOf(strTagName); // 确保名称唯一
                }

                m_tbl2ExcelDataSet.Tables[0].Columns.Add(strTagName); // 添加
            //}

            // 设置节点，保存信息
            TreeNode newTagValueNd = new TreeNode(strSelText);
            newTagValueNd.Name = newTagValueNd.Text; // 记录
            newTagValueNd.Tag = "=TagValue"; // 记录
            newTagValueNd.ForeColor = Color.Blue; // 颜色区分

            TreeNode newColTagNd = new TreeNode(strTagName);
            newColTagNd.Name = newColTagNd.Text; // 记录
            newColTagNd.Tag = "=TagName"; // 记录
            newColTagNd.ForeColor = Color.Blue; // 颜色区分

            newColTagNd.Nodes.Add(newTagValueNd); // 添加

            trvDataDocTbl2Excel.Nodes[0].Nodes.Add(newColTagNd); // 添加
            newColTagNd.ExpandAll(); // 展开
            newColTagNd.EnsureVisible();

            return;
        }


        private void btnDocTbl2ExcelRemove_Click(object sender, EventArgs e)
        {
            // 删除
            TreeNode selNode = trvDataDocTbl2Excel.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中某一节点");
                return;
            }

            if (selNode.Level == 0)
            {
                MessageBox.Show("请选中子节点");
                return;
            }

            if (selNode.Nodes.Count > 0)
            {
                DialogResult res = MessageBox.Show("存在子节点，确认删除？","确认",MessageBoxButtons.YesNoCancel);

                if (res == DialogResult.Cancel || res == DialogResult.No)
                {
                    return;
                }

            }

            //@TODO, dataset find it and remove it

            if(m_tbl2ExcelDataSet.Tables.Count > 0)
            {
                String strColName = "";

                if (selNode.Level == 1) // 取列名
                {
                    String strSelNodeText = selNode.Text;
                    String strTag = (String)selNode.Tag;

                    if (strTag == null)
                    {
                        MessageBox.Show("Tag NULL");
                        return;
                    }

                    if (strTag.StartsWith("=Tag"))
                    {
                        strColName = strSelNodeText;
                    }
                    else // $
                    {
                        int nLeftBIndex = strSelNodeText.LastIndexOf('['); //.IndexOf('[');

                        if (nLeftBIndex == 0)
                        {
                            strColName = strSelNodeText;
                        }
                        else
                        {
                            strColName = strSelNodeText.Substring(0, nLeftBIndex);
                        }
                    }
                    
                    if (!String.IsNullOrWhiteSpace(strColName))
                    {
                        m_tbl2ExcelDataSet.Tables[0].Columns.Remove(strColName); // 删除
                    }
                }
                else if (selNode.Level == 2) // 取列名
                {
                    strColName = selNode.Parent.Text;
                }
                
            }

            TreeNode parentNode = selNode.Parent;

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 3, selNode.FullPath);

            selNode.Remove();

            trvDataDocTbl2Excel.SelectedNode = parentNode;

            if (trvDataDocTbl2Excel.Nodes[0].Nodes.Count == 0)
            {
                trvDataDocTbl2Excel.Nodes[0].Tag = null; // 清空Tag
            }

            return;
        }


        private void btnClearItems_Click(object sender, EventArgs e)
        {
            // 清除
            DialogResult res = MessageBox.Show("确认清除？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }


            m_tbl2ExcelDataSet.Tables[0].Clear(); // 清空

            trvDataDocTbl2Excel.Nodes[0].Nodes.Clear(); // 清空
            trvDataDocTbl2Excel.Nodes[0].Tag = null; // 重置

            m_nTageIndex = 1; // 重置

            //TreeNode rtNd = new TreeNode("表格");
            //trvDataDocTbl2Excel.Nodes.Add(rtNd);

            return;
        }


        private void getDocTbl2ExcelValuesHash(TreeNode nd,ref Hashtable hashColName, ref Hashtable hashValues, ref Hashtable hashTags)
        {
            if (nd.Level == 1) // name
            {
                if (nd.Tag != null)
                {
                    String strTag = (String)nd.Tag;
                    if (strTag.StartsWith("$")) // 类型判断
                    {
                        String strRowCol = strTag.Substring(1); // 取行列值
                        String strColName = nd.Name; // 取名称

                        hashColName[strRowCol] = strColName; // 建hash表
                    }
                }
            }
            else if(nd.Level == 2) // value
            {
                if (nd.Tag != null)
                {
                    String strTag = (String)nd.Tag;

                    if (strTag.StartsWith("#"))  // 类型判断
                    {
                        String strRowCol = strTag.Substring(1); // 取行列值
                        String strColName = nd.Parent.Name; // 取名称

                        hashValues[strRowCol] = strColName; // 建hash表
                    }
                    else if (strTag.StartsWith("=")) // Tag// 类型判断
                    {
                        String strTagValue = nd.Text;// 取名称
                        String strTagName = nd.Parent.Name;// 取名称

                        hashTags[strTagName] = strTagValue;// 建hash表
                    }
                }
            }
                
            foreach(TreeNode childNd in nd.Nodes) // 遍历
            {
                getDocTbl2ExcelValuesHash(childNd, ref hashColName,ref hashValues, ref hashTags); // 取值
            }

            return;
        }


        private void DocTable2ExcelProduce(int nMaxCnt = -1)
        {
            // 预生成3条
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = doc.ActiveWindow.Selection;

            int oStart = sel.Start; // 原值记忆
            int oEnd = sel.End;

            Hashtable hashColName = new Hashtable();
            Hashtable hashValues = new Hashtable();
            Hashtable hashTags = new Hashtable();
            // 提取hash值
            getDocTbl2ExcelValuesHash(trvDataDocTbl2Excel.Nodes[0],ref hashColName, ref hashValues, ref hashTags);

            DataRow rw = null;
            int nRowNum = 0, nColNum = 0;
            Word.Cell cellItem = null;
            int i = 0;
            String strCellText = "";
            Boolean bValidTable = true;

            // sort
            ArrayList arrTbls = new ArrayList();
            Word.Table tblItem = null;
            foreach (DictionaryEntry ent in m_hashSelTargetTables) // 遍历hash表
            {
                tblItem = (Word.Table)ent.Value;
                arrTbls.Add(tblItem);
            }

            arrTbls.Sort(m_TblCmper); // 排序

            foreach (Word.Table tbl in arrTbls) // 遍历
            {
                try
                {
                	doc.ActiveWindow.ScrollIntoView(tbl.Range); // 视角跟随
                }
                catch (System.Exception ex)
                {
                    continue;
                }
                finally
                {
                    
                }

                bValidTable = true;

                if (chkBoxStrictVerifyTblColName.Checked) // 检验列名
                {
                    // verify colname match?
                    foreach (DictionaryEntry ent in hashColName) // 遍历列名表
                    {
                        String strRowCol = (String)ent.Key;
                        String strColName = (String)ent.Value;

                        String[] strRowColNum = strRowCol.Split(',');

                        if (!int.TryParse(strRowColNum[0], out nRowNum)) // 转换行列值
                        {
                            continue;
                        }

                        if (!int.TryParse(strRowColNum[1], out nColNum)) // 转换行列值
                        {
                            continue;
                        }

                        if (nRowNum <= tbl.Rows.Count && nColNum <= tbl.Columns.Count) // 提取cell
                        {
                            cellItem = tbl.Cell(nRowNum, nColNum);

                            // rw = m_tbl2ExcelDataSet.Tables[0].NewRow();
                            strCellText = cellItem.Range.Text.Trim(m_trimChars);

                            if (strCellText.Equals(""))
                            {
                                if (!strColName.Equals("[" + nRowNum + "," + nColNum + "]")) // 对比
                                {
                                    bValidTable = false;
                                }
                            }
                            else
                            {
                                if (!strCellText.Equals(strColName)) // 对比
                                {
                                    bValidTable = false;
                                }
                            }
                        }
                        else
                        {
                            bValidTable = false;
                        }

                    }
                    // 
                    if (!bValidTable)
                    {
                        continue;
                    }
                }

                // 
                rw = m_tbl2ExcelDataSet.Tables[0].NewRow(); // 新建记录
                rw.BeginEdit();
                foreach (DictionaryEntry ent in hashValues) // 遍历值表
                {
                    String strRowCol = (String)ent.Key;
                    String strColName = (String)ent.Value;

                    String[] strRowColNum = strRowCol.Split(',');

                    if (!int.TryParse(strRowColNum[0], out nRowNum)) // 提取行列值
                    {
                        continue;
                    }

                    if (!int.TryParse(strRowColNum[1], out nColNum)) // 提取行列值
                    {
                        continue;
                    }

                    if (nRowNum <= tbl.Rows.Count && nColNum <= tbl.Columns.Count)
                    {
                        cellItem = tbl.Cell(nRowNum, nColNum); // 提取单元对象

                        // rw = m_tbl2ExcelDataSet.Tables[0].NewRow();
                        if (cellItem.Range.Paragraphs.Count > 1) // 多段落
                        {
                            rw[strColName] = cellItem.Range.Text.Replace("\r\a", "\r\n");
                        }
                        else
                        {
                            rw[strColName] = cellItem.Range.Text.Replace("\r\a", ""); // 单段落
                        }
                    }
                }
                
                foreach(DictionaryEntry ent in hashTags) // 标识表
                {
                    String strTagName = (String)ent.Key;
                    String strTagValue = (String)ent.Value;

                    rw[strTagName] = strTagValue; // 记录标识值
                }

                rw.EndEdit();
                m_tbl2ExcelDataSet.Tables[0].Rows.Add(rw); // 加到数据表中

                i++;

                if (nMaxCnt != -1 && i > nMaxCnt)
                {
                    break;
                }
            }

            SaveFileDialog svDialog = new SaveFileDialog();
            svDialog.Filter = "EXCEL files(*.xlsx)|*.xlsx";

            DialogResult result = svDialog.ShowDialog();

            String strSvFileName = "";

            if (result == DialogResult.OK)
            {
                //获得文件路径
                strSvFileName = svDialog.FileName.ToString();

                // dataset to excel
                DataTabletoExcel(m_tbl2ExcelDataSet.Tables[0], strSvFileName);

                sel.Start = oStart; // 恢复原位置
                sel.End = oEnd;
                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range); // 视角恢复

                DialogResult res = MessageBox.Show("查看文件：" + strSvFileName + "?", "查看文件", MessageBoxButtons.YesNo);

                if(res == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start(strSvFileName); // 打开EXCEL表查看
                }

            }

            return;

        }


        private int preProcessProduce()
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return -1;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nRet = 0;

            if (trvDataDocTbl2Excel.Nodes[0].Tag == null)
            {
                MessageBox.Show("请建立至少一个列名");
                return -1;
            }

            classW2XTagItem tagItem = (classW2XTagItem)trvDataDocTbl2Excel.Nodes[0].Tag;
            String strTargetKey = tagItem.strCurTblTopoKey;
            String strStructureKey = "";


            Word.Tables tbls = null;

            if (rdBtnW2XAllDocScope.Checked)
            {
                tbls = doc.Tables;
            }
            else
            {
                if (sel.End - sel.Start <= 1)
                {
                    DialogResult res = MessageBox.Show("未作任何选择，是否应用全文？", "确认", MessageBoxButtons.YesNo);

                    if (res == DialogResult.No)
                    {
                        return -1;
                    }
                }
                else
                {
                    tbls = sel.Tables;
                }
            }

            if (tbls != null)
            {
                m_hashSelTargetTables.Clear();

                Boolean bDifferent = false;
                int nDiffCnt = 0;
                foreach (Word.Table tbl in tbls)
                {
                    strStructureKey = m_addin.m_commTools.genTableTopoKey(tbl); // 提取topo key

                    if (strTargetKey.Equals(strStructureKey)) // 相等
                    {
                        m_hashSelTargetTables[tbl] = tbl; // 则记录
                    }
                    else
                    {
                        bDifferent = true;
                        nDiffCnt++;
                    }
                }

                nRet = tbls.Count;
            }

            return nRet;
        }


        private void btnPreviewProduce_Click(object sender, EventArgs e)
        {
            int nRet = preProcessProduce(); // 预处理产生

            if (nRet > 0)
            {
                DocTable2ExcelProduce(2);  // 先产生2个
            }
            else
            {
                MessageBox.Show("没有目标表格");
            }

            return;
        }


        private void btnAllProduce_Click(object sender, EventArgs e)
        {
            int nRet = preProcessProduce(); // 预处理产生

            if (nRet > 0)
            {
                DocTable2ExcelProduce(); // 产生
            }
            else
            {
                MessageBox.Show("没有目标表格");
            }

            return;
        }

        /// <summary>
        /// 数据集转换到Excel表
        /// </summary>
        /// <param name="ds"></param>
        /// <param name="fileName"></param>
        public static void DataSetToExcelSheet(DataSet ds, string fileName)
        {
            //int testnum = ds.Tables.Count-1;

            //             SaveFileDialog saveDialog = new SaveFileDialog();
            //             saveDialog.DefaultExt = "xls";
            //             saveDialog.Filter = "Excel文件|*.xls";
            //             saveDialog.FileName = fileName;
            //             saveDialog.ShowDialog();
            // 
            //             fileName = saveDialog.FileName;
            //             if (fileName.IndexOf(":") < 0) return; //被点了取消

            Microsoft.Office.Interop.Excel.Application appExcel;
            appExcel = new Microsoft.Office.Interop.Excel.Application();
            if (appExcel == null)
            {
                MessageBox.Show("无法创建Excel对象，可能您的电脑未安装Excel");
                return;
            }

            Microsoft.Office.Interop.Excel.Workbook workbookData;
            Microsoft.Office.Interop.Excel.Worksheet worksheetData;
            Excel.Range range;
            workbookData = appExcel.Workbooks.Add(System.Reflection.Missing.Value);

            appExcel.DisplayAlerts = false;//不显示警告
            //xlApp.Visible = true;//excel是否可见
            //
            //for (int i = workbookData.Worksheets.Count; i > 0; i--)
            //{
            //    Microsoft.Office.Interop.Excel.Worksheet oWorksheet = (Microsoft.Office.Interop.Excel.Worksheet)workbookData.Worksheets.get_Item(i);
            //    oWorksheet.Select();
            //    oWorksheet.Delete();
            //}

            for (int k = 0; k < ds.Tables.Count; k++) // 遍历各个表
            {   // sheet数据
                worksheetData = (Microsoft.Office.Interop.Excel.Worksheet)workbookData.Worksheets.Add(System.Reflection.Missing.Value, System.Reflection.Missing.Value, System.Reflection.Missing.Value, System.Reflection.Missing.Value);

                // testnum--;
                if (ds.Tables[k] != null)
                {
                    worksheetData.Name = ds.Tables[k].TableName; // 取表名
                    //写入标题
                    for (int i = 0; i < ds.Tables[k].Columns.Count; i++) // 遍历列
                    {
                        worksheetData.Cells[1, i + 1] = ds.Tables[k].Columns[i].ColumnName; // 取列名
                        range = (Excel.Range)worksheetData.Cells[1, i + 1]; // 取单元

                        if (range != null)
                        {
                            //range.Interior.ColorIndex = 15;
                            //range.Font.Bold = true;
                            //range.NumberFormatLocal = "@";//文本格式 
                            //range.EntireColumn.AutoFit();//自动调整列宽 
                            range.WrapText = true; //文本自动换行   
                            //range.ColumnWidth = 15;
                        }

                    }
                    //写入数值

                    for (int r = 0; r < ds.Tables[k].Rows.Count; r++) // 遍历行
                    {
                        for (int i = 0; i < ds.Tables[k].Columns.Count; i++) // 遍历列
                        {

                            worksheetData.Cells[r + 2, i + 1] = ds.Tables[k].Rows[r][i]; // 单元格
                            range = (Excel.Range)worksheetData.Cells[r + 2, i + 1];

                            if (range != null)
                            {
                                //range.NumberFormatLocal = "@";//文本格式 
                                //range.EntireColumn.AutoFit();//自动调整列宽 
                                range.WrapText = true; //文本自动换行   
                                //range.ColumnWidth = 15;
                            }

                        }
                        //  rowRead++;

                        System.Windows.Forms.Application.DoEvents();

                    }

                }

                worksheetData.Columns.EntireColumn.AutoFit(); // 自动调整列宽
                workbookData.Saved = true; // save

            }

            workbookData.SaveAs(fileName); // 保存
            workbookData.Close();

            appExcel.Quit(); // excel退出
            //             DialogResult btn = MessageBox.Show(null, "文件“" + fileName + "”保存成功。是否现在打开？", "信息", MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            // 
            //             if (btn == DialogResult.Yes)
            //             {
            //                 ApplicationClass excelApp = new ApplicationClass();
            //                 Workbook workbook2 = excelApp.Workbooks.Open(fileName);
            //                 excelApp.Visible = true;
            // 
            //             }
            // appExcel.Quit();


            GC.Collect(); // 回收

            return;

        }

        private void btnMultiSelApplySel_Click_v1(object sender, EventArgs e)
        {   // 选项提取
            Boolean bWholeDoc = radioBtnMultiSelWholeStory.Checked;
            Boolean bSelScope = radioBtnMultiSelCurSelScope.Checked;
            Boolean bOnlyObj = rdBtnMultiSelObjectRng.Checked;

            int[] nHeadings = new int[9];

            Boolean bTextBodyIgnoreToc = checkBoxMultiSelIgnoreTbl.Checked;
            Boolean bHeadingSeled = false;

            for (int i = 0; i < checkedListBoxMultiSelHeading.Items.Count - 1; i++) // 遍历
            {
                if (checkedListBoxMultiSelHeading.GetItemChecked(i)) // 提取选择状态
                {
                    nHeadings[i] = (i + 1);
                    bHeadingSeled = true;
                }
                else
                {
                    nHeadings[i] = 0;
                }
            }

            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有打开的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            Word.Range oriRng = sel.Range;//sel.Paragraphs[1].Range;

            if (sel.End - sel.Start <= 1 && bSelScope)
            {
                DialogResult res = MessageBox.Show("没有任何选择，应用到全文？", "确认", MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    return;
                }

                bSelScope = false;
                bWholeDoc = true;
            }

            // 切换到normal view
            Word.WdViewType oViewType = doc.ActiveWindow.View.Type;

            doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;

            // 章节
            ArrayList paras = null;

            if (bHeadingSeled)
            {
                if (bWholeDoc)
                {   // 全文
                    // paras = m_addin.m_commTools.getHeadingParas(doc);
                    paras = m_addin.m_commTools.getSpecificHeadingParasInScope(doc, null, nHeadings);
                }
                else
                {   // 选区段落
                    paras = m_addin.m_commTools.getSpecificHeadingParasInScope(doc, sel.Range, nHeadings);
                }

                foreach (Word.Paragraph item in paras) // 遍历
                {
                    m_addin.m_commTools.RecordMultiSel(item.Range);
                }

            }


            // 正文
            if (checkedListBoxMultiSelHeading.GetItemChecked(checkedListBoxMultiSelHeading.Items.Count - 1))
            {
                paras = null;

                if (bWholeDoc)
                {
                    int nPages = doc.Content.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

                    if (nPages > 30)
                    {
                        DialogResult res = MessageBox.Show("当前文档较长，此操作将较费时，确认操作？", "确认", MessageBoxButtons.YesNo);
                        if (res == DialogResult.No)
                        {
                            return;
                        }
                    }

                    // 提取正文
                    paras = m_addin.m_commTools.getTextBodyParas(doc, checkBoxMultiSelIgnoreTbl.Checked, checkBoxMultiSelIgnoreToc.Checked);
                }
                else
                {
                    //                     int nPages = sel.Range.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);
                    // 
                    //                     if (nPages > 30)
                    //                     {
                    //                         DialogResult res = MessageBox.Show("当前选择范围较大，此操作将较费时，确认操作？", "确认", MessageBoxButtons.YesNo);
                    //                         if (res == DialogResult.No)
                    //                         {
                    //                             return;
                    //                         }
                    //                     }

                    // 提取正文
                    paras = m_addin.m_commTools.getSpecificTextBodyParasInScope(doc, sel.Range, checkBoxMultiSelIgnoreTbl.Checked, checkBoxMultiSelIgnoreToc.Checked);
                }

                foreach (Word.Paragraph item in paras) // 遍历
                {
                    m_addin.m_commTools.RecordMultiSel(item.Range);
                }
            }

            // 图
            if (checkBoxMultiSelInlineShapes.Checked)
            {
                //paras = null;

                ArrayList arrIsolatePicsNotInTbl = new ArrayList();
                ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
                ArrayList arrIsolatePicsInTbl = new ArrayList();
                ArrayList arrNotIsolatePicsInTbl = new ArrayList();

                ArrayList arrPics = null;

                
                if (bWholeDoc)
                {   // 获取图片段落
                    // paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc);

                    if (bOnlyObj)
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl);
                    }
                    else
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,true);
                    }

                }
                else
                {   // 获取图片段落
                    // paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc, sel.Range);

                    if (bOnlyObj)
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,false,sel.Range);
                    }
                    else
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,true,sel.Range);
                    }
                }

                //if (bOnlyObj)
                //{
                //    MessageBox.Show("图片不支持“对象本身”的多选，使用“对象所在段落”进行处理");
                //    //                     foreach (Word.Paragraph item in paras) // 遍历
                //    //                     {
                //    //                         foreach (Word.InlineShape inshp in item.Range.InlineShapes)
                //    //                         {
                //    //                             m_addin.m_commTools.RecordMultiSel(inshp.Range);
                //    //                         }
                //    //                     }
                //}

                if (bOnlyObj)
                {
                    foreach (Word.InlineShape item in arrPics) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Paragraph item in arrPics) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }                    
                }

            }


            ///////////////////////////////////
            if (checkBoxMultiSelTables.Checked) // 表格整体
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    m_addin.m_commTools.RecordMultiSel(item.Range);
                }
            }

            /// 表格单元格
            if (chkWholeTableCells.Checked)
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        for (int j = 1; j <= item.Columns.Count; j++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                m_addin.m_commTools.RecordMultiSel(cel.Range);
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }
                }
            }


            if (chkBoxMulSelTblFirstRow.Checked) // 表格首行
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int j = 1; j <= item.Columns.Count; j++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(1, j);
                            m_addin.m_commTools.RecordMultiSel(cel.Range);
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }


            if (chkBoxMulSelTblLastRow.Checked) // 表格末行
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int j = 1; j <= item.Columns.Count; j++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(item.Rows.Count, j);
                            m_addin.m_commTools.RecordMultiSel(cel.Range);
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }



            if (chkBoxMultiSelFirstColumn.Checked) // 表格首列
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(i, 1);
                            m_addin.m_commTools.RecordMultiSel(cel.Range);
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }


            if (chkBoxMultiSelLastColumn.Checked) // 表格末列
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(i, item.Columns.Count);
                            m_addin.m_commTools.RecordMultiSel(cel.Range);
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }




            if (chkBoxMultiSelRowsScope.Checked) // 表格行选
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                int nStart = (int)numMultiSelRowStart.Value;
                int nEnd = (int)numMultiSelRowEnd.Value;

                if (nStart <= 0)
                {
                    nStart = 1;
                }

                if (nEnd <= 0)
                {
                    nEnd = 0;
                }

                int nRowStart = nStart, nRowEnd = 0;

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    if (nEnd == 0 || nEnd > item.Rows.Count)
                    {
                        nRowEnd = item.Rows.Count;
                    }
                    else
                    {
                        nRowEnd = nEnd;
                    }

                    for (int i = nRowStart; i <= nRowEnd; i++)
                    {
                        for (int j = 1; j <= item.Columns.Count; j++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                m_addin.m_commTools.RecordMultiSel(cel.Range);
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }
                }
            }


            if (chkBoxMultiSelColumnsScope.Checked) // 表格列选
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                int nStart = (int)numMultiSelColStart.Value;
                int nEnd = (int)numMultiSelColEnd.Value;

                if (nStart <= 0)
                {
                    nStart = 1;
                }

                if (nEnd <= 0)
                {
                    nEnd = 0;
                }

                int nColStart = nStart, nColEnd = 0;

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    if (nEnd == 0 || nEnd > item.Columns.Count)
                    {
                        nColEnd = item.Columns.Count;
                    }
                    else
                    {
                        nColEnd = nEnd;
                    }

                    for (int j = nColStart; j <= nColEnd; j++)
                    {
                        for (int i = 1; i <= item.Rows.Count; i++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                m_addin.m_commTools.RecordMultiSel(cel.Range);
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }
                }
            }


            ///////////////////////////////////////////////// 对象

            if (checkBoxMultiSelBookMarks.Checked) // 书签
            {
                Word.Bookmarks colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Bookmarks;
                }
                else
                {
                    colls = sel.Bookmarks;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Bookmark item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Bookmark item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }

            }


            if (checkBoxMultiSelComments.Checked) // 批注
            {
                Word.Comments colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Comments;
                }
                else
                {
                    colls = sel.Comments;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Comment item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Comment item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }
            }


            if (checkBoxMultiSelFootNotes.Checked) // 脚注
            {
                Word.Footnotes colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Footnotes;
                }
                else
                {
                    colls = sel.Footnotes;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Footnote item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Footnote item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }
            }


            if (checkBoxMultiSelEndNotes.Checked) // 尾注
            {
                Word.Endnotes colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Endnotes;
                }
                else
                {
                    colls = sel.Endnotes;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Endnote item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Endnote item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }
            }

            if (checkBoxMultiSelCnts.Checked) // 内容控件
            {
                Word.ContentControls colls = null;

                if (bWholeDoc)
                {
                    colls = doc.ContentControls;
                }
                else
                {
                    colls = sel.ContentControls;
                }

                if (bOnlyObj)
                {
                    foreach (Word.ContentControl item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.ContentControl item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }
            }

            if (checkBoxMultiSelFields.Checked) // 域
            {
                Word.Fields colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Fields;
                }
                else
                {
                    colls = sel.Fields;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Result);
                        // m_addin.m_commTools.RecordMultiSel(item.Result.Paragraphs[1].Range);
                    }
                }
                else
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Result);
                        m_addin.m_commTools.RecordMultiSel(item.Result.Paragraphs[1].Range);
                    }
                }
            }


            if (checkBoxMultiSelIndices.Checked) // 索引
            {
                Word.Indexes colls = null;

                colls = doc.Indexes;

                if (bOnlyObj)
                {
                    foreach (Word.Index item in colls)
                    {
                        if (bSelScope) // 选择区
                        {
                            if (m_addin.m_commTools.RangeOverlap(sel.Range, item.Range)) // 重叠
                            {
                                m_addin.m_commTools.RecordMultiSel(item.Range);
                            }
                        }
                        else
                        {
                            m_addin.m_commTools.RecordMultiSel(item.Range);
                        }
                    }
                }
                else
                {
                    foreach (Word.Index item in colls)
                    {
                        if (bSelScope) // 选择区
                        {
                            if (m_addin.m_commTools.RangeOverlap(sel.Range, item.Range)) // 重叠
                            {
                                m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                            }
                        }
                        else
                        {
                            m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        }
                    }
                }
            }


            if (checkBoxMultiHyperLinks.Checked) // 超链接
            {
                Word.Hyperlinks colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Hyperlinks;
                }
                else
                {
                    colls = sel.Hyperlinks;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Hyperlink item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range);
                    }
                }
                else
                {
                    foreach (Word.Hyperlink item in colls) // 遍历
                    {
                        m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                    }
                }
            }

            m_addin.m_commTools.ExecMultiSel(doc);

            // 恢复特定view
            doc.ActiveWindow.View.Type = oViewType;

            if (oriRng != null)
            {
                oriRng.GoTo();
                doc.ActiveWindow.ScrollIntoView(oriRng);
            }

            MessageBox.Show("完成");

            return;
        }

        private void btnMultiSelApplySel_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
            	doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有打开的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;


            int nTotalPages = sel.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

            if (nTotalPages > 30)
            {
                DialogResult dRet = MessageBox.Show("文档较长，将可能耗时较长，若无反应请耐心等待，确定进行多选？", "确认", MessageBoxButtons.YesNo);

                if (dRet == DialogResult.No)
                {
                    return;
                }
            }
            else
            {
                DialogResult dRet = MessageBox.Show("确定进行多选？", "确认", MessageBoxButtons.YesNo);

                if (dRet == DialogResult.No)
                {
                    return;
                }
            }
            
            
            // 选项提取
            int nIncludeColorIndex = IncludeColorComboBox.SelectedIndex;
            int nExcludeColorIndex = ExcludeColorComboBox.SelectedIndex;

            if(chkMultiSelUserDef.Checked)
            {
                if(nIncludeColorIndex != -1 && nExcludeColorIndex != -1 &&
                   nIncludeColorIndex != 0 && nExcludeColorIndex != 0 &&
                   nIncludeColorIndex == nExcludeColorIndex)
                {
                    MessageBox.Show("自定义的2个颜色选择相同，请区分选择");
                    return;
                }
            }

            //ArrayList arrSelectedRngs = new ArrayList();

            HashSet<int> selectedRngSet = new HashSet<int>();

            Boolean bWholeDoc = radioBtnMultiSelWholeStory.Checked;
            Boolean bSelScope = radioBtnMultiSelCurSelScope.Checked;
            Boolean bBeforeSel = rdBtnBeforeCurSel.Checked;
            Boolean bAfterSel = rdBtnAfterCurSel.Checked;

            Boolean bOnlyObj = rdBtnMultiSelObjectRng.Checked;
            Boolean bPara = rdBtnMultiSelObjectPara.Checked;
            Boolean bParaNoCRLF = rdBtnMultiSelObjectParaNoCRLF.Checked;


            int []nHeadings = new int[9];

            Boolean bTextBodyIgnoreToc = checkBoxMultiSelIgnoreTbl.Checked;
            Boolean bHeadingSeled = false;

            for (int i = 0; i < checkedListBoxMultiSelHeading.Items.Count - 1; i++ ) // 遍历
            {
                if(checkedListBoxMultiSelHeading.GetItemChecked(i)) // 提取选择状态
                {
                    nHeadings[i] = (i+1);
                    bHeadingSeled = true;
                }
                else
                {
                    nHeadings[i] = 0;
                }
            }

            
            Word.Range oriRng = sel.Range;//sel.Paragraphs[1].Range;

            Word.Range firstSelRng = null;


            int nTmpRngStart = -1, nTmpRngEnd = -1;

            int nOrigStart = sel.Start;
            int nOrigEnd = sel.End;

            int nRngStart = -1, nRngEnd = -1;

            if (sel.End - sel.Start <= 1 && bSelScope)
            {
                DialogResult res = MessageBox.Show("没有任何选择，应用到全文？","确认",MessageBoxButtons.YesNo);

                if(res == DialogResult.No)
                {
                    return;
                }

                bSelScope = false;
                bWholeDoc = true;

                bBeforeSel = bAfterSel = false;
            }

            nRngStart = sel.Start;
            nRngEnd = sel.End;

            // 切换到normal view
            Word.WdViewType oViewType = doc.ActiveWindow.View.Type;
            doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;

            sel.Start = nRngStart;
            sel.End = nRngEnd;

            //sel.Select();

            if (bBeforeSel)
            {
                // int nEnd = sel.Range.End;
                // sel.Range.SetRange(doc.Content.Start, nEnd);
                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.HomeKey(objUnit, objExtend);

                //sel.HomeKey(Type.Missing, True);

                bSelScope = true;
                bWholeDoc = false;
            }
            else if (bAfterSel)
            {
                //int nStart = sel.Range.Start;
                //sel.Range.SetRange(nStart, doc.Content.End);

                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.EndKey(objUnit, objExtend);

                bSelScope = true;
                bWholeDoc = false;
            }
            else if(bSelScope)
            {
                // sel.Select();
                sel.Range.Select();
            }
            

            // 章节
            ArrayList paras = null;

            if (bHeadingSeled)
            {
                if (bWholeDoc)
                {   // 全文
                    // paras = m_addin.m_commTools.getHeadingParas(doc);
                    paras = m_addin.m_commTools.getSpecificHeadingParasInScope(doc, null, nHeadings);
                }
                else
                {   // 选区段落
                    paras = m_addin.m_commTools.getSpecificHeadingParasInScope(doc, sel.Range, nHeadings);
                }

                if (paras != null)
                {
                    foreach (Word.Paragraph item in paras) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        // arrSelectedRngs.Add(item.Range);
                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }

            }


            // 正文
            if (checkedListBoxMultiSelHeading.GetItemChecked(checkedListBoxMultiSelHeading.Items.Count - 1))
            {
                paras = null;

                if (bWholeDoc)
                {
                    int nPages = doc.Content.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);

                    if (nPages > 30)
                    {
                        DialogResult res = MessageBox.Show("当前文档超过30页，操作将较耗时，确认操作？","确认",MessageBoxButtons.YesNo);
                        if (res == DialogResult.Yes)
                        {
                            // 提取正文
                            paras = m_addin.m_commTools.getTextBodyParas(doc, checkBoxMultiSelIgnoreTbl.Checked, checkBoxMultiSelIgnoreToc.Checked);
                        }
                    }
                    else
                    {
                        // 提取正文
                        paras = m_addin.m_commTools.getTextBodyParas(doc, checkBoxMultiSelIgnoreTbl.Checked, checkBoxMultiSelIgnoreToc.Checked);
                    }
                }
                else
                {
//                     int nPages = sel.Range.get_Information(Word.WdInformation.wdNumberOfPagesInDocument);
// 
//                     if (nPages > 30)
//                     {
//                         DialogResult res = MessageBox.Show("当前选择范围较大，此操作将较费时，确认操作？", "确认", MessageBoxButtons.YesNo);
//                         if (res == DialogResult.No)
//                         {
//                             return;
//                         }
//                     }

                    // 提取正文
                    paras = m_addin.m_commTools.getSpecificTextBodyParasInScope(doc, sel.Range, checkBoxMultiSelIgnoreTbl.Checked, checkBoxMultiSelIgnoreToc.Checked);
                }

                if (paras != null)
                {
                    foreach (Word.Paragraph item in paras) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        // arrSelectedRngs.Add(item.Range);
                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
            }

            // 图
            if (checkBoxMultiSelInlineShapes.Checked)
            {
                //paras = null;

                //if (bWholeDoc)
                //{   // 获取图片段落
                //    paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc);
                //}
                //else
                //{   // 获取图片段落
                //    paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc, sel.Range);
                //}

                ArrayList arrIsolatePicsNotInTbl = new ArrayList();
                ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
                ArrayList arrIsolatePicsInTbl = new ArrayList();
                ArrayList arrNotIsolatePicsInTbl = new ArrayList();

                ArrayList arrPics = null;

                if (bWholeDoc)
                {   // 获取图片段落
                    // paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc);

                    if (bOnlyObj)
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl);
                    }
                    else
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, true);
                    }

                }
                else
                {   // 获取图片段落
                    // paras = m_addin.m_commTools.getSpecificPicsParasInScope(doc, sel.Range);

                    if (bOnlyObj)
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, false, sel.Range);
                    }
                    else
                    {
                        arrPics = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                           arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, true, sel.Range);
                    }
                }


//                if (bOnlyObj)
//                {
//                    MessageBox.Show("图片不支持“对象本身”的多选，使用“对象所在段落”进行处理");
////                     foreach (Word.Paragraph item in paras) // 遍历
////                     {
////                         foreach (Word.InlineShape inshp in item.Range.InlineShapes)
////                         {
////                             m_addin.m_commTools.RecordMultiSel(inshp.Range);
////                         }
////                     }
//                }

                //if (paras != null)
                //{
                //    foreach (Word.Paragraph item in paras) // 遍历
                //    {
                //        //m_addin.m_commTools.RecordMultiSel(item.Range);
                //        arrSelectedRngs.Add(item.Range);
                //        if (firstSelRng == null)
                //        {
                //            firstSelRng = item.Range;
                //        }
                //    }
                //}

                if (arrPics != null)
                {
                    if (bOnlyObj)
                    {
                        foreach (Word.InlineShape item in arrPics) // 遍历
                        {
                            //m_addin.m_commTools.RecordMultiSel(item.Range);

                            nTmpRngStart = item.Range.Start;
                            nTmpRngEnd = item.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range;
                            }
                        }                        
                    }
                    else if(bPara)
                    {
                        foreach (Word.Paragraph item in arrPics) // 遍历
                        {
                            //m_addin.m_commTools.RecordMultiSel(item.Range);

                            nTmpRngStart = item.Range.Start;
                            nTmpRngEnd = item.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range;
                            }
                        }
                    }
                    else
                    {
                        //int nRngStart = -1, nRngEnd = -1;

                        foreach (Word.Paragraph item in arrPics) // 遍历
                        {
                            nTmpRngStart = item.Range.Start;
                            nTmpRngEnd = item.Range.End;
                            
                            if (nTmpRngEnd > nTmpRngStart)
                            {
                                nTmpRngEnd--;
                            }

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range;
                            }
                        }
                    }
                }

            }


            ///////////////////////////////////
            if (checkBoxMultiSelTables.Checked) // 表格整体
            {
                Word.Tables colls = null;

                if(bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    //m_addin.m_commTools.RecordMultiSel(item.Range);

                    nTmpRngStart = item.Range.Start;
                    nTmpRngEnd = item.Range.End;

                    for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                    {
                        selectedRngSet.Add(k);
                    }

                    if (firstSelRng == null)
                    {
                        firstSelRng = item.Range;
                    }
                }
            }

            /// 表格单元格
            if (chkWholeTableCells.Checked)
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        for (int j = 1; j <= item.Columns.Count; j++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                //m_addin.m_commTools.RecordMultiSel(cel.Range);

                                nTmpRngStart = cel.Range.Start;
                                nTmpRngEnd = cel.Range.End;

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                if (firstSelRng == null)
                                {
                                    firstSelRng = cel.Range;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }
                }
            }


            if (chkBoxMulSelTblFirstRow.Checked) // 表格首行
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int j = 1; j <= item.Columns.Count; j++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(1, j);

                            nTmpRngStart = cel.Range.Start;
                            nTmpRngEnd = cel.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            //m_addin.m_commTools.RecordMultiSel(cel.Range);
                            if (firstSelRng == null)
                            {
                                firstSelRng = cel.Range;
                            }
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }


            if (chkBoxMulSelTblLastRow.Checked) // 表格末行
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int j = 1; j <= item.Columns.Count; j++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(item.Rows.Count, j);

                            nTmpRngStart = cel.Range.Start;
                            nTmpRngEnd = cel.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            //m_addin.m_commTools.RecordMultiSel(cel.Range);
                            if (firstSelRng == null)
                            {
                                firstSelRng = cel.Range;
                            }
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }



            if (chkBoxMultiSelFirstColumn.Checked) // 表格首列
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(i, 1);
                            //m_addin.m_commTools.RecordMultiSel(cel.Range);

                            nTmpRngStart = cel.Range.Start;
                            nTmpRngEnd = cel.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = cel.Range;
                            }
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }


            if (chkBoxMultiSelLastColumn.Checked) // 表格末列
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    for (int i = 1; i <= item.Rows.Count; i++)
                    {
                        try
                        {
                            Word.Cell cel = item.Cell(i, item.Columns.Count);

                            nTmpRngStart = cel.Range.Start;
                            nTmpRngEnd = cel.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            //m_addin.m_commTools.RecordMultiSel(cel.Range);
                            if (firstSelRng == null)
                            {
                                firstSelRng = cel.Range;
                            }
                        }
                        catch (System.Exception ex)
                        {
                            continue;
                        }
                        finally
                        {
                        }
                    }
                }
            }


            if (chkBoxMultiSelRowsScope.Checked) // 表格行选
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                int nStart = (int)numMultiSelRowStart.Value;
                int nEnd = (int)numMultiSelRowEnd.Value;

                if (nStart <= 0)
                {
                    nStart = 1;
                }

                if (nEnd <= 0)
                {
                    nEnd = 0;
                }

                int nRowStart = nStart, nRowEnd = 0;

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    if (nEnd == 0 || nEnd > item.Rows.Count)
                    {
                        nRowEnd = item.Rows.Count;
                    }
                    else
                    {
                        nRowEnd = nEnd;
                    }

                    for (int i = nRowStart; i <= nRowEnd; i++)
                    {
                        for (int j = 1; j <= item.Columns.Count; j++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                //m_addin.m_commTools.RecordMultiSel(cel.Range);
                                nTmpRngStart = cel.Range.Start;
                                nTmpRngEnd = cel.Range.End;

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                if (firstSelRng == null)
                                {
                                    firstSelRng = cel.Range;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }//


                }
            }


            if (chkBoxMultiSelColumnsScope.Checked) // 表格列选
            {
                Word.Tables colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Tables;
                }
                else
                {
                    colls = sel.Tables;
                }

                int nStart = (int)numMultiSelColStart.Value;
                int nEnd = (int)numMultiSelColEnd.Value;

                if (nStart <= 0)
                {
                    nStart = 1;
                }

                if (nEnd <= 0)
                {
                    nEnd = 0;
                }

                int nColStart = nStart, nColEnd = 0;

                foreach (Word.Table item in colls) // 遍历
                {
                    if (m_addin.m_commTools.isHideTbl(item))
                    {
                        continue;
                    }

                    // m_addin.m_commTools.RecordMultiSel(item.Range);
                    if (nEnd == 0 || nEnd > item.Columns.Count)
                    {
                        nColEnd = item.Columns.Count;
                    }
                    else
                    {
                        nColEnd = nEnd;
                    }

                    for (int j = nColStart; j <= nColEnd; j++)
                    {
                        for (int i = 1; i <= item.Rows.Count; i++)
                        {
                            try
                            {
                                Word.Cell cel = item.Cell(i, j);
                                //m_addin.m_commTools.RecordMultiSel(cel.Range);
                                nTmpRngStart = cel.Range.Start;
                                nTmpRngEnd = cel.Range.End;

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                if (firstSelRng == null)
                                {
                                    firstSelRng = cel.Range;
                                }
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }
                    }
                }
            }


            ///////////////////////////////////////////////// 对象

            if (checkBoxMultiSelBookMarks.Checked) // 书签
            {
                Word.Bookmarks colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Bookmarks;
                }
                else
                {
                    colls = sel.Bookmarks;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Bookmark item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Bookmark item in colls) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Bookmark item in colls) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }

            }


            if (checkBoxMultiSelComments.Checked) // 批注
            {
                Word.Comments colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Comments;
                }
                else
                {
                    colls = sel.Comments;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Comment item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Comment item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Comment item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
            }


            if (checkBoxMultiSelFootNotes.Checked) // 脚注
            {
                Word.Footnotes colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Footnotes;
                }
                else
                {
                    colls = sel.Footnotes;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Footnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Footnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Footnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
            }


            if (checkBoxMultiSelEndNotes.Checked) // 尾注
            {
                Word.Endnotes colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Endnotes;
                }
                else
                {
                    colls = sel.Endnotes;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Endnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Endnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Endnote item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
            }

            if (checkBoxMultiSelCnts.Checked) // 内容控件
            {
                Word.ContentControls colls = null;

                if (bWholeDoc)
                {
                    colls = doc.ContentControls;
                }
                else
                {
                    colls = sel.ContentControls;
                }

                if (bOnlyObj)
                {
                    foreach (Word.ContentControl item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.ContentControl item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.ContentControl item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
            }

            if (checkBoxMultiSelFields.Checked) // 域
            {
                Word.Fields colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Fields;
                }
                else
                {
                    colls = sel.Fields;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Result);
                        nTmpRngStart = item.Result.Start;
                        nTmpRngEnd = item.Result.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Result;
                        }
                        // m_addin.m_commTools.RecordMultiSel(item.Result.Paragraphs[1].Range);
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Result);
                        //m_addin.m_commTools.RecordMultiSel(item.Result.Paragraphs[1].Range);
                        nTmpRngStart = item.Result.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Result.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Result.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // m_addin.m_commTools.RecordMultiSel(item.Result);
                        //m_addin.m_commTools.RecordMultiSel(item.Result.Paragraphs[1].Range);
                        nTmpRngStart = item.Result.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Result.Paragraphs[1].Range.End;

                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Result.Paragraphs[1].Range;
                        }
                    }
                }
            }
            else if (checkBoxMultiSelTiZhu.Checked)
            {
                Word.Fields colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Fields;
                }
                else
                {
                    colls = sel.Fields;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // if (item.Code.Text.StartsWith("SEQ"))
                        if(item.Type == Word.WdFieldType.wdFieldSequence)
                        {
                            nTmpRngStart = item.Result.Start;
                            nTmpRngEnd = item.Result.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Result;
                            }
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // if (item.Code.Text.StartsWith("SEQ"))
                        if (item.Type == Word.WdFieldType.wdFieldSequence)
                        {
                            nTmpRngStart = item.Result.Paragraphs[1].Range.Start;
                            nTmpRngEnd = item.Result.Paragraphs[1].Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Result.Paragraphs[1].Range;
                            }
                        }
                    }
                }
                else
                {
                    foreach (Word.Field item in colls) // 遍历
                    {
                        // if (item.Code.Text.StartsWith("SEQ"))
                        if (item.Type == Word.WdFieldType.wdFieldSequence)
                        {
                            nTmpRngStart = item.Result.Paragraphs[1].Range.Start;
                            nTmpRngEnd = item.Result.Paragraphs[1].Range.End;

                            if (nTmpRngEnd > nTmpRngStart)
                            {
                                nTmpRngEnd--;
                            }	

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Result.Paragraphs[1].Range;
                            }
                        }
                    }
                }
            }


            if (checkBoxMultiSelIndices.Checked) // 索引
            {
                Word.Indexes colls = null;

                colls = doc.Indexes;
                
                if (bOnlyObj)
                {
                    foreach (Word.Index item in colls)
                    {
                        if (bSelScope) // 选择区
                        {
                            if (m_addin.m_commTools.RangeOverlap(sel.Range, item.Range)) // 重叠
                            {
                                nTmpRngStart = item.Range.Start;
                                nTmpRngEnd = item.Range.End;

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                //m_addin.m_commTools.RecordMultiSel(item.Range);
                                if (firstSelRng == null)
                                {
                                    firstSelRng = item.Range;
                                }
                            }
                        }
                        else
                        {
                            //m_addin.m_commTools.RecordMultiSel(item.Range);
                            nTmpRngStart = item.Range.Start;
                            nTmpRngEnd = item.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range;
                            }
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Index item in colls)
                    {
                        if (bSelScope) // 选择区
                        {
                            if (m_addin.m_commTools.RangeOverlap(sel.Range, item.Range)) // 重叠
                            {
                                //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                                nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                                nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                if (firstSelRng == null)
                                {
                                    firstSelRng = item.Range.Paragraphs[1].Range;
                                }
                            }
                        }
                        else
                        {
                            // m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                            nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                            nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range.Paragraphs[1].Range;
                            }
                        }
                    }
                }
                else
                {
                    foreach (Word.Index item in colls)
                    {
                        if (bSelScope) // 选择区
                        {
                            if (m_addin.m_commTools.RangeOverlap(sel.Range, item.Range)) // 重叠
                            {
                                //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                                nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                                nTmpRngEnd = item.Range.Paragraphs[1].Range.End;
                                
                                if (nTmpRngEnd > nTmpRngStart)
                                {
                                    nTmpRngEnd--;
                                }

                                for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                {
                                    selectedRngSet.Add(k);
                                }

                                if (firstSelRng == null)
                                {
                                    firstSelRng = item.Range.Paragraphs[1].Range;
                                }
                            }
                        }
                        else
                        {
                            // m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                            nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                            nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                            if (nTmpRngEnd > nTmpRngStart)
                            {
                                nTmpRngEnd--;
                            }

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = item.Range.Paragraphs[1].Range;
                            }
                        }
                    }
                }
            }


            if (checkBoxMultiHyperLinks.Checked) // 超链接
            {
                Word.Hyperlinks colls = null;

                if (bWholeDoc)
                {
                    colls = doc.Hyperlinks;
                }
                else
                {
                    colls = sel.Hyperlinks;
                }

                if (bOnlyObj)
                {
                    foreach (Word.Hyperlink item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range);
                        nTmpRngStart = item.Range.Start;
                        nTmpRngEnd = item.Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range;
                        }
                    }
                }
                else if(bPara)
                {
                    foreach (Word.Hyperlink item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
                else
                {
                    foreach (Word.Hyperlink item in colls) // 遍历
                    {
                        //m_addin.m_commTools.RecordMultiSel(item.Range.Paragraphs[1].Range);
                        nTmpRngStart = item.Range.Paragraphs[1].Range.Start;
                        nTmpRngEnd = item.Range.Paragraphs[1].Range.End;
                        
                        if (nTmpRngEnd > nTmpRngStart)
                        {
                            nTmpRngEnd--;
                        }

                        for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                        {
                            selectedRngSet.Add(k);
                        }

                        if (firstSelRng == null)
                        {
                            firstSelRng = item.Range.Paragraphs[1].Range;
                        }
                    }
                }
            }


            // 高亮
            if (checkBoxMultiSelHighlight.Checked)
            {
                Hashtable hashColorParas = null;
                HashSet<int> setHighlights = null;
                int nSelColorIndex = colorComboBoxHighlight.SelectedIndex;
                int nHighlightColorIndex = 99;

                Boolean[] bColorArrs = null;

                if (nSelColorIndex != -1 && nSelColorIndex != 0 && nSelColorIndex <= 16)
                {
                    nHighlightColorIndex = (int)m_hashCmbColorIndex2HighlightIndex[nSelColorIndex];
                    bColorArrs = new Boolean[18];

                    bColorArrs[nHighlightColorIndex] = true;
                }

                int nType = 1;

                if (bOnlyObj)
                {
                    nType = 1;
                }
                else if (bParaNoCRLF)
                {
                    nType = 2;
                }
                else if (bPara)
                {
                    nType = 3;
                }

                if(bWholeDoc)
                {
                    hashColorParas = m_addin.m_commTools.getSpecificHighlightInScope(doc, null, nType, bColorArrs);
                }
                else
                {
                    hashColorParas = m_addin.m_commTools.getSpecificHighlightInScope(doc, sel.Range, nType, bColorArrs);
                }

                setHighlights = (HashSet<int>)hashColorParas[nHighlightColorIndex];

                foreach (int idx in setHighlights)
                {
                    selectedRngSet.Add(idx);

                    //if (firstSelRng == null)
                    //{
                    //    firstSelRng = rng;
                    //}
                }
                
            }

            // 序号段落
            if (checkBoxMultiSelSnParas.Checked)
            {
                Word.ListParagraphs lstParas = null;

                if (bWholeDoc)
                {
                    lstParas = doc.ListParagraphs;
                }
                else
                {
                    lstParas = sel.Range.ListParagraphs;
                }

                ArrayList arrLstParas = new ArrayList();
                Word.Paragraph lstParaItem = null;

                // 
                for (int i = lstParas.Count; i > 0; i--)
                {
                    lstParaItem = (Word.Paragraph)lstParas[i];
                    arrLstParas.Add(lstParaItem);
                }


                Boolean bIgnoreHeadings = chkBoxMultiSelIgnoreHeadings.Checked;
                Boolean bIgnoreTextBody = chkBoxMultiSelIgnoreTxtBody.Checked;

                Boolean bIgnoreTbls = rdBtnMultiSelIgnoreTbls.Checked;
                Boolean bOnlyTbls = rdBtnMultiSelOnlyTbls.Checked;
                Boolean bIncludeTbls = rdBtnMultiSelIncludeTbls.Checked;

                Boolean bAllType = false;
                Hashtable hash2SelectListType = new Hashtable();
                ArrayList arrSimilars = null;


                if (chkListBoxMultiListSnType.CheckedIndices.Count == 0 ||
                    chkListBoxMultiListSnType.CheckedIndices.Count == chkListBoxMultiListSnType.Items.Count)
                {
                    bAllType = true;
                }
                else
                {
                    Word.WdListNumberStyle listNumberType = Word.WdListNumberStyle.wdListNumberStyleNone;

                    foreach (int nIndex in chkListBoxMultiListSnType.CheckedIndices)
                    {
                        //if (nIndex == 0)
                        //{
                        //    bAllType = true;
                        //    break;
                        //}

                        if (m_hashMultiSelIndex2ListStyle.Contains(nIndex))
                        {
                            listNumberType = (Word.WdListNumberStyle)m_hashMultiSelIndex2ListStyle[nIndex];
                            hash2SelectListType[listNumberType] = true;

                            arrSimilars = (ArrayList)m_hashSnParaNumberStyle[listNumberType];
                            if (arrSimilars != null)
                            {
                                foreach(Word.WdListNumberStyle item in arrSimilars)
                                {
                                    if (!hash2SelectListType.Contains(item))
                                    {
                                        hash2SelectListType[item] = true;
                                    }
                                }
                            }
                        }

                    }// foreach

                } // if



                if (bIgnoreHeadings && bIgnoreTextBody)
                {
                    // do nothing
                }
                else if(bIgnoreHeadings)
                {
                    foreach (Word.Paragraph para in arrLstParas) // 遍历
                    {
                        sel.Start = para.Range.Start;
                        sel.End = sel.Start;

                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(para.Range);

                        if (para.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }
                        
                        if (bIgnoreTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bOnlyTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (!bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bIncludeTbls)
                        {

                        }
                        else
                        {
                            // never see here
                        }

                        if (bAllType)
                        {
                            //m_addin.m_commTools.RecordMultiSel(para.Range);
                            nTmpRngStart = para.Range.Start;
                            nTmpRngEnd = para.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = para.Range;
                            }
                        }
                        else
                        {
                            // para.Range.ListFormat.ListType == Word.WdListType.wdListOutlineNumbering;
                            //para.Range.ListFormat.

                            int nLevelNum = para.Range.ListFormat.ListLevelNumber;
                            if (nLevelNum > 0 && nLevelNum <= 9)
                            {
                                Word.ListLevel lstLevel = para.Range.ListFormat.ListTemplate.ListLevels[nLevelNum];

                                if (hash2SelectListType.Contains(lstLevel.NumberStyle))
                                {
                                    //m_addin.m_commTools.RecordMultiSel(para.Range);
                                    nTmpRngStart = para.Range.Start;
                                    nTmpRngEnd = para.Range.End;

                                    for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                    {
                                        selectedRngSet.Add(k);
                                    }

                                    if (firstSelRng == null)
                                    {
                                        firstSelRng = para.Range;
                                    }                                    
                                }
                            }
                        }
                    }
                }
                else if (bIgnoreTextBody)
                {
                    foreach (Word.Paragraph para in arrLstParas) // 遍历
                    {
                        sel.Start = para.Range.Start;
                        sel.End = sel.Start;

                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(para.Range);

                        if (para.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                        {
                            continue;
                        }

                        if (bIgnoreTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bOnlyTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (!bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bIncludeTbls)
                        {

                        }
                        else
                        {
                            // never see here
                        }

                        if (bAllType)
                        {
                            //m_addin.m_commTools.RecordMultiSel(para.Range);
                            nTmpRngStart = para.Range.Start;
                            nTmpRngEnd = para.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = para.Range;
                            }
                        }
                        else
                        {
                            // para.Range.ListFormat.ListType == Word.WdListType.wdListOutlineNumbering;
                            //para.Range.ListFormat.

                            int nLevelNum = para.Range.ListFormat.ListLevelNumber;
                            if (nLevelNum > 0 && nLevelNum <= 9)
                            {
                                Word.ListLevel lstLevel = para.Range.ListFormat.ListTemplate.ListLevels[nLevelNum];

                                if (hash2SelectListType.Contains(lstLevel.NumberStyle))
                                {
                                    //m_addin.m_commTools.RecordMultiSel(para.Range);
                                    nTmpRngStart = para.Range.Start;
                                    nTmpRngEnd = para.Range.End;

                                    for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                    {
                                        selectedRngSet.Add(k);
                                    }

                                    if (firstSelRng == null)
                                    {
                                        firstSelRng = para.Range;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    foreach (Word.Paragraph para in arrLstParas) // 遍历
                    {
                        sel.Start = para.Range.Start;
                        sel.End = sel.Start;

                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(para.Range);


                        if (bIgnoreTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bOnlyTbls)
                        {
                            Boolean bInTbl = para.Range.get_Information(Word.WdInformation.wdWithInTable);

                            if (!bInTbl)
                            {
                                continue;
                            }
                        }
                        else if (bIncludeTbls)
                        {

                        }
                        else
                        {
                            // never see here
                        }

                        if (bAllType)
                        {
                            //m_addin.m_commTools.RecordMultiSel(para.Range);
                            nTmpRngStart = para.Range.Start;
                            nTmpRngEnd = para.Range.End;

                            for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                            {
                                selectedRngSet.Add(k);
                            }

                            if (firstSelRng == null)
                            {
                                firstSelRng = para.Range;
                            }
                        }
                        else
                        {
                            // para.Range.ListFormat.ListType == Word.WdListType.wdListOutlineNumbering;
                            //para.Range.ListFormat.

                            int nLevelNum = para.Range.ListFormat.ListLevelNumber;
                            if (nLevelNum > 0 && nLevelNum <= 9)
                            {
                                Word.ListLevel lstLevel = para.Range.ListFormat.ListTemplate.ListLevels[nLevelNum];

                                if (hash2SelectListType.Contains(lstLevel.NumberStyle))
                                {
                                    //m_addin.m_commTools.RecordMultiSel(para.Range);
                                    nTmpRngStart = para.Range.Start;
                                    nTmpRngEnd = para.Range.End;

                                    for (int k = nTmpRngStart; k <= nTmpRngEnd; k++)
                                    {
                                        selectedRngSet.Add(k);
                                    }

                                    if (firstSelRng == null)
                                    {
                                        firstSelRng = para.Range;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            HashSet<int> setExcludedRngs = null;

            if (chkMultiSelUserDef.Checked)
            {
                int excludeColor = 99;
                int includeColor = 99;
                Boolean[] bSelColors = new Boolean[18];

                Hashtable hashGetColorParas = null;
                HashSet<int> setExclude = null, setInclude = null;

                if (nExcludeColorIndex != -1 && nExcludeColorIndex != 0 && nExcludeColorIndex <= 16)
                {
                    excludeColor = (int)m_hashCmbColorIndex2HighlightIndex[nExcludeColorIndex];
                    bSelColors[excludeColor] = true;
                }

                if (nIncludeColorIndex != -1 && nIncludeColorIndex != 0 && nIncludeColorIndex <= 16)
                {
                    includeColor = (int)m_hashCmbColorIndex2HighlightIndex[nIncludeColorIndex];
                    bSelColors[includeColor] = true;
                }

                if ((excludeColor != -1 && excludeColor != 0 && excludeColor <= 16) || 
                    (includeColor != -1 && includeColor != 0 && includeColor <= 16) )
                {
                    if (bWholeDoc)
                    {
                        hashGetColorParas = m_addin.m_commTools.getSpecificHighlightInScope(doc, null, 1, bSelColors);
                    }
                    else
                    {
                        hashGetColorParas = m_addin.m_commTools.getSpecificHighlightInScope(doc, sel.Range, 1, bSelColors);
                    }
                }

                if (excludeColor != -1 && excludeColor != 0 && excludeColor <= 16)
                {
                    setExclude = (HashSet<int>)hashGetColorParas[excludeColor];
                }

                if (includeColor != -1 && includeColor != 0 && includeColor <= 16)
                {
                    setInclude = (HashSet<int>)hashGetColorParas[includeColor];
                }

                if (setExclude != null && setExclude.Count > 0 )
                {
                    if (selectedRngSet.Count > 0)
                    {
                        setExcludedRngs = m_addin.m_commTools.excludeSpecificRng(setExclude, selectedRngSet);
                    }
                    else
                    {
                        setExcludedRngs = selectedRngSet;
                    }
                }
                else
                {
                    setExcludedRngs = selectedRngSet;
                }


                if (setInclude != null && setInclude.Count > 0)
                {
                    if (setExcludedRngs == null)
                    {
                        setExcludedRngs = new HashSet<int>();
                    }

                    foreach (int inRng in setInclude)
                    {
                        setExcludedRngs.Add(inRng);
                    }
                }

            }

            if (setExcludedRngs != null)
            {
                selectedRngSet = setExcludedRngs;
            }


            if (selectedRngSet.Count > 0)
            {
                ArrayList arrs = new ArrayList();

                foreach (int idx in selectedRngSet)
                {
                    arrs.Add(idx);
                }

                arrs.Sort();

                ArrayList arrRngs = m_addin.m_commTools.mergeRange(arrs);
                int nDim = arrRngs.Count / 2;
                int nSelCnt = 0;

                for (int k = 0; k < nDim; k++)
                {
                    nTmpRngStart = (int)arrRngs[k+k];
                    nTmpRngEnd = (int)arrRngs[k+k+1];

                    if (nTmpRngEnd > nTmpRngStart)
                    {
                        sel.SetRange(nTmpRngStart, nTmpRngEnd);
                        m_addin.m_commTools.RecordMultiSel(sel.Range);
                        nSelCnt++;
                    }
                }

                if (nSelCnt > 0)
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                }
            }


            // 恢复特定view
            doc.ActiveWindow.View.Type = oViewType;

//             int nOrigStart = sel.Start;
//             int nOrigEnd = sel.End;
            if (firstSelRng != null)
            {
                firstSelRng.GoTo();
                doc.ActiveWindow.ScrollIntoView(firstSelRng);
            }
            else if (oriRng != null)
            {
                oriRng.GoTo();
                doc.ActiveWindow.ScrollIntoView(oriRng);
            }

            MessageBox.Show("完成");

            return;
        }

        private void btnMultiSelHeadingAllSel_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < checkedListBoxMultiSelHeading.Items.Count; i++ )
            {
                checkedListBoxMultiSelHeading.SetItemChecked(i, true); // 全选
            }
            
            return;
        }


        private void btnMultiSelHeadingAllClear_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < checkedListBoxMultiSelHeading.Items.Count; i++)
            {
                checkedListBoxMultiSelHeading.SetItemChecked(i, false); // 全清
            }

            return;
        }

        

        private void btnW2XNextSameStructTbl_Click(object sender, EventArgs e)
        {
            // Word.Application app = m_addin.Application;
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            if (trvDataDocTbl2Excel.Nodes[0].Tag == null)
            {
                MessageBox.Show("请建立至少一个列名");
                return;
            }

            classW2XTagItem tagItem = (classW2XTagItem)trvDataDocTbl2Excel.Nodes[0].Tag;

            String strTargetKey = tagItem.strCurTblTopoKey;

            String strStructureKey = "";

            Word.Table fndTbl = null;
            foreach (Word.Table tbl in doc.Tables) // 遍历
            {
                if(!(tbl.Range.Start > sel.End)) // 之后
                {
                    continue;
                }

                strStructureKey = m_addin.m_commTools.genTableTopoKey(tbl); // 提取表topo key
                // 对比
                if (strTargetKey.Equals(strStructureKey) && tbl.GetHashCode() != tagItem.curTargetTable.GetHashCode())
                {
                    fndTbl = tbl;
                    break;
                }
            }

            if (fndTbl != null)
            {
                doc.ActiveWindow.ScrollIntoView(fndTbl.Range); // 跳转
                fndTbl.Select();
                fndTbl.Range.GoTo();
            }

            return;
        }

        private void trvDataDocTbl2Excel_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right) // 右键
            {
                classW2XTagItem tagItem = null;

                if (e.Node.Tag != null)
                {
                    if (e.Node.Level == 0)
                    {
                        tagItem = (classW2XTagItem)e.Node.Tag;

                        if (tagItem.curTargetTable != null)
                        {
                            try
                            {
                                m_curDoc.ActiveWindow.ScrollIntoView(tagItem.curTargetTable.Range); // 视角转到
                                tagItem.curTargetTable.Range.Select(); // 选择
                                tagItem.curTargetTable.Range.GoTo(); // 跳转

                            }
                            catch (System.Exception ex)
                            {

                            }
                        }
                    }
                    else
                    {
                        tagItem = (classW2XTagItem)trvDataDocTbl2Excel.Nodes[0].Tag;

                        String strTag = (String)e.Node.Tag;
                        int nRowNum = 0, nColNum = 0;

                        if (strTag.StartsWith("$") || strTag.StartsWith("#")) // 类型判断
                        {
                            String strRowCol = strTag.Substring(1);

                            String[] strRowColNum = strRowCol.Split(',');
                            // 转换行列
                            if (int.TryParse(strRowColNum[0], out nRowNum) && int.TryParse(strRowColNum[1], out nColNum))
                            {
                                if (nRowNum <= tagItem.curTargetTable.Rows.Count && nColNum <= tagItem.curTargetTable.Columns.Count)
                                {
                                    Word.Cell cellItem = null;
                                    
                                    try
                                    {
                                        cellItem = tagItem.curTargetTable.Cell(nRowNum, nColNum); // 取单元格
                                        m_curDoc.ActiveWindow.ScrollIntoView(cellItem.Range); // 跳转
                                        cellItem.Range.Select(); // 选择
                                        cellItem.Range.GoTo(); // 跳转
                                    }
                                    catch (System.Exception ex)
                                    {
                                    	
                                    }
                                    finally
                                    {
                                    }

                                }

                            }
                        }
                        else
                        {
                            
                        }

                    }
                }

            }

            return;
        }


        private Boolean m_bFillGatherSelorUnsel = false;
        //private DataSet m_dsFillGather = new DataSet();

        private void btnFillGatherAddFiles_Click(object sender, EventArgs e)
        {
            OpenFileDialog openDig = new OpenFileDialog();

            openDig.Filter = "All Word files (*.doc,*.docx)|*.doc;*.docx";
            openDig.RestoreDirectory = true;
            openDig.Multiselect = true;

            DialogResult res = openDig.ShowDialog();

            if (res != DialogResult.OK)
            {
                return;
            }

            foreach(String strFile in openDig.FileNames) // 遍历
            {
                chkListBoxTargetFiles.Items.Add(strFile, true); // 添加并选择
            }

            return;
        }

        private void btnFillGatherDelFiles_Click(object sender, EventArgs e)
        {
            // chkListBoxTargetFiles.Items.Remove();
            CheckedListBox.CheckedItemCollection chkedItems = chkListBoxTargetFiles.CheckedItems;

            for (int i = chkListBoxTargetFiles.CheckedItems.Count - 1; i > -1; i--)
            {
                chkListBoxTargetFiles.Items.RemoveAt(chkListBoxTargetFiles.CheckedIndices[i]);
            }

            return;
        }


        
        private void btnFillGatherAllSelUnSel_Click(object sender, EventArgs e)
        {
            m_bFillGatherSelorUnsel = !m_bFillGatherSelorUnsel;

            for (int i = 0; i < chkListBoxTargetFiles.Items.Count; i++) // 遍历
            {
                chkListBoxTargetFiles.SetItemChecked(i, m_bFillGatherSelorUnsel); // 切换设置
            }
            
            return;
        }


        private void btnFillGatherAddScheme_Click(object sender, EventArgs e)
        {
            if (txtFillGatherName.Text.Trim(m_trimChars).Equals(""))
            {
                MessageBox.Show("请输入名称");
                txtFillGatherName.Focus();
                return;
            }

            String strName = txtFillGatherName.Text;

            // find repeated name
            TreeNode[] fndRes = trvFillGatherSchemes.Nodes.Find(strName, false);

            if (fndRes.GetLength(0) > 0)
            {
                MessageBox.Show("存在同名");
                return;
            }

            TreeNode schemeNode = new TreeNode(strName); // 新建树节点
            schemeNode.Name = schemeNode.Text;

            trvFillGatherSchemes.Nodes.Add(schemeNode); // 新建树节点
            schemeNode.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, "", schemeNode);

            return;
        }


        private void btnFillGatherAddTable_Click(object sender, EventArgs e)
        {
            if (txtFillGatherName.Text.Trim(m_trimChars).Equals(""))
            {
                MessageBox.Show("请输入名称");
                txtFillGatherName.Focus();
                return;
            }

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选择所属的方案");
                return;
            }

            TreeNode schemeNode = selNode;

            while (schemeNode.Level > 0)
            {
                schemeNode = schemeNode.Parent;
            }


            String strName = txtFillGatherName.Text;

            // find repeated name
            TreeNode[] fndRes = schemeNode.Nodes.Find(strName, false);

            if (fndRes.GetLength(0) > 0)
            {
//                 DialogResult res = MessageBox.Show("存在同名，是否更新？","确认",MessageBoxButtons.YesNo);
//                 if (res == DialogResult.No)
//                 {
//                     return;
//                 }
                MessageBox.Show("存在同名");
                return;
            }


            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            // 判断是否在表中
            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在表格的列名区");
                return;
            }

            Word.Table curTable = null;

            curTable = sel.Tables[1];

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            // classW2XTagItem tagItem = null;
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable); // 提取表格topo key

            TreeNode tableNode = new TreeNode(strName); // 产生节点
            tableNode.Name = tableNode.Text; // 记录
            tableNode.Tag = strTblTopoKey; // 记录

            schemeNode.Nodes.Add(tableNode); // 添加
            tableNode.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, schemeNode.FullPath, tableNode);

            return;
        }


        private void btnFillGatherAddColName_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null || selNode.Level < 1)
            {
                MessageBox.Show("请选择所属的表");
                return;
            }

            TreeNode tableNode = selNode;

            while (tableNode.Level > 1)
            {
                tableNode = tableNode.Parent;
            }

            String strSelTblTopoKey = (String)tableNode.Tag;
            // 判断表格
            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在文档表格的列名区");
                return;
            }

            Word.Table curTable = null;
            curTable = sel.Tables[1];

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }
            // 提取表格topo key
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable);

            if (!strSelTblTopoKey.Equals(strTblTopoKey))
            {
                MessageBox.Show("请在同结构表中选择列名进行添加");
                return;
            }

            // get col name
            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

            if (nRowNum2 != nRowNum || nColNum2 != nColNum)
            {
                MessageBox.Show("请不要在表格中跨列或行进行选择");
                return;
            }

            Word.Cell cel = null;

            try
            {
                cel = curTable.Cell(nRowNum, nColNum); // 提取cell
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }

            Boolean bFakeColName = false;
            String strColName = cel.Range.Text.Trim(m_trimChars);

//             if (strSelText.Length > 10)
//             {
//                 strSelText = strSelText.Substring(0, 10);
//                 strSelText += "...";
//             }

            if (strColName.Equals(""))
            {
                DialogResult res = MessageBox.Show("选中列名无内容，是否使用名称框中输入的内容作为列名？","确认",MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    return;
                }

                if (txtFillGatherName.Text.Trim(m_trimChars).Equals(""))
                {
                    MessageBox.Show("请输入名称");
                    txtFillGatherName.Focus();
                    return;
                }

                strColName = txtFillGatherName.Text;
                bFakeColName = true;
            }
            else
            {
                if (!txtFillGatherName.Text.Equals(""))
                {
                    DialogResult res = MessageBox.Show("列名选择：\r\n是：使用当前选择单元格内容\r\n否：使用名称框中输入的内容", "确认", MessageBoxButtons.YesNoCancel);

                    if (res == DialogResult.Cancel)
                    {
                        return;
                    }
                    else if (res == DialogResult.No)
                    {
                        if (txtFillGatherName.Text.Trim(m_trimChars).Equals(""))
                        {
                            MessageBox.Show("请输入名称");
                            txtFillGatherName.Focus();
                            return;
                        }

                        strColName = txtFillGatherName.Text;
                        bFakeColName = true;
                    }
                    else
                    {
                        
                    }

                }
            }

            // find same name
            TreeNode[] fndRes = tableNode.Nodes.Find(strColName, false);

            if (fndRes.GetLength(0) > 0)
            {
                MessageBox.Show("存在同名");
                return;
            }
            // 新建树节点
            TreeNode newColNameNd = new TreeNode(strColName + "[" + nRowNum + "," + nColNum + "]");

            newColNameNd.Name = strColName;// newColNameNd.Text;

            if (bFakeColName)
            {
                newColNameNd.Tag = "@" + nRowNum + "," + nColNum; // 类型设置
            }
            else
            {
                newColNameNd.Tag = "$" + nRowNum + "," + nColNum;
            }
            newColNameNd.ForeColor = Color.Red; // 颜色区分

            tableNode.Nodes.Add(newColNameNd); // 添加节点
            newColNameNd.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, tableNode.FullPath, newColNameNd);

            return;
        }

        private void btnFillGatherAddColValue_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null || selNode.Level < 2)
            {
                MessageBox.Show("请选择所属的列名");
                return;
            }

            TreeNode colNameNode = selNode;

            while (colNameNode.Level > 2)
            {
                colNameNode = colNameNode.Parent;
            }

            if (colNameNode.Nodes.Count > 0)
            {
                MessageBox.Show("不能增加，已存在值节点");
                return;
            }

            String strSelTblTopoKey = (String)colNameNode.Parent.Tag;
            // 是否在表中
            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在文档表格的列名区");
                return;
            }

            Word.Table curTable = null;
            curTable = sel.Tables[1];

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }
            // 提取表格topo key
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable);

            if (!strSelTblTopoKey.Equals(strTblTopoKey))
            {
                MessageBox.Show("请在同结构表中选择列名进行添加");
                return;
            }

            // get col name
            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

            if (nRowNum2 != nRowNum || nColNum2 != nColNum)
            {
                MessageBox.Show("请只选择单个单元格");
                return;
            }

            Word.Cell cel = null;

            try
            {
                cel = curTable.Cell(nRowNum, nColNum);
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }

            String strSelText = cel.Range.Text.Trim(m_trimChars);
            if (strSelText.Length > 10) // 摘要
            {
                strSelText = strSelText.Substring(0, 10);
                strSelText += "...";
            }

            String strSample = "，例：" + strSelText;

            String strValueText = "[" + nRowNum + "," + nColNum + "]";

            if (!strSelText.Equals(""))
            {
                strValueText += strSample;
            }

            // 添加节点
            TreeNode newColValueNd = new TreeNode(strValueText);
            newColValueNd.Name = newColValueNd.Text;
            newColValueNd.Tag = "#" + nRowNum + "," + nColNum; // 记录行列信息
            newColValueNd.ForeColor = Color.Green;

            selNode.Nodes.Add(newColValueNd);
            newColValueNd.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, selNode.FullPath, newColValueNd);

            return;
        }


        // support: 
        // file full path (file name + directory name)
        // file short name (only file name)
        // full path( except file name)
        // belong directory name(short)
        // user input
        // 
        private void btnFillGatherAddTagNameValue_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null || selNode.Level < 1)
            {
                MessageBox.Show("请选择所属的表");
                return;
            }

            TreeNode tableNode = selNode;

            while (tableNode.Level > 1)
            {
                tableNode = tableNode.Parent;
            }

            // show dialog
            // 
            String strTagValue = "", strTag = "";
            frmFillGatherTag frmTagDialog = new frmFillGatherTag();

            DialogResult tagRes = frmTagDialog.ShowDialog();
            // Tag选择项
            if (tagRes == DialogResult.OK)
            {
                if (frmTagDialog.m_bTagFullPath)
                {
                    strTag = "FULLPATH";
                    strTagValue = "文件全名（带目录)";
                }
                else if (frmTagDialog.m_bTagShortFileName)
                {
                    strTag = "SHORTNAME";
                    strTagValue = "文件名（带目录)";
                }
                else if(frmTagDialog.m_bTagShortFileNameNoExt)
                {
                    strTag = "SHORTNAME_NOEXT";
                    strTagValue = "文件名（无后缀，不带目录)";
                }
                else if (frmTagDialog.m_bTagOnlyDirectory)
                {
                    strTag = "ONLYDIR";
                    strTagValue = "仅目录";
                }
                else if (frmTagDialog.m_bTagSelfFill)
                {
                    if (frmTagDialog.m_strSelfFillTxt.Equals(""))
                    {
                        MessageBox.Show("自填内容不能为空");
                        return;
                    }

                    strTag = "SELFFILL" + ":" + frmTagDialog.m_strSelfFillTxt;
                    strTagValue = "自填内容" + ":" + frmTagDialog.m_strSelfFillTxt;

                }
                else if (frmTagDialog.m_bTagTableSn)
                {
                    strTag = "TABLESN";
                    strTagValue = "表序号";
                }
                else if(frmTagDialog.m_bTagAbsPageNum)
                {
                    strTag = "ABSPAGENUM";
                    strTagValue = "绝对页码";
                }
                else 
                {
                    
                }

            }
            else
            {
                return;
            }

            // build unique tag name
            // 
            // int nIndex = 1;
            String strTagName = "标识：" + strTagValue;// "标识" + nIndex;

            TreeNode[] fndRes = tableNode.Nodes.Find(strTagName, false);

            if (fndRes.GetLength(0) > 0)
            {
                // nIndex++;
                // strTagName = "标识" + nIndex;
                // fndRes = tableNode.Nodes.Find(strTagName, false);

                MessageBox.Show("已有同名标识");
                return;
            }
            // 添加节点
            TreeNode newTagValueNd = new TreeNode(strTagValue);
            newTagValueNd.Name = newTagValueNd.Text;
            newTagValueNd.Tag = "=TagValue" + "," + strTag;
            newTagValueNd.ForeColor = Color.Blue;

            TreeNode newColTagNd = new TreeNode(strTagName);
            newColTagNd.Name = newColTagNd.Text;
            newColTagNd.Tag = "=TagName" + "," + strTag;
            newColTagNd.ForeColor = Color.Blue;

            newColTagNd.Nodes.Add(newTagValueNd); // 添加节点

            tableNode.Nodes.Add(newColTagNd); // 添加节点
            newColTagNd.ExpandAll();
            newColTagNd.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, tableNode.FullPath, newColTagNd);

            return;
        }


        private void btnFillGatherRemoveTblItem_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选择要删除的节点");
                return;
            }

            DialogResult res = MessageBox.Show("删除后不能恢复，确认删除？","确认",MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            if (selNode.Level == 3) // 第3层节点
            {
                if (selNode.Tag != null)
                {
                    String strTag = (String)selNode.Tag;
                    if (strTag.StartsWith("=Tag"))
                    {
                        // SYNC
                        m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 3, selNode.Parent.FullPath);

                        selNode.Parent.Remove(); // 父节点删除

                    }
                    else
                    {
                        // SYNC
                        m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 3, selNode.FullPath);

                        selNode.Remove(); // 当前节点删除
                    }
                }
            }
            else
            {
                // SYNC
                m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 3, selNode.FullPath);

                selNode.Remove();  // 当前节点删除
            }

            return;
        }



        private void btnFillGatherVerifyMatch_Click(object sender, EventArgs e)
        {
            // choose node of any table
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null || selNode.Level < 1)
            {
                MessageBox.Show("请选择所属的表");
                return;
            }

            TreeNode tableNode = selNode;

            while (tableNode.Level > 1)
            {
                tableNode = tableNode.Parent;
            }


            // sel in cur doc table
            String strSelTblTopoKey = (String)tableNode.Tag;

            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在文档表格范围内");
                return;
            }

            Word.Table curTable = null;
            curTable = sel.Tables[1];

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            // compare table topo key
            String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable);

            if (!strSelTblTopoKey.Equals(strTblTopoKey))
            {
                // if not match, ask if find matched table in current doc
                DialogResult res = MessageBox.Show("不匹配，是否寻找匹配表格？","确认",MessageBoxButtons.YesNo);
                if(res == DialogResult.No)
                {
                    return;
                }

                curTable = null;
                foreach (Word.Table tbl in doc.Tables) // 遍历
                {
                    strTblTopoKey = m_addin.m_commTools.genTableTopoKey(tbl); // 提取表格key

                    if (strSelTblTopoKey.Equals(strTblTopoKey)) // 相等
                    {
                        curTable = tbl;
                        break;
                    }
                }

                if (curTable != null) // 跳转
                {
                    curTable.Select();
                    curTable.Range.GoTo();
                    doc.ActiveWindow.ScrollIntoView(curTable.Range);
                }
                else
                {
                    MessageBox.Show("没有匹配表");
                }

            }
            else
            {
                MessageBox.Show("匹配");
            }

            return;
        }

        private void btnFillGatherViewLog_Click(object sender, EventArgs e)
        {
            // open log file with notepad
            String strLogFile = "";

            if (File.Exists(strLogFile))
            {
                System.Diagnostics.Process.Start(strLogFile); // 启动记事本打开
            }
            return;
        }

        /// <summary>
        /// 填报汇总产生
        /// </summary>
        /// <param name="arrSchemeTbls"></param>
        /// <param name="docTbls"></param>
        /// <param name="bValuesExist"></param>
        /// <param name="strFullName"></param>
        /// <param name="bStrictMatchColName"></param>
        /// <param name="ds2Excel"></param>
        /// <param name="nMaxCnt"></param>
        /// <returns></returns>
        private int FillGatherProduce(ArrayList arrSchemeTbls, ArrayList docTbls,
                                      Boolean bValuesExist, String strFullName,
                                      Boolean bStrictMatchColName, ref DataSet ds2Excel,
                                      int nMaxCnt = -1)
        {
//             Word.Document doc = m_addin.Application.ActiveDocument;
//             Word.Selection sel = doc.ActiveWindow.Selection;
//             Word.Tables tbls = null;
//             if (rdBtnFillGatherAllDocScope.Checked)
//             {
//                 tbls = doc.Tables;
//             }
//             else
//             {
//                 tbls = sel.Tables;
//             }

            String strTblTopoKey = "", strTopoKey = "";
            Boolean bValidTable = true;
            int nRowNum = -1, nColNum = -1;
            String strTag = "";
            String strRowCol = "", strCellText = "";
            Word.Cell cellItem = null;
            DataRow rw = null;
            int nTableIndex = 0;
            Hashtable hashAllowProduceCnt = new Hashtable();
            int nCurTableProduceCnt = 0;

            foreach (Word.Table tblItem in docTbls)
            {
                nTableIndex++;

                strTblTopoKey = m_addin.m_commTools.genTableTopoKey(tblItem); // 提取表格topo key

                if (strTblTopoKey.Equals(""))
                    continue;

                // 
                foreach (TreeNode tblNode in arrSchemeTbls) // 遍历
                {
                    strTopoKey = (String)tblNode.Tag;

                    if (!strTblTopoKey.Equals(strTopoKey))
                        continue;

                    // if (chkBoxFillGatherStrictMatchColName.Checked)
                    if (bStrictMatchColName) // 匹配列名
                    {
                        bValidTable = true;

                        foreach (TreeNode colNameNd in tblNode.Nodes) // 遍历
                        {
                            strTag = (String)colNameNd.Tag;

                            if (strTag.StartsWith("$")) // 列名
                            {
                                strRowCol = strTag.Substring(1);

                                String[] strRowColNum = strRowCol.Split(',');

                                if (!int.TryParse(strRowColNum[0], out nRowNum))
                                {
                                    continue;
                                }

                                if (!int.TryParse(strRowColNum[1], out nColNum))
                                {
                                    continue;
                                }

                                if (nRowNum <= tblItem.Rows.Count && nColNum <= tblItem.Columns.Count)
                                {
                                    cellItem = tblItem.Cell(nRowNum, nColNum); // 取单元

                                    // rw = m_tbl2ExcelDataSet.Tables[0].NewRow();
                                    strCellText = cellItem.Range.Text.Trim(m_trimChars);

                                    if (strCellText.Equals(""))
                                    {
                                        // not check ??
                                    }
                                    else
                                    {
                                        if (!strCellText.Equals(colNameNd.Name)) // 不等
                                        {
                                            bValidTable = false;
                                        }
                                    }
                                }
                                else
                                {
                                    bValidTable = false;
                                }

                            }
                            else if (strTag.StartsWith("@"))
                            {

                            }
                            else if (strTag.StartsWith("="))
                            {

                            }
                        }

                        if (!bValidTable)
                        {
                            continue;
                        }

                    }//


                    if (ds2Excel.Tables.IndexOf(tblNode.Name) != -1)
                    {

                    }
                    else
                    {
                        ds2Excel.Tables.Add(tblNode.Name); // 加表名
                    }


                    if (bValuesExist)
                    {
                        rw = ds2Excel.Tables[tblNode.Name].NewRow(); // 新建行记录
                        rw.BeginEdit();
                    }

                    // get value of table to fill in data table
                    foreach (TreeNode colNameNd in tblNode.Nodes) // 遍历
                    {
                        if (ds2Excel.Tables[tblNode.Name].Columns.IndexOf(colNameNd.Name) != -1)
                        {

                        }
                        else
                        {
                            ds2Excel.Tables[tblNode.Name].Columns.Add(colNameNd.Name); // 加入 
                        }

                        foreach (TreeNode colValueNd in colNameNd.Nodes)
                        {
                            strTag = (String)colValueNd.Tag;

                            if (strTag.StartsWith("#")) // 值节点
                            {
                                strRowCol = strTag.Substring(1);

                                String[] strRowColNum = strRowCol.Split(',');

                                if (!int.TryParse(strRowColNum[0], out nRowNum))
                                {
                                    continue;
                                }

                                if (!int.TryParse(strRowColNum[1], out nColNum))
                                {
                                    continue;
                                }

                                if (nRowNum <= tblItem.Rows.Count && nColNum <= tblItem.Columns.Count)
                                {
                                    try
                                    {
                                        cellItem = tblItem.Cell(nRowNum, nColNum); // 取值
                                    }
                                    catch (System.Exception ex)
                                    {
                                        continue;
                                    }

                                    // rw = m_tbl2ExcelDataSet.Tables[0].NewRow();
                                    if (cellItem.Range.Paragraphs.Count > 1) // 段落数大于1
                                    {
                                        strCellText = cellItem.Range.Text.Replace("\r\a", "\r\n");//.Trim(m_trimChars); 转换
                                    }
                                    else
                                    {
                                        strCellText = cellItem.Range.Text.Replace("\r\a", "");//.Trim(m_trimChars); 转换
                                    }

                                    if (bValuesExist)
                                    {
                                        rw[colNameNd.Name] = strCellText; // 记录值
                                    }
                                }
                            }
                            else if (strTag.StartsWith("=")) // tag标识
                            {
                                String strTagType = "";
                                String[] strTagTypes = strTag.Split(',');
                                String strTagValue = "";

                                if (strTagTypes.GetLength(0) != 2)
                                {
                                    continue;
                                }

                                strTagType = strTagTypes[1];

                                if (strTagType.Equals("FULLPATH")) // 不同类型提取不同数据加入行，下同
                                {
                                    strTagValue = strFullName;// doc.FullName;
                                }
                                else if (strTagType.Equals("SHORTNAME"))
                                {
                                    strTagValue = Path.GetFileName(strFullName);
                                }
                                else if (strTagType.Equals("SHORTNAME_NOEXT"))
                                {
                                    strTagValue = Path.GetFileNameWithoutExtension(strFullName);
                                }
                                else if (strTagType.Equals("ONLYDIR"))
                                {
                                    strTagValue = Path.GetDirectoryName(strFullName);
                                }
                                else if (strTagType.Equals("TABLESN"))
                                {
                                    strTagValue = "" + nTableIndex;
                                }
                                else if (strTagType.Equals("ABSPAGENUM"))
                                {
                                    strTagValue = "" + tblItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                                }
                                else if (strTagType.StartsWith("SELFFILL"))
                                {
                                    String[] strs = strTagType.Split(':');

                                    if (strs.GetLength(0) != 2)
                                    {
                                        continue;
                                    }

                                    strTagValue = strs[1];
                                }
                                else
                                {
                                    
                                }

                                if (bValuesExist)
                                {
                                    rw[colNameNd.Name] = strTagValue; // 记录到行
                                }
                            }
                        }// 
                    }

                    if (bValuesExist)
                    {
                        rw.EndEdit();
                        ds2Excel.Tables[tblNode.Name].Rows.Add(rw); // 加入到表
                    }

                    if (!hashAllowProduceCnt.Contains(tblNode.Name)) // 若不存在
                    {
                        hashAllowProduceCnt[tblNode.Name] = 1; // 增加
                    }
                    else
                    {
                        nCurTableProduceCnt = (int)hashAllowProduceCnt[tblNode.Name]; // 取值
                        nCurTableProduceCnt++; // 增加

                        if (nMaxCnt != -1 && nCurTableProduceCnt > nMaxCnt)
                        {
                            return 0;
                        }
                    }

                }

            }

            return 0;
        }


        private void btnFillGatherPreviewProduce_Click(object sender, EventArgs e)
        {
            // select scheme
            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选择需要应用的方案");
                return;
            }

            TreeNode schemeNode = selNode;

            while (schemeNode.Level > 0)
            {
                schemeNode = schemeNode.Parent;
            }

            if (schemeNode.Nodes.Count == 0)
            {
                MessageBox.Show("请建立表");
                return;
            }

            if (rdBtnFillGatherMultiFiles.Checked)
            {
                // check selected target files
                if (chkListBoxTargetFiles.CheckedItems.Count == 0)
                {
                    MessageBox.Show("至少选择一个目标文档");
                    return;
                }
            }

            DataSet ds2Excel = new DataSet();
            Boolean bValuesExist = false;

            // build hash key: table topo key, value: node
            ArrayList arrSchemeTbls = new ArrayList();
            foreach (TreeNode tblNd in schemeNode.Nodes) // 遍历
            {
                arrSchemeTbls.Add(tblNd);
                if (-1 != ds2Excel.Tables.IndexOf(tblNd.Name))
                {
                    DataTable dsTbl = ds2Excel.Tables[tblNd.Name]; // 取数据表
                    String strTag = "";
                    foreach(TreeNode colNd in tblNd.Nodes) // 遍历树节点
                    {
                        strTag = (String)colNd.Tag;

                        if (strTag.StartsWith("$")) // col name
                        {
                            dsTbl.Columns.Add(colNd.Name);
                        }
                        else if (strTag.StartsWith("=")) // tag name
                        {
                            dsTbl.Columns.Add(colNd.Name);
                        }

                        if (colNd.Nodes.Count > 0 && !bValuesExist) // 判断是否有值
                        {
                            bValuesExist = true;
                        }

                    }

                }
                else
                {
                    ds2Excel.Tables.Add(tblNd.Name); // 加入表名
                }
            }


            if (rdBtnFillGatherMultiFiles.Checked) // 匹配列名
            {
                Word.Document oDoc = null;
                Object objMissing = System.Reflection.Missing.Value;
                Object objReadOnly = true;
                Object objVisible = false;
                Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
                ArrayList docTbls = new ArrayList();

                String strTmpPath = Path.GetTempPath(); // 临时目录
                String strTmpFile = "", strPostx = "";

                foreach (String strDocFile in chkListBoxTargetFiles.CheckedItems) // 遍历选中的文档
                {
                    if (!File.Exists(strDocFile))
                    {
                        continue;
                    }
                    // 拼装临时文件名
                    strPostx = DateTime.Now.ToString("yyyyMMdd_Hhmmssffff");
                    strTmpFile = strTmpPath + Path.GetFileNameWithoutExtension(strDocFile) + "_" + strPostx + Path.GetExtension(strDocFile);

                    if (File.Exists(strTmpFile)) // 判断存在
                    {
                        File.Delete(strTmpFile);
                    }

                    File.Copy(strDocFile, strTmpFile);

                    // open
                    oDoc = m_addin.Application.Documents.Open(strTmpFile, objMissing, objReadOnly,
                                                              objMissing,objMissing,objMissing,
                                                              objMissing,objMissing,objMissing,
                                                              objMissing,objMissing,objVisible);
                    // handle
                    if (oDoc.Tables.Count == 0)
                    {
                        continue;
                    }

                    docTbls.Clear();

                    foreach (Word.Table docTblItem in oDoc.Tables) // 遍历表
                    {
                        docTbls.Add(docTblItem);
                    }
                    // 产生
                    FillGatherProduce(arrSchemeTbls, docTbls, bValuesExist, strDocFile,
                                      chkBoxFillGatherStrictMatchColName.Checked, ref ds2Excel, 2);

                    // close
                    m_addin.RemoveTaskPane(oDoc);
                    oDoc.Close(objSave);

                }

            }
            else
            {
                Word.Application app = Globals.ThisAddIn.Application;
                Word.Document doc = null;

                try
                {
                    doc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }


                Word.Selection sel = doc.ActiveWindow.Selection;
                Word.Tables tbls = null;

                if (rdBtnFillGatherAllDocScope.Checked) // 选择范围 
                {
                    tbls = doc.Tables;
                }
                else
                {
                    tbls = sel.Tables;
                }

                if(tbls.Count == 0)
                {
                    MessageBox.Show("当前文档中没有表格");
                    return;
                }

                ArrayList docTbls = new ArrayList();

                foreach(Word.Table docTblItem in tbls) // 遍历当前表格
                {
                    docTbls.Add(docTblItem); // 添加
                }
                // 产生
                FillGatherProduce(arrSchemeTbls, docTbls, bValuesExist, doc.FullName,
                                  chkBoxFillGatherStrictMatchColName.Checked, ref ds2Excel, 2);
            }
            
            SaveFileDialog svDialog = new SaveFileDialog();
            svDialog.Filter = "EXCEL files(*.xlsx)|*.xlsx";

            DialogResult result = svDialog.ShowDialog();

            String strSvFileName = "";

            if (result == DialogResult.OK)
            {
                //获得文件路径
                strSvFileName = svDialog.FileName.ToString();

                // dataset to excel
                DataSetToExcelSheet(ds2Excel, strSvFileName);

//                 sel.Start = oStart;
//                 sel.End = oEnd;
//                 sel.Range.GoTo();
//                 doc.ActiveWindow.ScrollIntoView(sel.Range);

                DialogResult res = MessageBox.Show("查看文件：" + strSvFileName + "?", "查看文件", MessageBoxButtons.YesNo);

                if(res == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start(strSvFileName); // 查看EXCEL表
                }

            }
            
            return;
        }

        private void btnFillGatherProduce_Click(object sender, EventArgs e)
        {
            // select scheme
            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选择需要应用的方案");
                return;
            }

            TreeNode schemeNode = selNode;

            while (schemeNode.Level > 0)
            {
                schemeNode = schemeNode.Parent;
            }

            if (schemeNode.Nodes.Count == 0)
            {
                MessageBox.Show("请建立表");
                return;
            }
            
            if (rdBtnFillGatherMultiFiles.Checked)
            {
                // check selected target files
                if (chkListBoxTargetFiles.CheckedItems.Count == 0)
                {
                    MessageBox.Show("至少选择一个目标文档");
                    return;
                }
            }

            DataSet ds2Excel = new DataSet();
            Boolean bValuesExist = false;

            // build hash key: table topo key, value: node
            ArrayList arrSchemeTbls = new ArrayList();
            foreach (TreeNode tblNd in schemeNode.Nodes) // 遍历节点
            {
                arrSchemeTbls.Add(tblNd); // 添加
                if (-1 != ds2Excel.Tables.IndexOf(tblNd.Name))
                {
                }
                else
                {
                    ds2Excel.Tables.Add(tblNd.Name); // 添加表名
                }


                DataTable dsTbl = ds2Excel.Tables[tblNd.Name]; // 取表对象
                String strTag = "";
                foreach (TreeNode colNd in tblNd.Nodes) // 遍历表下节点
                {
                    strTag = (String)colNd.Tag;

                    if (strTag.StartsWith("$")) // col name
                    {
                        dsTbl.Columns.Add(colNd.Name);
                    }
                    else if (strTag.StartsWith("@")) // fake col name
                    {
                        dsTbl.Columns.Add(colNd.Name);
                    }
                    else if (strTag.StartsWith("=")) // tag name
                    {
                        dsTbl.Columns.Add(colNd.Name);
                    }

                    if (colNd.Nodes.Count > 0)
                    {
                        bValuesExist = true; // 存在值
                    }

                }

            }


            if (rdBtnFillGatherMultiFiles.Checked) // 列名匹配
            {
                Word.Document oDoc = null;
                Object objMissing = System.Reflection.Missing.Value;
                Object objReadOnly = true;
                Object objVisible = false;
                Object objSave = Word.WdSaveOptions.wdDoNotSaveChanges;
                ArrayList docTbls = new ArrayList();

                String strTmpPath = Path.GetTempPath();
                String strTmpFile = "";
                String strPostx = "";

                // 进度条准备
                progBarFG.Left = txtFillGatherName.Left;
                progBarFG.Top = txtFillGatherName.Top;
                progBarFG.Height = txtFillGatherName.Height;
                progBarFG.Width = txtFillGatherName.Width;

                progBarFG.Value = 0;
                progBarFG.Maximum = chkListBoxTargetFiles.CheckedItems.Count;
                progBarFG.Visible = true;


                foreach (String strDocFile in chkListBoxTargetFiles.CheckedItems) // 选中的文件
                {
                    if (!File.Exists(strDocFile))
                    {
                        continue;
                    }
                    // 临时文件名
                    strPostx = DateTime.Now.ToString("yyyyMMdd_Hhmmssffff");
                    strTmpFile = strTmpPath + Path.GetFileNameWithoutExtension(strDocFile) + "_" + strPostx + Path.GetExtension(strDocFile);

                    if (File.Exists(strTmpFile))
                    {
                        try
                        {
                            File.Delete(strTmpFile);
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show("删除临时文件："+strTmpFile+"出错，请确保是否被占用。"+ex.Message,"错误");
                            continue;
                        }
                        finally
                        {
                        }
                    }

                    File.Copy(strDocFile, strTmpFile);


                    // open
                    oDoc = m_addin.Application.Documents.Open(strTmpFile, objMissing, objReadOnly,
                                                              objMissing, objMissing, objMissing,
                                                              objMissing, objMissing, objMissing,
                                                              objMissing, objMissing, objVisible);
                    // handle
                    if (oDoc.Tables.Count == 0)
                    {
                        continue;
                    }

                    docTbls.Clear();

                    foreach (Word.Table docTblItem in oDoc.Tables) // 遍历
                    {
                        docTbls.Add(docTblItem); // 添加
                    }
                    // 产生
                    FillGatherProduce(arrSchemeTbls, docTbls, bValuesExist, strDocFile,
                                      chkBoxFillGatherStrictMatchColName.Checked, ref ds2Excel, 2);

                    // close
                    m_addin.RemoveTaskPane(oDoc);
                    oDoc.Close(objSave);

                    progBarFG.Value++;
                }

                progBarFG.Visible = false;
            }
            else
            {
                Word.Application app = Globals.ThisAddIn.Application;
                Word.Document doc = null;

                try
                {
                    doc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

                Word.Selection sel = doc.ActiveWindow.Selection;
                Word.Tables tbls = null;

                if (rdBtnFillGatherAllDocScope.Checked)
                {
                    tbls = doc.Tables;
                }
                else
                {
                    tbls = sel.Tables;
                }

                if (tbls.Count == 0)
                {
                    MessageBox.Show("当前文档中没有表格");
                    return;
                }

                ArrayList docTbls = new ArrayList();

                foreach (Word.Table docTblItem in tbls)
                {
                    docTbls.Add(docTblItem);
                }

                progBarFG.Left = txtFillGatherName.Left;
                progBarFG.Top = txtFillGatherName.Top;
                progBarFG.Height = txtFillGatherName.Height;
                progBarFG.Width = txtFillGatherName.Width;

                progBarFG.Value = 0;
                progBarFG.Maximum = 1;
                progBarFG.Visible = true;

                FillGatherProduce(arrSchemeTbls, docTbls, bValuesExist, doc.FullName,
                                  chkBoxFillGatherStrictMatchColName.Checked, ref ds2Excel, 2);

                progBarFG.Value++;
                progBarFG.Visible = false;
            }

            SaveFileDialog svDialog = new SaveFileDialog();
            svDialog.Filter = "EXCEL files(*.xlsx)|*.xlsx";

            DialogResult result = svDialog.ShowDialog();

            String strSvFileName = "";

            if (result == DialogResult.OK)
            {
                //获得文件路径
                strSvFileName = svDialog.FileName.ToString();

                // dataset to excel
                DataSetToExcelSheet(ds2Excel, strSvFileName);

                //                 sel.Start = oStart;
                //                 sel.End = oEnd;
                //                 sel.Range.GoTo();
                //                 doc.ActiveWindow.ScrollIntoView(sel.Range);

                DialogResult res = MessageBox.Show("查看文件：" + strSvFileName + "?", "查看文件", MessageBoxButtons.YesNo);

                if (res == DialogResult.Yes)
                {
                    System.Diagnostics.Process.Start(strSvFileName);
                }

            }

            return;
        }


        // save to xml
        private int FillGatherSchemesSave2Xml(TreeView nds, String strXmlFile)
        {
            // node name / node tag

            TreeExXMLCls xmler = new TreeExXMLCls();

            xmler.TreeToXML(nds, strXmlFile); // write to xml

            return 0;
        }


        private void FillGatherTransNodes(TreeNode subtrnod)
        {
            String strTxt = (String)subtrnod.Tag;

            if (strTxt != null)
            {
                subtrnod.Name = subtrnod.Text; // 取值

                if (strTxt.StartsWith("$")) // 类型判断
                {
                    int nIndex = subtrnod.Text.LastIndexOf('['); // 取序值

                    if (nIndex != -1)
                    {
                        subtrnod.Name = subtrnod.Text.Substring(0, nIndex); // 取名称
                    }

                    // col name
                    subtrnod.ForeColor = Color.Red; // 颜色区分
                }
                else if (strTxt.StartsWith("#")) // 类型判断
                {
                    // col value
                    subtrnod.ForeColor = Color.Green; // 颜色区分
                }
                else if (strTxt.StartsWith("=")) // 类型判断
                {
                    // tag
                    subtrnod.ForeColor = Color.Blue; // 颜色区分
                }
                else if (strTxt.StartsWith("@")) // 类型判断
                {
                    int nIndex = subtrnod.Text.LastIndexOf('[');// 取名称

                    if (nIndex != -1)
                    {
                        subtrnod.Name = subtrnod.Text.Substring(0, nIndex);// 取名称
                    }

                    // tag
                    subtrnod.ForeColor = Color.DarkGray; // 颜色区分
                }
                else
                {
                    
                }
            }

            foreach (TreeNode childNd in subtrnod.Nodes) // 遍历
            {
                FillGatherTransNodes(childNd); // 转换
            }

            return;
        }

        // load from xml
        private TreeNode FillGatherXml2SchemeNodes(String strXmlFile,TreeView nds)
        {
            TreeNode nd = new TreeNode();

            TreeExXMLCls xmler = new TreeExXMLCls();

            xmler.XMLToTree(strXmlFile, nds); // 读取XML到treenode

            foreach (TreeNode subnd in nds.Nodes) // 遍历
            {
                FillGatherTransNodes(subnd); // 转换
            }

            return nd;
        }

        /// <summary>
        /// 同步各个Tree
        /// </summary>
        /// <param name="strUiType"></param>
        /// <param name="nOpType"></param>
        /// <param name="strPath"></param>
        /// <param name="newNode"></param>
        /// <returns></returns>
        public int SyncOperationPanelTreeUI(String strUiType, int nOpType, String strPath, TreeNode newNode = null)
        {
            int nRet = 0;

            TreeView trvTarget = null;

            if (strUiType.Equals("填报汇总"))
            {
                trvTarget = trvFillGatherSchemes; // 不同的TreeView
            }
            else if (strUiType.Equals("文库"))
            {
                trvTarget = tvShareLib; // 不同的TreeView
            }
            else if (strUiType.Equals("章节序号"))
            {
                trvTarget = trvHeadingSnScheme; // 不同的TreeView
            }
            else if (strUiType.Equals("章节样式"))
            {
                trvTarget = trvHeadingStyleScheme; // 不同的TreeView
            }
            else
            {
                return -1;
            }

            TreeNode fndNode = null;
            int nDepth = 0;
            foreach (TreeNode childNd in trvTarget.Nodes) // 遍历
            {
                fndNode = m_addin.m_commTools.locateNode(childNd, strPath, ref nDepth); // 定位
                if (fndNode != null)
                {
                    break;
                }
            }

            if (!strPath.Equals("")) // 若为空
            {
                if (fndNode == null)
                {
                    return -1;
                }
            }
            else
            {
                
            }


            switch (nOpType) // 操作类型
            {
                case 1: // add
                    if (strPath.Equals("")) // 若空
                    {
                        if (newNode != null)
                        {
                            trvTarget.Nodes.Add((TreeNode)newNode.Clone()); // 新增
                        }
                        else
                        {
                            return -1;
                        }
                    }
                    else
                    {
                        if (newNode != null)
                        {
                            fndNode.Nodes.Add((TreeNode)newNode.Clone()); // 新增
                        }
                        else
                        {
                            return -1;
                        }
                    }
                    break;

                case 2: // update

                    fndNode.Name = newNode.Name; // 更新值
                    fndNode.Text = newNode.Text;
                    fndNode.Tag = newNode.Tag;
                    fndNode.ForeColor = newNode.ForeColor;
                    fndNode.BackColor = newNode.BackColor;
                    fndNode.ImageIndex = newNode.ImageIndex;
                    fndNode.SelectedImageIndex = newNode.SelectedImageIndex;

                    break;

                case 3: // delete
                    fndNode.Remove(); // 删除
                    break;

                default:
                    break;
            }


            return nRet;
        }


        private void btnFillGatherAddUserDefineColName_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null || selNode.Level < 1)
            {
                MessageBox.Show("请选择所属的表");
                return;
            }

            TreeNode tableNode = selNode;

            while (tableNode.Level > 1)
            {
                tableNode = tableNode.Parent; // 向上取父节点表节点
            }


//             String strSelTblTopoKey = (String)tableNode.Tag;
// 
//             Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);
// 
//             if (!bInTbl)
//             {
//                 MessageBox.Show("请将光标定位在文档表格的列名区");
//                 return;
//             }
// 
//             Word.Table curTable = null;
//             curTable = sel.Tables[1];
// 
//             if (curTable == null)
//             {
//                 MessageBox.Show("NEVER SEE IT");
//                 return;
//             }
// 
//             String strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable);
// 
//             if (!strSelTblTopoKey.Equals(strTblTopoKey))
//             {
//                 MessageBox.Show("请在同结构表中选择列名进行添加");
//                 return;
//             }
// 
//             // get col name
//             int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
//             int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);
// 
//             int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
//             int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);
// 
//             if (nRowNum2 != nRowNum || nColNum2 != nColNum)
//             {
//                 MessageBox.Show("请不要在表格中跨列或行进行选择");
//                 return;
//             }
// 
//             Word.Cell cel = null;
// 
//             try
//             {
//                 cel = curTable.Cell(nRowNum, nColNum);
//             }
//             catch (System.Exception ex)
//             {
//                 MessageBox.Show(ex.Message);
//                 return;
//             }
// 
//             Boolean bFakeColName = false;
//             String strColName = cel.Range.Text.Trim(m_trimChars);

            //             if (strSelText.Length > 10)
            //             {
            //                 strSelText = strSelText.Substring(0, 10);
            //                 strSelText += "...";
            //             }

            String strColName = "";

            if (txtFillGatherName.Text.Trim(m_trimChars).Equals(""))
            {
                MessageBox.Show("请输入名称");
                txtFillGatherName.Focus();
                return;
            }

            strColName = txtFillGatherName.Text; // 列名


            // find same name
            TreeNode[] fndRes = tableNode.Nodes.Find(strColName, false);

            if (fndRes.GetLength(0) > 0)
            {
                MessageBox.Show("存在同名");
                return;
            }

            TreeNode newColNameNd = new TreeNode(strColName + "[虚拟列]"); // 新建节点

            newColNameNd.Name = strColName;// newColNameNd.Text;

            newColNameNd.Tag = "@" + "虚拟列";
            
            newColNameNd.ForeColor = Color.DarkGray; // 颜色区分

            tableNode.Nodes.Add(newColNameNd); // 添加
            newColNameNd.EnsureVisible();

            // SYNC
            m_addin.SyncOperationPanelTreeUI(m_curDoc, "填报汇总", 1, tableNode.FullPath, newColNameNd);

            return;
        }

        private void btnFillGatherShowRowCol_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			

            Word.Selection sel = curDoc.ActiveWindow.Selection;

            Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

            if (!bInTbl)
            {
                MessageBox.Show("请将光标定位在文档表格单元区");
                return;
            }

            Word.Table curTable = null;
            curTable = sel.Tables[1]; // 表

            if (curTable == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            // get col name
            int nRowNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeRowNumber);
            int nColNum = sel.Range.get_Information(Word.WdInformation.wdStartOfRangeColumnNumber);

            int nRowNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeRowNumber);
            int nColNum2 = sel.Range.get_Information(Word.WdInformation.wdEndOfRangeColumnNumber);

//             if (nRowNum2 != nRowNum || nColNum2 != nColNum)
//             {
//                 MessageBox.Show("请不要在表格中跨列或行进行选择");
//                 return;
//             }

            MessageBox.Show("当前表格单元坐标：[行，列]：" + nRowNum + "," + nColNum);

//             Word.Cell cel = null;
// 
//             try
//             {
//                 cel = curTable.Cell(nRowNum, nColNum);
//             }
//             catch (System.Exception ex)
//             {
//                 MessageBox.Show(ex.Message);
//                 return;
//             }
            
            return;
        }

        // 上移树节点
        private void TreeNodeMoveUp(TreeNode selNode, TreeView trv)
        {
            TreeNode Node = selNode;
            TreeNode PrevNode = Node.PrevNode;
            if (PrevNode != null)
            {
                TreeNode NewNode = (TreeNode)Node.Clone(); // 复制
                if (Node.Parent == null)
                {
                    trv.Nodes.Insert(PrevNode.Index, NewNode); // 插入
                }
                else
                {
                    Node.Parent.Nodes.Insert(PrevNode.Index, NewNode); // 插入
                }
                Node.Remove(); // 删除
                trv.SelectedNode = NewNode; // 设置为当前选择项
            }

            return;
        }

        // 下移树节点
        private void TreeNodeMoveDown(TreeNode selNode, TreeView trv)
        {
            TreeNode Node = selNode;
            TreeNode NextNode = Node.NextNode;
            if (NextNode != null)
            {
                TreeNode NewNode = (TreeNode)Node.Clone(); // 复制
                if (Node.Parent == null)
                {
                    trv.Nodes.Insert(NextNode.Index + 1, NewNode); // 插入
                }
                else
                {
                    Node.Parent.Nodes.Insert(NextNode.Index + 1, NewNode); // 插入
                }
                Node.Remove(); // 删除
                trv.SelectedNode = NewNode; // 设置当前选择节点
            }

            return;
        }

        // 上移节点
        private void btnFillGatherMoveUp_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中某个树节点");
                return;
            }

            TreeNodeMoveUp(selNode, trvFillGatherSchemes); // 上移节点

            return;
        }

        // 下移节点
        private void btnFillGatherMoveDown_Click(object sender, EventArgs e)
        {
            TreeNode selNode = trvFillGatherSchemes.SelectedNode;

            if (selNode == null)
            {
                MessageBox.Show("请选中某个树节点");
                return;
            }

            TreeNodeMoveDown(selNode, trvFillGatherSchemes); // 下移节点

            return;
        }

        private void trvFillGatherSchemes_AfterSelect(object sender, TreeViewEventArgs e)
        {
            txtFillGatherName.Text = e.Node.Text; // 更新当前节点的文本信息
            return;
        }

        // check change
        private void chkBoxMultiSelRowsScope_CheckedChanged(object sender, EventArgs e)
        {
            Boolean bEn = chkBoxMultiSelRowsScope.Checked; // check status

            numMultiSelRowStart.Enabled = bEn; // same value
            numMultiSelRowEnd.Enabled = bEn; // same value

            numMultiSelRowStart.ReadOnly = !bEn; // not value
            numMultiSelRowEnd.ReadOnly = !bEn; // not value

            return;
        }

        // check change
        private void chkBoxMultiSelColumnsScope_CheckedChanged(object sender, EventArgs e)
        {
            Boolean bEn = chkBoxMultiSelColumnsScope.Checked; // check status

            numMultiSelColStart.Enabled = bEn; // same value
            numMultiSelColEnd.Enabled = bEn; // same value

            numMultiSelColStart.ReadOnly = !bEn; // not value
            numMultiSelColEnd.ReadOnly = !bEn; // not value

            return;
        }

        private void trvFillGatherSchemes_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                Word.Application app = Globals.ThisAddIn.Application;
                Word.Document doc = null;

                try
                {
                    doc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }

                Word.Selection sel = doc.ActiveWindow.Selection;
                Word.Table curTable = null, matchedTable = null;

                String strTblTopoKey = "";
                String strSelNodeTblTopoKey = "";

                if (e.Node.Level == 1) // table
                {
                    strSelNodeTblTopoKey = (String)e.Node.Tag;
                }
                else if (e.Node.Level == 2)
                {
                    strSelNodeTblTopoKey = (String)e.Node.Parent.Tag;
                }
                else if (e.Node.Level == 3)
                {
                    strSelNodeTblTopoKey = (String)e.Node.Parent.Parent.Tag;
                }
                else
                {
                    return;
                }


                Boolean bInTbl = sel.Range.get_Information(Word.WdInformation.wdWithInTable);

                if (bInTbl)
                {
                    curTable = sel.Tables[1]; // 表
                }
                else
                {
                }
                // prior to handle current table in selection

                // otherwise, search tables in current document

                // if table, multi select all cells in table

                // if cell, select it
                

                if (curTable != null)
                {
                    strTblTopoKey = m_addin.m_commTools.genTableTopoKey(curTable);

                    if (strTblTopoKey.Equals(strSelNodeTblTopoKey))
                    {
                        matchedTable = curTable;
                    }
                }

                if (matchedTable == null)
                {
                    Word.Tables targetTbls = doc.Tables;

                    if (sel.Tables.Count > 0)
                    {
                        targetTbls = sel.Tables;
                    }

                    foreach (Word.Table tbl in targetTbls)
                    {
                        strTblTopoKey = m_addin.m_commTools.genTableTopoKey(tbl);

                        if (strTblTopoKey.Equals(strSelNodeTblTopoKey))
                        {
                            matchedTable = tbl;
                            break;
                        }
                    }
                }


                if (matchedTable == null)
                {
                    MessageBox.Show("没有匹配的表格");
                    return;
                }

                ArrayList arrCellInfo = new ArrayList();
                String strTmpTag = "", strRowCol = "";

                if (e.Node.Level == 1) // table
                {
                    strSelNodeTblTopoKey = (String)e.Node.Tag;

                    // search child node and record row/col num
                    foreach (TreeNode l2nd in e.Node.Nodes)
                    {
                        strTmpTag = (String)l2nd.Tag;

                        if (!String.IsNullOrWhiteSpace(strTmpTag))
                        {
                            if (strTmpTag.StartsWith("@"))
                            {
                                if (strTmpTag.IndexOf(',') != -1)
                                {
                                    strRowCol = strTmpTag.Substring(1);
                                    arrCellInfo.Add(strRowCol);
                                }
                            }
                            else if (strTmpTag.StartsWith("$"))
                            {
                                if (strTmpTag.IndexOf(',') != -1)
                                {
                                    strRowCol = strTmpTag.Substring(1);
                                    arrCellInfo.Add(strRowCol);
                                }
                            }
                            else // if (strTmpTag.StartsWith("="))
                            {

                            }
                        }

                        foreach (TreeNode l3nd in l2nd.Nodes)
                        {
                            strTmpTag = (String)l3nd.Tag;

                            if (!String.IsNullOrWhiteSpace(strTmpTag))
                            {
                                if (strTmpTag.StartsWith("#"))
                                {
                                    if (strTmpTag.IndexOf(',') != -1)
                                    {
                                        strRowCol = strTmpTag.Substring(1);
                                        arrCellInfo.Add(strRowCol);
                                    }
                                }
                                /*
                                else if (strTmpTag.StartsWith("="))
                                {

                                }
                                 */
                                else
                                {

                                }
                            }
                        }
                    }

                }
                else if (e.Node.Level == 2)
                {
                    strSelNodeTblTopoKey = (String)e.Node.Parent.Tag;

                    strTmpTag = (String)e.Node.Tag;

                    if (!String.IsNullOrWhiteSpace(strTmpTag))
                    {
                        if (strTmpTag.StartsWith("@"))
                        {
                            if (strTmpTag.IndexOf(',') != -1)
                            {
                                strRowCol = strTmpTag.Substring(1);
                                arrCellInfo.Add(strRowCol);
                            }
                        }
                        else if (strTmpTag.StartsWith("$"))
                        {
                            if (strTmpTag.IndexOf(',') != -1)
                            {
                                strRowCol = strTmpTag.Substring(1);
                                arrCellInfo.Add(strRowCol);
                            }
                        }
                        else // if (strTmpTag.StartsWith("="))
                        {

                        }
                    }

                    foreach (TreeNode l3nd in e.Node.Nodes)
                    {
                        strTmpTag = (String)l3nd.Tag;

                        if (!String.IsNullOrWhiteSpace(strTmpTag))
                        {
                            if (strTmpTag.StartsWith("#"))
                            {
                                if (strTmpTag.IndexOf(',') != -1)
                                {
                                    strRowCol = strTmpTag.Substring(1);
                                    arrCellInfo.Add(strRowCol);
                                }
                            }
                            /*
                            else if (strTmpTag.StartsWith("="))
                            {

                            }
                                */
                            else
                            {

                            }
                        }
                    }
                }
                else if (e.Node.Level == 3)
                {
                    strSelNodeTblTopoKey = (String)e.Node.Parent.Parent.Tag;

                    strTmpTag = (String)e.Node.Tag;

                    if (!String.IsNullOrWhiteSpace(strTmpTag))
                    {
                        if (strTmpTag.StartsWith("#"))
                        {
                            if (strTmpTag.IndexOf(',') != -1)
                            {
                                strRowCol = strTmpTag.Substring(1);
                                arrCellInfo.Add(strRowCol);
                            }
                        }
                        /*
                        else if (strTmpTag.StartsWith("@"))
                        {
                            if (strTmpTag.IndexOf(',') != -1)
                            {
                                strRowCol = strTmpTag.Substring(1);
                                arrCellInfo.Add(strRowCol);
                            }
                        }
                        else if (strTmpTag.StartsWith("$"))
                        {
                            if (strTmpTag.IndexOf(',') != -1)
                            {
                                strRowCol = strTmpTag.Substring(1);
                                arrCellInfo.Add(strRowCol);
                            }
                        }*/
                        else // if (strTmpTag.StartsWith("="))
                        {

                        }
                    }
                }
                else
                {
                    return;
                }

                int nRow = 0, nCol = 0;

                if (arrCellInfo.Count > 0)
                {
                    foreach (String strValRowCol in arrCellInfo)
                    {
                        String[] strs = strValRowCol.Split(',');

                        if (int.TryParse(strs[0], out nRow) && int.TryParse(strs[1], out nCol))
                        {
                            try
                            {
	                            Word.Cell cel = matchedTable.Cell(nRow, nCol);
	                            if (cel != null)
	                            {
	                                m_addin.m_commTools.RecordMultiSel(cel.Range);
	                            }
                            }
                            catch (System.Exception ex)
                            {
                                continue;
                            }
                            finally
                            {
                            }
                        }

                    }

                    m_addin.m_commTools.ExecMultiSel(doc);
                    // 
                    doc.ActiveWindow.ScrollIntoView(matchedTable);
                }


            }

            return;
        }

        private void tabPageMultiTiZhu_Enter(object sender, EventArgs e)
        {
            if (!m_bInitedMultiTiZhuPage)
            {
                // 
                Word.Application app = Globals.ThisAddIn.Application;
                Word.Document curDoc = null;

                try
                {
                    curDoc = app.ActiveDocument;
                }
                catch (System.Exception ex)
                {
                    MessageBox.Show("无活动文档，不能应用");
                    return;
                }
                finally
                {
                }
			
                Word.Selection sel = curDoc.ActiveWindow.Selection;

                lstBoxCurSysCapLbls.Items.Clear();

                txtSelectedTblCapLbl.Text = "";
                txtSelectedInShpCapLbl.Text = "";


                Word.CaptionLabel tmpCapLbl = null;
                
                
                try
                {
                    tmpCapLbl = app.CaptionLabels["图"];
                }
                catch (System.Exception ex)
                {
                    app.CaptionLabels.Add("图");
                }

                if (tmpCapLbl == null)
                {
                    app.CaptionLabels.Add("图");
                }

                try
                {
                    tmpCapLbl = app.CaptionLabels["表"];
                }
                catch (System.Exception ex)
                {
                    app.CaptionLabels.Add("表");
                }

                if (tmpCapLbl == null)
                {
                    app.CaptionLabels.Add("表");
                }


                foreach(Word.CaptionLabel capLbl in app.CaptionLabels)
                {
                    lstBoxCurSysCapLbls.Items.Add(capLbl.Name);

                    if (String.IsNullOrWhiteSpace(txtSelectedTblCapLbl.Text) && capLbl.Name.Equals("表"))
                    {
                        txtSelectedTblCapLbl.Text = capLbl.Name;
                    }

                    if (String.IsNullOrWhiteSpace(txtSelectedInShpCapLbl.Text) && capLbl.Name.Equals("图"))
                    {
                        txtSelectedInShpCapLbl.Text = capLbl.Name;
                    }
                }

                txtTblCapLblPreFix.Text = "";
                txtTblCapLblPostFix.Text = "";
                chkTblCaplblGetFromHeading.Checked = false;

                txtInShpCapLblPreFix.Text = "";
                txtInShpCapLblPostFix.Text = "";
                chkInShpCaplblGetFromHeading.Checked = false;

                cmbTblCapLblPos.SelectedIndex = 1;
                cmbTblCapLblAlign.SelectedIndex = 0;

                cmbInShpCapLblPos.SelectedIndex = 1;
                cmbInShpCapLblAlign.SelectedIndex = 0;

                m_bInitedMultiTiZhuPage = true;
            }

            return;
        }

        private void btnRemoveSelTblCapLbl_Click(object sender, EventArgs e)
        {
            txtSelectedTblCapLbl.Text = "";
            return;
        }

        private void btnRemoveSelInShpCapLbl_Click(object sender, EventArgs e)
        {
            txtSelectedInShpCapLbl.Text = "";
            return;
        }

        private void btnAddSelTblCapLbl_Click(object sender, EventArgs e)
        {
            if (lstBoxCurSysCapLbls.SelectedIndex >= 0)
            {
                txtSelectedTblCapLbl.Text = (String)lstBoxCurSysCapLbls.SelectedItem;
            }
            else
            {
                MessageBox.Show("请选择一项题注");
            }

            return;
        }

        private void btnAddSelInShpCapLbl_Click(object sender, EventArgs e)
        {
            if (lstBoxCurSysCapLbls.SelectedIndex >= 0)
            {
                txtSelectedInShpCapLbl.Text = (String)lstBoxCurSysCapLbls.SelectedItem;
            }
            else
            {
                MessageBox.Show("请选择一项题注");
            }

            return;
        }

        private void btnRefreshCapsLbl_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document curDoc = null;

            try
            {
                curDoc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }
			
            Word.Selection sel = curDoc.ActiveWindow.Selection;

            lstBoxCurSysCapLbls.Items.Clear();

            foreach (Word.CaptionLabel capLbl in app.CaptionLabels)
            {
                lstBoxCurSysCapLbls.Items.Add(capLbl.Name);
            }

            Boolean bTblCapLblValid = true, bInShpCapLblValid = true;

            Word.CaptionLabel tmpCapLbl = null;

            if (!String.IsNullOrWhiteSpace(txtSelectedTblCapLbl.Text))
            {
                try
                {
                    tmpCapLbl = app.CaptionLabels[txtSelectedTblCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    bTblCapLblValid = false;
                }

                if (tmpCapLbl == null)
                {
                    bTblCapLblValid = false;
                }
            }

            if (!String.IsNullOrWhiteSpace(txtSelectedInShpCapLbl.Text))
            {
                try
                {
                    tmpCapLbl = app.CaptionLabels[txtSelectedInShpCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    bInShpCapLblValid = false;
                }

                if (tmpCapLbl == null)
                {
                    bInShpCapLblValid = false;
                }
            }

            String strMsg = "";
            if (!bTblCapLblValid)
            {
                strMsg += "选中的题注：\"" + txtSelectedTblCapLbl.Text + "\"已失效，请重新选择";
            }

            if (!bInShpCapLblValid)
            {
                strMsg += "\r\n选中的题注：\"" + txtSelectedInShpCapLbl.Text + "\"已失效，请重新选择";
            }

            if (!bTblCapLblValid || !bInShpCapLblValid)
            {
                MessageBox.Show(strMsg);
            }

            if (!bTblCapLblValid)
            {
                txtSelectedTblCapLbl.Text = "";
            }

            if (!bInShpCapLblValid)
            {
                txtSelectedInShpCapLbl.Text = "";
            }

            return;
        }


        private void btnSetSysCapLbls_Click(object sender, EventArgs e)
        {
            // show WORD dialog
            Word.Application app = m_addin.Application; // 测试使用

            Microsoft.Office.Core.CommandBar devBar = app.CommandBars["Inline Picture"];// 测试使用
            Microsoft.Office.Core.CommandBarControl cbc = devBar.Controls["插入题注​​(&C)..."];// 测试使用

            if (cbc != null)// 测试使用
            {
                cbc.Execute();// 测试使用
                btnRefreshCapsLbl_Click(null, null);
            }

            return;
        }

        private void btnApplyCapLbls2CurDoc_Click_v1(object sender, EventArgs e)
        {
            DialogResult dRet = MessageBox.Show("确定增加题注？", "确认", MessageBoxButtons.YesNo);

            if (dRet == DialogResult.No)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Boolean bAllDoc = rdCapLblScopeAllDoc.Checked;
            Boolean bSelScope = rdCapLblScopeSelection.Checked;
            Boolean bBeforeSel = rdBtnTiZhuBeforeCurPos.Checked;
            Boolean bAfterSel = rdBtnTiZhuAfterCurPos.Checked;

            Word.Tables tbls = null;
            Word.Paragraph headingPara = null, firstPara = null;
            String strHeadingTxt = "";

            // ArrayList arrNoneIsolatePicSn = new ArrayList();


            ArrayList arrIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrIsolatePicsInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsInTbl = new ArrayList();
            ArrayList arrInShps = null;


            int nOStart = sel.Start;
            int nOEnd = sel.End;

            if (bSelScope)
            {
                if (sel.End - sel.Start <= 1)
                {
                    DialogResult res = MessageBox.Show("未做选择，是否应用到全文？", "确认", MessageBoxButtons.YesNo);

                    if (res == DialogResult.Yes)
                    {
                        bAllDoc = true;
                        bSelScope = false;

                        bBeforeSel = bAfterSel = false;
                    }
                    else
                    {
                        return;
                    }
                }
            }
            else if (bBeforeSel)
            {
                // int nEnd = sel.Range.End;
                // sel.Range.SetRange(doc.Content.Start, nEnd);
                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.HomeKey(objUnit, objExtend);

                //sel.HomeKey(Type.Missing, True);

                bSelScope = true;
                bAllDoc = false;
            }
            else if (bAfterSel)
            {
                //int nStart = sel.Range.Start;
                //sel.Range.SetRange(nStart, doc.Content.End);

                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.EndKey(objUnit, objExtend);

                bSelScope = true;
                bAllDoc = false;
            }


            // 切换到normal view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }

            ArrayList arrTbls = new ArrayList();

            if (!String.IsNullOrWhiteSpace(txtSelectedTblCapLbl.Text))
            {
                if (bAllDoc)
                {
                    // tbls = doc.Tables;

                    foreach (Word.Table wTbl in doc.Tables)
                    {
                        arrTbls.Add(wTbl);
                    }
                }
                else
                {
                    // tbls = sel.Tables;

                    foreach (Word.Table wTbl in sel.Tables)
                    {
                        arrTbls.Add(wTbl);
                    }

                }
            }

            

            Word.WdCaptionPosition wdPos = Word.WdCaptionPosition.wdCaptionPositionAbove;


            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("批量题注");
            }

            // 
            if (!String.IsNullOrWhiteSpace(txtSelectedInShpCapLbl.Text))
            {
                //if (bAllDoc)
                //{
                //    arrInShps = m_addin.m_commTools.getSpecificPicsParasInScope(doc, null);
                //}
                //else
                //{
                //    arrInShps = m_addin.m_commTools.getSpecificPicsParasInScope(doc, sel.Range);
                //}

                if (bAllDoc)
                {
                    arrInShps = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                       arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,true);
                }
                else
                {
                    arrInShps = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                       arrIsolatePicsInTbl, arrNotIsolatePicsInTbl,true,sel.Range);
                }

                Boolean bPosAbove = (cmbInShpCapLblPos.SelectedIndex == 0);
                Word.CaptionLabel InShpCapLbl = null;
                
                try
                {
                    InShpCapLbl = app.CaptionLabels[txtSelectedInShpCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    InShpCapLbl = null;
                }

                if (InShpCapLbl == null)
                {
                    // MessageBox.Show("此题注失效，请重新设置");
                    MessageBox.Show("'" + txtSelectedInShpCapLbl.Text + "'" + "题注失效，请重新设置");
                }
                else
                {
                    int nCnt = 0;

                    // foreach (Word.Paragraph para in arrInShps)
                    foreach (Word.Paragraph para in arrIsolatePicsNotInTbl)
                    {
                        nCnt++;

                        //if (!m_addin.m_commTools.isIsolatePic(para) || para.Range.get_Information(Word.WdInformation.wdWithInTable))
                        //{
                        //    arrNoneIsolatePicSn.Add(nCnt);
                        //    continue;
                        //}

                        doc.ActiveWindow.ScrollIntoView(para.Range);
                        para.Range.GoTo();
                        para.Range.Select();


                        if (chkInShpCaplblGetFromHeading.Checked)
                        {
                            strHeadingTxt = "";
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                            firstPara = sel.Range.Paragraphs[1];

                            Word.Paragraph prevPara = null;

                            if (firstPara != null)
                            {
                                prevPara = firstPara.Previous();
                            }

                            while (prevPara != null && prevPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                            {
                                prevPara = prevPara.Previous();
                            }

                            // app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                            // app.Browser.Previous();
                            // sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToPrevious, 1, "");
                            // headingPara = sel.Range.Paragraphs[1];

                            if (prevPara != null && prevPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText) // found
                            {
                                strHeadingTxt = prevPara.Range.Text.Trim(m_trimChars);
                            }
                            else
                            {

                            }

                            /*
                            sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToPrevious, 1, "");

                            headingPara = sel.Range.Paragraphs[1];
                            if (headingPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                            {
                                strHeadingTxt = headingPara.Range.Text.Trim(m_trimChars);
                            }
                            */

                            doc.ActiveWindow.ScrollIntoView(para.Range);
                            para.Range.GoTo();
                            para.Range.Select();
                        }


                        if (bPosAbove)
                        {
                            wdPos = Word.WdCaptionPosition.wdCaptionPositionAbove;

                        }
                        else
                        {
                            wdPos = Word.WdCaptionPosition.wdCaptionPositionBelow;
                        }

                        // insert
                        sel.InsertCaption(InShpCapLbl, "", "", wdPos, false);
                        SendKeys.Send("{ESC}");

                        if (txtInShpCapLblPreFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtInShpCapLblPreFix.Text);
                        }

                        if (chkInShpCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                        {
                            sel.InsertAfter(strHeadingTxt);
                        }

                        if (txtInShpCapLblPostFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtInShpCapLblPostFix.Text);
                        }


                        switch (cmbTblCapLblAlign.SelectedIndex)
                        {
                            case 1:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.;
                                break;

                            case 2:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphRight;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.wdBaselineAlignCenter;
                                break;

                            default:
                            case 0:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.wdBaselineAlignCenter;
                                break;
                        }
                    }
                }

            }


            if (!String.IsNullOrWhiteSpace(txtSelectedTblCapLbl.Text))
            {
                //                 if (bAllDoc)
                //                 {
                //                     tbls = doc.Tables;
                //                 }
                //                 else
                //                 {
                //                     tbls = sel.Tables;
                //                 }

                Boolean bPosAbove = (cmbTblCapLblPos.SelectedIndex == 0);
                Word.CaptionLabel TblCapLbl = null;

                try
                {
                	TblCapLbl = app.CaptionLabels[txtSelectedTblCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    TblCapLbl = null;
                }


                if (TblCapLbl == null)
                {
                    MessageBox.Show("'" + txtSelectedTblCapLbl.Text + "'" + "题注失效，请重新设置");
                }
                else
                {
                    // Word.Cell cel = null;
                    //int bWrap = 0; // 0-false, -1 -- true

                    foreach (Word.Table tblItem in arrTbls)
                    {
                        //bWrap = tblItem.Rows.WrapAroundText;

                        if (tblItem.Rows.WrapAroundText != 0)
                        {
                            Word.WdRowAlignment talign = tblItem.Rows.Alignment;
                            tblItem.Rows.WrapAroundText = 0;

                            tblItem.Rows.Alignment = talign;
                        }

                        // cel = tblItem.Cell(1, 1);
                        // cel.Range.GoTo();
                        // cel.Range.Select();
                        // doc.ActiveWindow.ScrollIntoView(cel.Range);

                        doc.ActiveWindow.ScrollIntoView(tblItem.Range);
                        tblItem.Range.GoTo();
                        tblItem.Range.Select();

                        if (chkTblCaplblGetFromHeading.Checked)
                        {
                            strHeadingTxt = "";
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);
                            firstPara = sel.Range.Paragraphs[1];

                            Word.Paragraph prevPara = null;

                            if (firstPara != null)
                            {
                                prevPara = firstPara.Previous();
                            }

                            while (prevPara != null && prevPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText)
                            {
                                prevPara = prevPara.Previous();
                            }

                            if (prevPara != null && prevPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText) // found
                            {
                                strHeadingTxt = prevPara.Range.Text.Trim(m_trimChars);
                            }
                            else
                            {

                            }

                            // app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                            // app.Browser.Previous();

                            // sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToPrevious, 1, "");
                            // headingPara = sel.Range.Paragraphs[1];

                            /*
                            headingPara = sel.Range.Paragraphs[1];

                            if (headingPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                            {
                                strHeadingTxt = headingPara.Range.Text.Trim(m_trimChars);
                            }
                            else
                            {
                                /* // find max 10 paras and short paras text(no comma,1 line...)
                                int i = 0;
                                while (firstPara != null && firstPara.Previous() != null && i < 10)
                                {
                                    if (firstPara.OutlineLevel == Word.WdOutlineLevel.wdOutlineLevelBodyText &&
                                        firstPara.Format.Alignment != Word.WdParagraphAlignment.wdAlignParagraphCenter &&
                                        firstPara.Format.Alignment != Word.WdParagraphAlignment.wdAlignParagraphRight &&
                                        firstPara.Range.ParagraphFormat.LeftIndent == 0.0 &&
                                        firstPara.Range.ParagraphFormat.FirstLineIndent == 0.0)
                                    {
                                        int num1 = firstPara.Range.ComputeStatistics(Word.WdStatistic.wdStatisticLines); // 统计
                                        Boolean bRet = isPunctuation(firstPara.Range.Text[firstPara.Range.Text.Length - 1]); // 是否是标点字符

                                        if (!para.Range.Text.StartsWith(" ") &&
                                             para.Range.Text.Trim().Length > 1 &&
                                             !bRet && num1 == 1)
                                        {
                                            
                                        }
                                    }

                                    firstPara = firstPara.Previous();
                                    i++;
                                }
                                 * * /

                            }*/

                            doc.ActiveWindow.ScrollIntoView(tblItem.Range);
                            tblItem.Range.GoTo();
                            tblItem.Range.Select();
                        }

                        if (bPosAbove)
                        {
                            wdPos = Word.WdCaptionPosition.wdCaptionPositionAbove;

                        }
                        else
                        {
                            wdPos = Word.WdCaptionPosition.wdCaptionPositionBelow;
                        }

                        // insert
                        sel.InsertCaption(TblCapLbl, "", "", wdPos, false);
                        SendKeys.Send("{ESC}");

                        if (txtTblCapLblPreFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtTblCapLblPreFix.Text);
                        }

                        if (chkTblCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                        {
                            sel.InsertAfter(strHeadingTxt);
                        }

                        if (txtTblCapLblPostFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtTblCapLblPostFix.Text);
                        }


                        //if (bPosAbove)
                        //{
                        //    // insert
                        //    sel.InsertCaption(TblCapLbl, "", "", Word.WdCaptionPosition.wdCaptionPositionAbove, false);
                        //    SendKeys.Send("{ESC}");

                        //    if (txtTblCapLblPreFix.Text.Length > 0)
                        //    {
                        //        sel.InsertAfter(txtTblCapLblPreFix.Text);
                        //    }

                        //    if (chkTblCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                        //    {
                        //        sel.InsertAfter(strHeadingTxt);
                        //    }

                        //    if (txtTblCapLblPostFix.Text.Length > 0)
                        //    {
                        //        sel.InsertAfter(txtTblCapLblPostFix.Text);
                        //    }
                        //}
                        //else
                        //{
                        //    // insert
                        //    sel.InsertCaption(TblCapLbl, "", "", Word.WdCaptionPosition.wdCaptionPositionBelow, false);
                        //    SendKeys.Send("{ESC}");

                        //    if (txtTblCapLblPreFix.Text.Length > 0)
                        //    {
                        //        sel.InsertAfter(txtTblCapLblPreFix.Text);
                        //    }

                        //    if (chkTblCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                        //    {
                        //        sel.InsertAfter(strHeadingTxt);
                        //    }

                        //    if (txtTblCapLblPostFix.Text.Length > 0)
                        //    {
                        //        sel.InsertAfter(txtTblCapLblPostFix.Text);
                        //    }
                        //}

                        switch (cmbTblCapLblAlign.SelectedIndex)
                        {
                            case 1:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.;
                                break;

                            case 2:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphRight;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.wdBaselineAlignCenter;
                                break;

                            default:
                            case 0:
                                sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                // sel.Range.Paragraphs.BaseLineAlignment = Word.WdBaselineAlignment.wdBaselineAlignCenter;
                                break;
                        }

                        //if (bWrap != 0)
                        //{
                        //    tblItem.Rows.WrapAroundText = bWrap;
                        //}

                    }// foreach
                }

            }

            if (chkSyncUpdateTableOfFigures.Checked)
            {
                if (doc.TablesOfFigures.Count > 0)
                {
                    foreach (Word.TableOfFigures tblFig in doc.TablesOfFigures)
                    {
                        tblFig.Update();
                    }
                }
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }


            // 恢复特定view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            }

            sel.Start = nOStart;
            sel.End = nOEnd;

            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range);

            // compile response info
            int nTblCnt = (arrTbls != null) ? arrTbls.Count : 0;

            int nTotalPicParasCnt   = arrInShps.Count;
            int nIsolatePicParasNotInTblCnt = arrIsolatePicsNotInTbl.Count;
            int nNotIsolatePicParasNotInTblCnt = arrNotIsolatePicsNotInTbl.Count;
            int nIsolatePicParasInTblCnt = arrIsolatePicsInTbl.Count;
            int nNotIsolatePicParasInTblCnt = arrNotIsolatePicsInTbl.Count;

            
            // int nShpCnt = (arrInShps != null) ? arrInShps.Count : 0;
            // int nNonIsolatePicCnt = arrNotIsolatePicsNotInTbl.Count;

            String strTblResInfo = "", strShpResInfo = "";

            if (nTblCnt > 0)
            {
                strTblResInfo = "\r\n成功添加表格题注：" + nTblCnt + "个" + "\r\n    总表格数：" + nTblCnt + "个" + 
                                "\r\n    失败数：" + 0 + "个";
            }


            //if (nShpCnt > 0 || nNonIsolatePicCnt > 0)
            //{
            //    String strErrInfo = "";
            //    int nSn = 0;

            //    if (nNonIsolatePicCnt > 0)
            //    {
            //        for (int i = 0; i < arrNoneIsolatePicSn.Count - 1; i++)
            //        {
            //            nSn = (int)arrNoneIsolatePicSn[i];
            //            strErrInfo += (nSn + 1) + ",";
            //        }

            //        nSn = (int)arrNoneIsolatePicSn[arrNoneIsolatePicSn.Count - 1];
            //        strErrInfo += (nSn + 1);
            //    }

            //    // strShpResInfo = "\r\n总图片数：" + nShpCnt + "\r\n    完成图片题注数：" + (nShpCnt - nNonIsolatePicCnt) + "个" + "\r\n    加题注失败（非单独成行）数：" + nNonIsolatePicCnt + "个,图片序号:" + strErrInfo;
            //    if (nNonIsolatePicCnt == 0)
            //    {
            //        strShpResInfo = "\r\n成功添加图片题注：" + (nShpCnt - nNonIsolatePicCnt) + "个\r\n    总图片数：" + nShpCnt + "个" + "\r\n    失败（非单独成行）数：" + nNonIsolatePicCnt + "个";
            //    }
            //    else
            //    {
            //        strShpResInfo = "\r\n成功添加图片题注：" + (nShpCnt - nNonIsolatePicCnt) + "个\r\n    总图片数：" + nShpCnt + "个" + "\r\n    失败（非单独成行）数：" + nNonIsolatePicCnt + "个,\r\n        失败图片序号:" + strErrInfo + "(定位图片方法：在Word中摁Ctrl+G，选择“图形”，输入图片序号如25，点“确定”即可定位)";
            //    }

            //}

            if (nTotalPicParasCnt > 0) // succ
            {
                String strPosInfoNotIso = "图片位置：";
                String strPosInfoInTbl = "图片位置：";
                
                int nAbsPage = 0,nPage = 0, nLineNum = 0;

                foreach (Word.Paragraph paraItem in arrNotIsolatePicsNotInTbl)
                {
                    nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                    nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                    strPosInfoNotIso += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                }

                foreach (Word.Paragraph paraItem in arrIsolatePicsInTbl)
                {
                    nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                    nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                    strPosInfoInTbl += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                }

                foreach (Word.Paragraph paraItem in arrNotIsolatePicsInTbl)
                {
                    nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                    nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                    nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                    strPosInfoInTbl += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                }

                // 
                strShpResInfo = "\r\n总图片数：" + nTotalPicParasCnt + "\r\n    完成图片段落题注数：" + nIsolatePicParasNotInTblCnt + "个" +
                    "\r\n    忽略非单独成行图片段落数：" + nNotIsolatePicParasNotInTblCnt + "个" +
                    ((nNotIsolatePicParasNotInTblCnt > 0) ? strPosInfoNotIso : "") +
                    "\r\n    忽略表格内图片段落数：" + (nIsolatePicParasInTblCnt + nNotIsolatePicParasInTblCnt) + "个" +
                    (((nIsolatePicParasInTblCnt + nNotIsolatePicParasInTblCnt) > 0) ? strPosInfoInTbl : "");
                
            }
            else
            {
                strShpResInfo = "\r\n没有图片段落，不能添加题注";
            }

            MessageBox.Show("完成" + strTblResInfo + strShpResInfo);

            return;
        }

        private void btnApplyCapLbls2CurDoc_Click(object sender, EventArgs e)
        {
            Boolean bSelInShpCapLbl = !String.IsNullOrWhiteSpace(txtSelectedInShpCapLbl.Text);
            Boolean bSelTblCapLbl = !String.IsNullOrWhiteSpace(txtSelectedTblCapLbl.Text);

            if (!bSelInShpCapLbl && !bSelTblCapLbl)
            {
                MessageBox.Show("请在\"图\"或\"表\"中至少选择一项题注名称");
                return;
            }

            DialogResult dRet = MessageBox.Show("确定批量增加题注？\r\n注意：长文档下耗时较长，界面若无反应请耐心等待","确认",MessageBoxButtons.YesNo);

            if (dRet == DialogResult.No)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Boolean bAllDoc = rdCapLblScopeAllDoc.Checked;
            Boolean bSelScope = rdCapLblScopeSelection.Checked;
            Boolean bBeforeSel = rdBtnTiZhuBeforeCurPos.Checked;
            Boolean bAfterSel = rdBtnTiZhuAfterCurPos.Checked;

            Word.Tables tbls = null;
            Word.Paragraph headingPara = null, firstPara = null;
            String strHeadingTxt = "";

            ArrayList arrIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrIsolatePicsInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsInTbl = new ArrayList();
            ArrayList arrInShps = null;

            int nOStart = sel.Start;
            int nOEnd = sel.End;

            Boolean bApplyAllDoc = false;

            if (bSelScope)
            {
                if (sel.End - sel.Start <= 1)
                {
                    DialogResult res = MessageBox.Show("未做选择，是否应用到全文？", "确认", MessageBoxButtons.YesNo);

                    bApplyAllDoc = (res == DialogResult.Yes);

                    if (!bApplyAllDoc)
                    {
                        return;
                    }
                }
            }


            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.StartCustomRecord("批量题注");
            }

            Boolean bRemoveTizhuFirst = chkBoxReplaceTiZhus.Checked;
            int nClearTiZhuCnt = 0;
            Boolean bRemoveOnlyBody = true;
            String strRemoveFmt = "";
            String strRemoveBody = "删除段落体（不包括最后回车符），不会改变页面段落相对结构（推荐）";
            String strRemovePara = "删除整个段落（包括最后回车符），会引起下一段落向上移动一行，改变页面段落相对结构";

            if (bRemoveTizhuFirst)
            {
                DialogResult ret = MessageBox.Show("请确认删除形式：\r\n\r\n选择\"是\"：" + strRemoveBody + 
                                                    "\r\n选择\"否\"：" + strRemovePara + "\r\n选择\"取消\"：取消操作", 
                                                    "确认", MessageBoxButtons.YesNoCancel);

                if (ret == DialogResult.Cancel)
                {
                    return;
                }

                if (ret == DialogResult.Yes)
                {
                    bRemoveOnlyBody = true;
                    strRemoveFmt = strRemoveBody;
                }
                else
                {
                    bRemoveOnlyBody = false;
                    strRemoveFmt = strRemovePara;
                }

                if (bAllDoc)
                {
                    nClearTiZhuCnt = m_addin.m_commTools.clearTiZhu(doc, null, bRemoveOnlyBody);
                }
                else
                {
                    nClearTiZhuCnt = m_addin.m_commTools.clearTiZhu(doc, sel.Range, bRemoveOnlyBody);
                }

                doc.Fields.Update(); //?

                sel.Start = nOStart; // ?
                sel.End = nOEnd;
                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);
            }

            
            if (bSelScope)
            {
                if (sel.End - sel.Start <= 1)
                {
                    if (bApplyAllDoc)
                    {
                        bAllDoc = true;
                        bSelScope = false;

                        bBeforeSel = bAfterSel = false;
                    }
                    else
                    {
                        if (m_addin.AppVersion >= 15) // 2013
                        {
                            Word.UndoRecord ur = m_addin.Application.UndoRecord;
                            ur.EndCustomRecord();
                        }

                        return;
                    }
                }
            }
            else if (bBeforeSel)
            {
                // int nEnd = sel.Range.End;
                // sel.Range.SetRange(doc.Content.Start, nEnd);
                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.HomeKey(objUnit, objExtend);

                bSelScope = true;
                bAllDoc = false;
            }
            else if (bAfterSel)
            {
                //int nStart = sel.Range.Start;
                //sel.Range.SetRange(nStart, doc.Content.End);

                Object objExtend = true;
                Object objUnit = Word.WdUnits.wdStory;
                // sel.mov
                sel.EndKey(objUnit, objExtend);

                bSelScope = true;
                bAllDoc = false;
            }

            Hashtable hashScopeHeading = null;
            Hashtable hashHeadingName = null;

            if((bSelInShpCapLbl && chkInShpCaplblGetFromHeading.Checked) ||
               (bSelTblCapLbl && chkTblCaplblGetFromHeading.Checked) )
            {
                hashScopeHeading = m_addin.m_commTools.getHeadingScope(doc);
                hashHeadingName = new Hashtable();
            }

            // 切换到normal view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdNormalView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;
            }

            Boolean bTblPosAbove = (cmbTblCapLblPos.SelectedIndex == 0);
            Word.CaptionLabel TblCapLbl = null;
            Boolean bInShpPosAbove = (cmbInShpCapLblPos.SelectedIndex == 0);
            Word.CaptionLabel InShpCapLbl = null;


            ArrayList arrTbls = new ArrayList();
            //Word.Table tblItem = null;
            int nTblCnt = 0, nInShpCnt = 0;

            if (bSelTblCapLbl)
            {
                try
                {
                    TblCapLbl = app.CaptionLabels[txtSelectedTblCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    TblCapLbl = null;
                }

                if (bAllDoc)
                {
                    tbls = doc.Tables;
                }
                else
                {
                    tbls = sel.Tables;
                }

                foreach (Word.Table wTbl in tbls)
                {
                    //if (m_addin.m_commTools.isPageCenterHideTbl(wTbl))
                    if (m_addin.m_commTools.isHideTbl(wTbl))
                    {
                        continue;
                    }
                    arrTbls.Add(wTbl);
                }

                if (hashHeadingName != null)
                {
                    // for (int nIdx = arrTbls.Count - 1; nIdx >= 0; nIdx--)
                    foreach(Word.Table tblItem in arrTbls)
                    {
                        nTblCnt++;

                        String strHeadingName = "";

                        if (hashScopeHeading.Contains(tblItem.Range.Start))
                        {
                            strHeadingName = (String)hashScopeHeading[tblItem.Range.Start];
                        }

                        hashHeadingName[("表" + nTblCnt)] = strHeadingName;

                    }
                }
            }

            // ArrayList arrNoneIsolatePicSn = new ArrayList();
            // ArrayList arrInShps = null;

            Word.WdCaptionPosition wdInShpPos = Word.WdCaptionPosition.wdCaptionPositionAbove;
            Word.WdCaptionPosition wdTblPos = Word.WdCaptionPosition.wdCaptionPositionAbove;

            Boolean bIgnore = true;

            if (bInShpPosAbove)
            {
                wdInShpPos = Word.WdCaptionPosition.wdCaptionPositionAbove;
            }
            else
            {
                wdInShpPos = Word.WdCaptionPosition.wdCaptionPositionBelow;
            }

            if (bTblPosAbove)
            {
                wdTblPos = Word.WdCaptionPosition.wdCaptionPositionAbove;
            }
            else
            {
                wdTblPos = Word.WdCaptionPosition.wdCaptionPositionBelow;
            }


            // 
            if (bSelInShpCapLbl)
            {
                try
                {
                	InShpCapLbl = app.CaptionLabels[txtSelectedInShpCapLbl.Text];
                }
                catch (System.Exception ex)
                {
                    InShpCapLbl = null;
                }


                if (bAllDoc)
                {
                    arrInShps = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                         arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, true);
                }
                else
                {
                    arrInShps = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                         arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, true, sel.Range);
                }

                if (InShpCapLbl == null)
                {
                    // MessageBox.Show("此题注失效，请重新设置");
                    MessageBox.Show("'" + txtSelectedInShpCapLbl.Text + "'" + "题注失效，请重新设置");
                }
                else
                {
                    //Word.Paragraph para = null;

                    if (hashHeadingName != null)
                    {
                        //for (int nIdx = arrIsolatePicsNotInTbl.Count - 1; nIdx >= 0; nIdx--)
                        foreach (Word.Paragraph para in arrIsolatePicsNotInTbl)
                        {
                            nInShpCnt++;

                            bIgnore = true;
                            foreach (Word.InlineShape inShp in para.Range.InlineShapes)
                            {
                                if (!(inShp.Type == Word.WdInlineShapeType.wdInlineShapePictureBullet ||
                                    (inShp.OLEFormat != null && inShp.OLEFormat.DisplayAsIcon)))
                                {
                                    bIgnore = false;
                                    break;
                                }
                            }

                            if (bIgnore)
                            {
                                continue;
                            }

                            String strHeadingName = "";

                            if (hashScopeHeading.Contains(para.Range.Start))
                            {
                                strHeadingName = (String)hashScopeHeading[para.Range.Start];
                            }

                            hashHeadingName[("图" + nInShpCnt)] = strHeadingName;
                        }
                    }
                }
            }

            if ((nTblCnt + nInShpCnt) > 100)
            {
                // 
                // 
                m_addin.m_commTools.bulkAddTiZhus(app, doc, arrTbls, arrIsolatePicsNotInTbl,
                                                  TblCapLbl, wdTblPos, cmbTblCapLblAlign.SelectedIndex,
                                                  txtTblCapLblPreFix.Text, chkTblCaplblGetFromHeading.Checked, 
                                                  txtTblCapLblPostFix.Text,InShpCapLbl,
                                                  wdInShpPos, cmbInShpCapLblAlign.SelectedIndex,
                                                  txtInShpCapLblPreFix.Text, chkInShpCaplblGetFromHeading.Checked,
                                                  txtInShpCapLblPostFix.Text,hashHeadingName);
            }
            else
            {
                if (bSelInShpCapLbl)
                {
                    int nCnt = 0, nIdx = 0;
                    foreach (Word.Paragraph para in arrIsolatePicsNotInTbl)
                    {
                        nIdx++;

                        foreach (Word.InlineShape inShp in para.Range.InlineShapes)
                        {
                            if (!(inShp.Type == Word.WdInlineShapeType.wdInlineShapePictureBullet ||
                                (inShp.OLEFormat != null && inShp.OLEFormat.DisplayAsIcon)))
                            {
                                bIgnore = false;
                                break;
                            }
                        }

                        if (bIgnore)
                        {
                            continue;
                        }


                        nCnt++;

                        doc.ActiveWindow.ScrollIntoView(para.Range);
                        para.Range.GoTo();
                        para.Range.Select();

                        strHeadingTxt = "";
                        if (chkInShpCaplblGetFromHeading.Checked && hashHeadingName.Count > 0)
                        {
                            if (hashHeadingName.Contains(("图" + nIdx)))
                            {
                                strHeadingTxt = (String)hashHeadingName[("图" + nIdx)];
                            }
                        }

                        sel.InsertCaption(InShpCapLbl, "", "", wdInShpPos, false);

                        if (txtInShpCapLblPreFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtInShpCapLblPreFix.Text);
                        }

                        if (chkInShpCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                        {
                            sel.InsertAfter(strHeadingTxt);
                        }

                        if (txtInShpCapLblPostFix.Text.Length > 0)
                        {
                            sel.InsertAfter(txtInShpCapLblPostFix.Text);
                        }

                        switch (cmbInShpCapLblAlign.SelectedIndex)
                        {
                            case 1:
                                sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                break;

                            case 2:
                                sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphRight;
                                break;

                            default:
                            case 0:
                                sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                break;
                        }
                    }
                }


                if (bSelTblCapLbl)
                {
                    if (TblCapLbl == null)
                    {
                        MessageBox.Show("'" + txtSelectedTblCapLbl.Text + "'" + "题注失效，请重新设置");
                    }
                    else
                    {
                        int nIdx = 0;
                        foreach (Word.Table tblItem in arrTbls)
                        {
                            nIdx++;

                            if (tblItem.Rows.WrapAroundText != 0)
                            {
                                Word.WdRowAlignment talign = tblItem.Rows.Alignment;
                                tblItem.Rows.WrapAroundText = 0;

                                tblItem.Rows.Alignment = talign;
                            }

                            doc.ActiveWindow.ScrollIntoView(tblItem.Range);
                            tblItem.Range.GoTo();
                            tblItem.Range.Select();

                            strHeadingTxt = "";
                            if (chkTblCaplblGetFromHeading.Checked && hashHeadingName.Count > 0)
                            {
                                if (hashHeadingName.Contains(("表" + nIdx)))
                                {
                                    strHeadingTxt = (String)hashHeadingName[("表" + nIdx)];
                                }
                            }

                            

                            sel.InsertCaption(TblCapLbl, "", "", wdTblPos, false);

                            if (txtTblCapLblPreFix.Text.Length > 0)
                            {
                                sel.InsertAfter(txtTblCapLblPreFix.Text);
                            }

                            if (chkTblCaplblGetFromHeading.Checked && !String.IsNullOrWhiteSpace(strHeadingTxt))
                            {
                                sel.InsertAfter(strHeadingTxt);
                            }

                            if (txtTblCapLblPostFix.Text.Length > 0)
                            {
                                sel.InsertAfter(txtTblCapLblPostFix.Text);
                            }

                            switch (cmbTblCapLblAlign.SelectedIndex)
                            {
                                case 1:
                                    sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphLeft;
                                    break;

                                case 2:
                                    sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphRight;
                                    break;

                                default:
                                case 0:
                                    sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                                    break;
                            }

                        }// foreach
                    }
                }
            }//

            



            if (chkSyncUpdateTableOfFigures.Checked)
            {
                if (doc.TablesOfFigures.Count > 0)
                {
                    foreach (Word.TableOfFigures tblFig in doc.TablesOfFigures)
                    {
                        tblFig.Update();
                    }
                }
            }

            if (m_addin.AppVersion >= 15) // 2013
            {
                Word.UndoRecord ur = m_addin.Application.UndoRecord;
                ur.EndCustomRecord();
            }


            // 恢复特定view
            if (doc.ActiveWindow.View.SplitSpecial == Word.WdSpecialPane.wdPaneNone)
            {
                doc.ActiveWindow.ActivePane.View.Type = Word.WdViewType.wdPrintView;
            }
            else
            {
                doc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            }

            sel.Start = nOStart;
            sel.End = nOEnd;

            sel.Range.GoTo();
            doc.ActiveWindow.ScrollIntoView(sel.Range);

            // compile response info
            nTblCnt = (arrTbls != null)? arrTbls.Count : 0;

            int nTotalPicParasCnt = (arrInShps != null) ? arrInShps.Count : 0;
            int nIsolatePicParasNotInTblCnt = arrIsolatePicsNotInTbl.Count;
            int nNotIsolatePicParasNotInTblCnt = arrNotIsolatePicsNotInTbl.Count;
            int nIsolatePicParasInTblCnt = arrIsolatePicsInTbl.Count;
            int nNotIsolatePicParasInTblCnt = arrNotIsolatePicsInTbl.Count;	

            // int nShpCnt = (arrInShps != null)? arrInShps.Count : 0;
            // int nNonIsolatePicCnt = arrNoneIsolatePicSn.Count;

            String strTblResInfo = "", strShpResInfo = "";

            if (bSelTblCapLbl)
            {
                if (nTblCnt > 0)
                {
                    strTblResInfo = "\r\n成功添加表格题注：" + nTblCnt + "个" + "\r\n    总表格数：" + nTblCnt + "个" + "\r\n    失败数：" + 0 + "个";
                }
                else
                {
                    strTblResInfo = "\r\n没有表格，不能添加题注";
                }
            }

            if (bSelInShpCapLbl)
            {
                if (nTotalPicParasCnt > 0) // succ
                {
                    String strPosInfoNotIso = "图片位置：";
                    String strPosInfoInTbl = "图片位置：";

                    int nAbsPage = 0, nPage = 0, nLineNum = 0;

                    foreach (Word.Paragraph paraItem in arrNotIsolatePicsNotInTbl)
                    {
                        nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                        nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                        nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                        strPosInfoNotIso += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                    }

                    foreach (Word.Paragraph paraItem in arrIsolatePicsInTbl)
                    {
                        nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                        nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                        nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                        strPosInfoInTbl += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                    }

                    foreach (Word.Paragraph paraItem in arrNotIsolatePicsInTbl)
                    {
                        nAbsPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndPageNumber);
                        nPage = paraItem.Range.get_Information(Word.WdInformation.wdActiveEndAdjustedPageNumber);
                        nLineNum = paraItem.Range.get_Information(Word.WdInformation.wdFirstCharacterLineNumber);

                        strPosInfoInTbl += "总页码：" + nAbsPage + "页码:" + nPage + "行：" + nLineNum + "/";
                    }

                    // 
                    strShpResInfo = "\r\n总图片数：" + nTotalPicParasCnt + "\r\n    完成图片段落题注数：" + nIsolatePicParasNotInTblCnt + "个" +
                        "\r\n    忽略非单独成行图片段落数：" + nNotIsolatePicParasNotInTblCnt + "个" +
                        ((nNotIsolatePicParasNotInTblCnt > 0) ? strPosInfoNotIso : "") +
                        "\r\n    忽略表格内图片段落数：" + (nIsolatePicParasInTblCnt + nNotIsolatePicParasInTblCnt) + "个" +
                        (((nIsolatePicParasInTblCnt + nNotIsolatePicParasInTblCnt) > 0) ? strPosInfoInTbl : "");

                }
                else
                {
                    strShpResInfo = "\r\n没有图片段落，不能添加题注";
                }
            }

            String strClearedTiZhu = "";
            if (bRemoveTizhuFirst)
            {
                if (nClearTiZhuCnt < 0)
                {
                    strClearedTiZhu = "\r\n清除原题注：0个\r\n";
                }
                else
                {
                    strClearedTiZhu = "\r\n清除原题注：" + nClearTiZhuCnt + "个\r\n";
                }
            }

            MessageBox.Show("完成\r\n" + strClearedTiZhu + strTblResInfo + "\r\n" + strShpResInfo);

            return;
        }

        private void btnNav2FirstTbl_Click(object sender, EventArgs e)
        {
            btnONTableNavFirst_Click(null, null);
            return;
        }

        private void btnNav2LastTbl_Click(object sender, EventArgs e)
        {
            btnONTableNavLast_Click(null, null);
            return;
        }

        private void btnNav2PrevTbl_Click(object sender, EventArgs e)
        {
            btnONTableNavPrev_Click(null,null);
            return;
        }

        private void btnNav2NextTbl_Click(object sender, EventArgs e)
        {
            btnONTableNavNext_Click(null, null);
            return;
        }

        private void btnNav2FirstInShp_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToFirst, 1, "");
            doc.ActiveWindow.SetFocus();
            return;
        }

        private void btnNav2LastInShp_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToLast, 1, "");
            doc.ActiveWindow.SetFocus();
            return;
        }

        private void btnNav2PrevInShp_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToPrevious, 1, "");
            doc.ActiveWindow.SetFocus();
            return;
        }

        private void btnNav2NextInShp_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToNext, 1, "");
            doc.ActiveWindow.SetFocus();
            return;
        }

        private void btnNavFirstField_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            Word.Field fld = null;

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("没有题注");
                return;
            }

            Word.Range curRng = null,prevRng = null;
            Boolean bInToc = false;

            sel.HomeKey(Word.WdUnits.wdStory);

            while(true)
            {
                curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToNext, 1, "");

                if (!bInToc)
                {
                    foreach (Word.TableOfContents cnts in doc.TablesOfContents)
                    {
                        if (curRng.InRange(cnts.Range))
                        {
                            sel.Start = cnts.Range.End;
                            sel.End = sel.Start;
                            sel.Range.GoTo();

                            bInToc = true;

                            curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToNext, 1, "");

                            break;
                        }
                    }
                }

                fld = null;

                if (curRng != null && curRng.Paragraphs[1].Range.Fields.Count > 0)
                {
                    foreach (Word.Field tmpfld in curRng.Paragraphs[1].Range.Fields)
                    {
                        if ((curRng.Start + 1) == tmpfld.Code.Start)
                        {
                            fld = tmpfld;
                        }
                    }

                    if (fld != null && fld.Type == Word.WdFieldType.wdFieldSequence) // fld.Code.Text.StartsWith("SEQ")
                    {
                        break;
                    }

                    if(prevRng != null && curRng != null && (prevRng.Start == curRng.Start && prevRng.End == curRng.End))
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有题注");

                        break;
                    }
                    else
                    {
                        // next
                        prevRng = curRng;
                    }
                }
                else
                {
                    if (prevRng == null && curRng != null)
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有题注");

                        break;
                    }
                }
            }
            
            doc.ActiveWindow.SetFocus();
            return;
        }

        private void btnNavLastField_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            Word.Field fld = null;

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("没有题注");
                return;
            }

            Word.Range curRng = null, prevRng = null;
            Boolean bInToc = false;

            sel.EndKey(Word.WdUnits.wdStory);
            
            while (true)
            {
                curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToPrevious, 1, "");

                if (!bInToc)
                {
                    foreach (Word.TableOfContents cnts in doc.TablesOfContents)
                    {
                        if (curRng.InRange(cnts.Range))
                        {
                            sel.Start = cnts.Range.End;
                            sel.End = sel.Start;
                            sel.Range.GoTo();

                            bInToc = true;

                            curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToPrevious, 1, "");

                            break;
                        }
                    }
                }

                fld = null;

                if (curRng != null && curRng.Paragraphs[1].Range.Fields.Count > 0)
                {
                    foreach (Word.Field tmpfld in curRng.Paragraphs[1].Range.Fields)
                    {
                        if ((curRng.Start + 1) == tmpfld.Code.Start)
                        {
                            fld = tmpfld;
                        }
                    }

                    if (fld != null && fld.Type == Word.WdFieldType.wdFieldSequence) // fld.Code.Text.StartsWith("SEQ")
                    {
                        break;
                    }

                    if (prevRng != null && curRng != null && (prevRng.Start == curRng.Start && prevRng.End == curRng.End))
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有题注");

                        break;
                    }
                    else
                    {
                        // next
                        prevRng = curRng;
                    }
                }
                else
                {
                    if (prevRng == null && curRng != null)
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有题注");

                        break;
                    }
                }
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnNavPrevField_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            Word.Field fld = null;

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("没有题注");
                return;
            }

            Word.Range curRng = null, prevRng = null;
            Boolean bInToc = false;

            // sel.HomeKey(Word.WdUnits.wdStory);

            while (true)
            {
                curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToPrevious, 1, "");

                if (!bInToc)
                {
                    foreach (Word.TableOfContents cnts in doc.TablesOfContents)
                    {
                        if (curRng.InRange(cnts.Range))
                        {
                            sel.Start = cnts.Range.End;
                            sel.End = sel.Start;
                            sel.Range.GoTo();

                            bInToc = true;

                            curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToPrevious, 1, "");

                            break;
                        }
                    }
                }

                fld = null;

                if (curRng != null && curRng.Paragraphs[1].Range.Fields.Count > 0)
                {
                    foreach (Word.Field tmpfld in curRng.Paragraphs[1].Range.Fields)
                    {
                        if ((curRng.Start + 1) == tmpfld.Code.Start)
                        {
                            fld = tmpfld;
                        }
                    }

                    if (fld != null && fld.Type == Word.WdFieldType.wdFieldSequence) // fld.Code.Text.StartsWith("SEQ")
                    {
                        break;
                    }

                    if (prevRng != null && curRng != null && (prevRng.Start == curRng.Start && prevRng.End == curRng.End))
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");

                        break;
                    }
                    else
                    {
                        // next
                        prevRng = curRng;
                    }
                }
                else
                {
                    if (prevRng == null && curRng != null)
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");

                        break;
                    }
                }
            }

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();
			
            return;
        }

        private void btnNavNextField_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;


            Word.Field fld = null;

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("没有题注");
                return;
            }

            Word.Range curRng = null, prevRng = null;
            Boolean bInToc = false;

            // sel.HomeKey(Word.WdUnits.wdStory);

            while (true)
            {
                curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToNext, 1, "");

                if (!bInToc)
                {
                    foreach (Word.TableOfContents cnts in doc.TablesOfContents)
                    {
                        if (curRng.InRange(cnts.Range))
                        {
                            sel.Start = cnts.Range.End;
                            sel.End = sel.Start;
                            sel.Range.GoTo();

                            bInToc = true;

                            curRng = sel.GoTo(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToNext, 1, "");

                            break;
                        }
                    }
                }

                fld = null;

                if (curRng != null && curRng.Paragraphs[1].Range.Fields.Count > 0)
                {
                    foreach (Word.Field tmpfld in curRng.Paragraphs[1].Range.Fields)
                    {
                        if ((curRng.Start + 1) == tmpfld.Code.Start)
                        {
                            fld = tmpfld;
                        }
                    }

                    if (fld != null && fld.Type == Word.WdFieldType.wdFieldSequence) // fld.Code.Text.StartsWith("SEQ")
                    {
                        break;
                    }

                    if (prevRng != null && curRng != null && (prevRng.Start == curRng.Start && prevRng.End == curRng.End))
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");

                        break;
                    }
                    else
                    {
                        // next
                        prevRng = curRng;
                    }
                }
                else
                {
                    if (prevRng == null && curRng != null)
                    {
                        sel.Start = nPosStart;
                        sel.End = nPosEnd;
                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");

                        break;
                    }
                }
            }

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                // MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void checkBoxMultiSelTables_CheckedChanged(object sender, EventArgs e)
        {
            Boolean bChk = checkBoxMultiSelTables.Checked;

            if (bChk)
            {
                chkWholeTableCells.Checked = !bChk;
                chkBoxMulSelTblFirstRow.Checked = !bChk;
                chkBoxMultiSelFirstColumn.Checked = !bChk;
                chkBoxMulSelTblLastRow.Checked = !bChk;
                chkBoxMultiSelLastColumn.Checked = !bChk;
                chkBoxMultiSelRowsScope.Checked = !bChk;
                chkBoxMultiSelColumnsScope.Checked = !bChk;

                chkWholeTableCells.Enabled = !bChk;
                chkBoxMulSelTblFirstRow.Enabled = !bChk;
                chkBoxMultiSelFirstColumn.Enabled = !bChk;
                chkBoxMulSelTblLastRow.Enabled = !bChk;
                chkBoxMultiSelLastColumn.Enabled = !bChk;
                chkBoxMultiSelRowsScope.Enabled = !bChk;
                chkBoxMultiSelColumnsScope.Enabled = !bChk;
            }
            else
            {
                chkWholeTableCells.Enabled = !bChk;
                chkBoxMulSelTblFirstRow.Enabled = !bChk;
                chkBoxMultiSelFirstColumn.Enabled = !bChk;
                chkBoxMulSelTblLastRow.Enabled = !bChk;
                chkBoxMultiSelLastColumn.Enabled = !bChk;
                chkBoxMultiSelRowsScope.Enabled = !bChk;
                chkBoxMultiSelColumnsScope.Enabled = !bChk;
            }

            return;
        }


        private void nav2(Word.WdGoToItem gtItem, Word.WdGoToDirection gtDir)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // sel.Find.ClearFormatting();

            if (gtDir == Word.WdGoToDirection.wdGoToFirst)
            {
                sel.HomeKey(Word.WdUnits.wdStory);
                sel.GoTo(gtItem, Word.WdGoToDirection.wdGoToNext,1,"");
            }
            else if (gtDir == Word.WdGoToDirection.wdGoToLast)
            {
                sel.EndKey(Word.WdUnits.wdStory);
                sel.GoTo(gtItem, Word.WdGoToDirection.wdGoToPrevious, 1, "");
            }
            else if (gtDir == Word.WdGoToDirection.wdGoToNext)
            {
                sel.GoTo(gtItem, gtDir, 1, "");
            }
            else if (gtDir == Word.WdGoToDirection.wdGoToPrevious)
            {
                sel.GoTo(gtItem, gtDir, 1, "");
            }

            sel.Find.ClearFormatting();
            sel.Find.Text = "";
            sel.Find.Replacement.Text = "";
            sel.Find.Wrap = Word.WdFindWrap.wdFindContinue;
            sel.Find.Format = false;
            sel.Find.MatchCase = false;
            sel.Find.MatchWholeWord = false;
            sel.Find.MatchByte = true;
            sel.Find.MatchWildcards = false;
            sel.Find.MatchSoundsLike = false;
            sel.Find.MatchAllWordForms = false;

            doc.ActiveWindow.SetFocus();
            return;
        }


        private void btnONOutlineAllSel_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
            {
                chkListObjNavOutline.SetItemChecked(i, true); // 全选
            }

            return;
        }


        private void btnONOutlineAllUnSel_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
            {
                chkListObjNavOutline.SetItemChecked(i, false); // 全清
            }

            return;
        }


        private void btnONHeadingNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            /*
            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                // nav2(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToFirst);

                sel.HomeKey(Word.WdUnits.wdStory);
                int nPosStart = sel.Start;
                int nPosEnd = sel.End;

                if (sel.Range.Paragraphs[1].OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                {

                }
                else
                {
                    app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                    app.Browser.Next();

                    if (sel.Start == nPosStart && sel.End == nPosEnd)
                    {
                        sel.Start = nOldPosStart;
                        sel.End = nOldPosEnd;

                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");
                    }

                }

                doc.ActiveWindow.SetFocus();
                return;
            }
            */

            ArrayList arrParas = new ArrayList();
            Word.Paragraph fndPara = null;

            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                sel.HomeKey(Word.WdUnits.wdStory);

                fndPara = sel.Range.Paragraphs[1];
                while (fndPara != null)
                {
                    fndPara = fndPara.Next();

                    if (fndPara != null && fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        arrParas.Add(fndPara);
                        break;
                    }
                }

                //for (int i = 0; i < 9; i++)
                //{
                //    sel.HomeKey(Word.WdUnits.wdStory);
                //    fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1);

                //    if (fndPara != null)
                //    {
                //        arrParas.Add(fndPara);
                //    }
                //}
            }
            else
            {
                for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
                {
                    if (chkListObjNavOutline.GetItemChecked(i))
                    {
                        sel.HomeKey(Word.WdUnits.wdStory);
                        fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1,true,true);

                        if (fndPara != null)
                        {
                            arrParas.Add(fndPara);
                        }
                    }
                }
            }


            // 
            if (arrParas.Count > 0)
            {
                if (arrParas.Count > 1)
                {
                    ClassParagraphComparer paraCmp = new ClassParagraphComparer();
                    arrParas.Sort(paraCmp);
                }

                Word.Paragraph para = (Word.Paragraph)arrParas[0];

                sel.Start = para.Range.Start;
                sel.End = sel.Start;
                sel.Range.GoTo();

                doc.ActiveWindow.ScrollIntoView(para.Range);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONHeadingNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            /*
            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                // nav2(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToLast);

                sel.EndKey(Word.WdUnits.wdStory);
                int nPosStart = sel.Start;
                int nPosEnd = sel.End;

                if (sel.Range.Paragraphs[1].OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                {

                }
                else
                {
                    app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                    app.Browser.Previous();

                    if (sel.Start == nPosStart && sel.End == nPosEnd)
                    {
                        sel.Start = nOldPosStart;
                        sel.End = nOldPosEnd;

                        sel.Range.GoTo();
                        doc.ActiveWindow.ScrollIntoView(sel.Range);

                        MessageBox.Show("没有了");
                    }

                }

                doc.ActiveWindow.SetFocus();

                return;
            }
            */

            ArrayList arrParas = new ArrayList();
            Word.Paragraph fndPara = null;

            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                sel.EndKey(Word.WdUnits.wdStory);

                fndPara = sel.Range.Paragraphs[1];

                while (fndPara != null)
                {
                    fndPara = fndPara.Previous();

                    if (fndPara != null && fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        arrParas.Add(fndPara);
                        break;
                    }
                }

                //for (int i = 0; i < 9; i++)
                //{
                //    sel.EndKey(Word.WdUnits.wdStory);
                //    fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1, false);

                //    if (fndPara != null)
                //    {
                //        arrParas.Add(fndPara);
                //    }
                //}
            }
            else
            {
                for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
                {
                    if (chkListObjNavOutline.GetItemChecked(i))
                    {
                        sel.EndKey(Word.WdUnits.wdStory);
                        fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1, false,true);

                        if (fndPara != null)
                        {
                            arrParas.Add(fndPara);
                        }
                    }
                }
            }

            // 
            if (arrParas.Count > 0)
            {
                if (arrParas.Count > 1)
                {
                    ClassParagraphComparer paraCmp = new ClassParagraphComparer();
                    arrParas.Sort(paraCmp);
                }

                Word.Paragraph para = (Word.Paragraph)arrParas[arrParas.Count - 1];

                sel.Start = para.Range.Start;
                sel.End = sel.Start;
                sel.Range.GoTo();

                doc.ActiveWindow.ScrollIntoView(para.Range);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONHeadingNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nStart = sel.Start;

            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            //int nPosStart = sel.Start;
            //int nPosEnd = sel.End;
            /*
            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                // nav2(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToPrevious);

                app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                app.Browser.Previous();

                if (sel.Start == nOldPosStart && sel.End == nOldPosEnd)
                {
                    //sel.Start = nOldPosStart;
                    //sel.End = nOldPosEnd;

                    //sel.Range.GoTo();
                    //doc.ActiveWindow.ScrollIntoView(sel.Range);

                    MessageBox.Show("没有了");
                }

                doc.ActiveWindow.SetFocus();

                return;
            }
            */

            ArrayList arrParas = new ArrayList();
            Word.Paragraph fndPara = null;

            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                fndPara = sel.Range.Paragraphs[1];

                while (fndPara != null)
                {
                    fndPara = fndPara.Previous();

                    if (fndPara != null && fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        arrParas.Add(fndPara);
                        break;
                    }
                }

                //for (int i = 0; i < 9; i++)
                //{
                //    sel.Start = nStart;
                //    sel.End = nStart;
                //    fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1, false);

                //    if (fndPara != null)
                //    {
                //        arrParas.Add(fndPara);
                //    }
                //}

            }
            else
            {
                for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
                {
                    if (chkListObjNavOutline.GetItemChecked(i))
                    {
                        sel.Start = nStart;
                        sel.End = nStart;
                        fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1, false,true);

                        if (fndPara != null)
                        {
                            arrParas.Add(fndPara);
                        }
                    }
                }
            }

            // 
            if (arrParas.Count > 0)
            {
                if (arrParas.Count > 1)
                {
                    ClassParagraphComparer paraCmp = new ClassParagraphComparer();
                    arrParas.Sort(paraCmp);
                }

                Word.Paragraph para = (Word.Paragraph)arrParas[arrParas.Count - 1];

                sel.Start = para.Range.Start;
                sel.End = sel.Start;
                sel.Range.GoTo();

                doc.ActiveWindow.ScrollIntoView(para.Range);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnONHeadingNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }
            
            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            /* 
            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                // nav2(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToNext);

                app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;
                app.Browser.Next();

                if (sel.Start == nOldPosStart && sel.End == nOldPosEnd)
                {
                    //sel.Start = nOldPosStart;
                    //sel.End = nOldPosEnd;

                    //sel.Range.GoTo();
                    //doc.ActiveWindow.ScrollIntoView(sel.Range);

                    MessageBox.Show("没有了");
                }

                doc.ActiveWindow.SetFocus();

                return;
            }
            */
            

            Word.Paragraph curPara = sel.Paragraphs[1];
            int nxStart = curPara.Range.End;

            sel.Start = nxStart;
            sel.End = sel.Start;


            ArrayList arrParas = new ArrayList();
            Word.Paragraph fndPara = null;

            if (chkListObjNavOutline.CheckedItems.Count == 0 || chkListObjNavOutline.CheckedItems.Count == 9)
            {
                fndPara = sel.Range.Paragraphs[1];

                while(fndPara != null)
                {
                    if (fndPara != null && fndPara.OutlineLevel != Word.WdOutlineLevel.wdOutlineLevelBodyText)
                    {
                        arrParas.Add(fndPara);
                        break;
                    }

                    fndPara = fndPara.Next();
                }

                //for (int i = 0; i < 9; i++)
                //{
                //    sel.Start = nxStart;
                //    sel.End = sel.Start;

                //    fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1);

                //    if (fndPara != null)
                //    {
                //        arrParas.Add(fndPara);
                //    }
                //}


            }
            else
            {
                for (int i = 0; i < chkListObjNavOutline.Items.Count; i++)
                {
                    if (chkListObjNavOutline.GetItemChecked(i))
                    {
                        sel.Start = nxStart;
                        sel.End = sel.Start;

                        fndPara = m_addin.m_commTools.getOneHeadingPara(doc, i + 1,true,true);

                        if (fndPara != null)
                        {
                            arrParas.Add(fndPara);
                        }
                    }
                }
            }

            // 
            if (arrParas.Count > 0)
            {
                if (arrParas.Count > 1)
                {
                    ClassParagraphComparer paraCmp = new ClassParagraphComparer();
                    arrParas.Sort(paraCmp);
                }

                Word.Paragraph para = (Word.Paragraph)arrParas[0];

                sel.Start = para.Range.Start;
                sel.End = sel.Start;
                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(para.Range);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONTableNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Tables.Count == 0)
            {
                MessageBox.Show("本文档没有表格");
                return;
            }

            // nav2(Word.WdGoToItem.wdGoToTable, Word.WdGoToDirection.wdGoToFirst);
            Word.Selection sel = app.ActiveWindow.Selection;
            sel.HomeKey(Word.WdUnits.wdStory);

            Boolean bInTbl = sel.get_Information(Word.WdInformation.wdWithInTable);

            if (bInTbl)
            {
            }
            else
            {
                app.Browser.Target = Word.WdBrowseTarget.wdBrowseTable;
                app.Browser.Next();
            }

            doc.ActiveWindow.SetFocus();

//             int nPreStart = 0;
//             int nPreEnd = 0;
// 
//             int nCurStart = 0;
//             int nCurEnd = 0;
// 
//             do
//             {   
//                 nPreStart = sel.Range.Start;
//                 nPreEnd = sel.Range.End;
// 
//                 app.Browser.Previous();
// 
//                 nCurStart = sel.Range.Start;
//                 nCurEnd = sel.Range.End;
//             }
//             while(!(nPreStart == nCurStart && nPreEnd == nCurEnd));

            return;
        }

        private void btnONTableNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Tables.Count == 0)
            {
                MessageBox.Show("本文档没有表格");
                return;
            }

            // nav2(Word.WdGoToItem.wdGoToTable, Word.WdGoToDirection.wdGoToLast);
            Word.Selection sel = app.ActiveWindow.Selection;
            sel.EndKey(Word.WdUnits.wdStory);

            Boolean bInTbl = sel.get_Information(Word.WdInformation.wdWithInTable);

            if (bInTbl)
            {
            }
            else
            {
                app.Browser.Target = Word.WdBrowseTarget.wdBrowseTable;
                app.Browser.Previous();
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONTableNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Tables.Count == 0)
            {
                MessageBox.Show("本文档没有表格");
                return;
            }
            
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            // nav2(Word.WdGoToItem.wdGoToTable, Word.WdGoToDirection.wdGoToPrevious);
            app.Browser.Target = Word.WdBrowseTarget.wdBrowseTable;
            app.Browser.Previous();

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONTableNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Tables.Count == 0)
            {
                MessageBox.Show("本文档没有表格");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            // nav2(Word.WdGoToItem.wdGoToTable, Word.WdGoToDirection.wdGoToNext);
            app.Browser.Target = Word.WdBrowseTarget.wdBrowseTable;
            app.Browser.Next();

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONGraphicNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

//             if (doc.InlineShapes.Count == 0)
//             {
//                 MessageBox.Show("本文档没有图形");
//                 return;
//             }
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToFirst);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONGraphicNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

//             if (doc.InlineShapes.Count == 0)
//             {
//                 MessageBox.Show("本文档没有图形");
//                 return;
//             }
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToLast);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONGraphicNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

//             if (doc.InlineShapes.Count == 0)
//             {
//                 MessageBox.Show("本文档没有图形");
//                 return;
//             }
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONGraphicNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

//             if (doc.InlineShapes.Count == 0)
//             {
//                 MessageBox.Show("本文档没有图形");
//                 return;
//             }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToGraphic, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONPageNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToFirst, 1, "");

            doc.ActiveWindow.SetFocus();

            // nav2(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToFirst);
            return;
        }

        private void btnONPageNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToLast, 1, "");

            doc.ActiveWindow.SetFocus();

            // nav2(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToLast);
            return;
        }

        private void btnONPageNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONPageNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToPage, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONSectionNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToFirst, 1, "");

            doc.ActiveWindow.SetFocus();

            // nav2(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToFirst);
            return;
        }

        private void btnONSectionNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.GoTo(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToLast, 1, "");

            doc.ActiveWindow.SetFocus();

            // nav2(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToLast);
            return;
        }

        private void btnONSectionNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONSectionNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToSection, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONFieldNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("本文档没有域");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToFirst);
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONFieldNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("本文档没有域");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToLast);
            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnONFieldNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("本文档没有域");
                return;
            }
            
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnONFieldNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Fields.Count == 0)
            {
                MessageBox.Show("本文档没有域");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToField, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONCommentNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Comments.Count == 0)
            {
                MessageBox.Show("本文档没有批注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToComment, Word.WdGoToDirection.wdGoToFirst);
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONCommentNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Comments.Count == 0)
            {
                MessageBox.Show("本文档没有批注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToComment, Word.WdGoToDirection.wdGoToLast);
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONCommentNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Comments.Count == 0)
            {
                MessageBox.Show("本文档没有批注");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToComment, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnONCommentNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Comments.Count == 0)
            {
                MessageBox.Show("本文档没有批注");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToComment, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONFootnoteNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Footnotes.Count == 0)
            {
                MessageBox.Show("本文档没有脚注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToFootnote, Word.WdGoToDirection.wdGoToFirst);
            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnONFootnoteNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Footnotes.Count == 0)
            {
                MessageBox.Show("本文档没有脚注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToFootnote, Word.WdGoToDirection.wdGoToLast);
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONFootnoteNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Footnotes.Count == 0)
            {
                MessageBox.Show("本文档没有脚注");
                return;
            }
            
            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToFootnote, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONFootnoteNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Footnotes.Count == 0)
            {
                MessageBox.Show("本文档没有脚注");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToFootnote, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEndnoteNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Endnotes.Count == 0)
            {
                MessageBox.Show("本文档没有尾注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToEndnote, Word.WdGoToDirection.wdGoToFirst);
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEndnoteNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Endnotes.Count == 0)
            {
                MessageBox.Show("本文档没有尾注");
                return;
            }

            nav2(Word.WdGoToItem.wdGoToEndnote, Word.WdGoToDirection.wdGoToLast);

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEndnoteNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Endnotes.Count == 0)
            {
                MessageBox.Show("本文档没有尾注");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToEndnote, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEndnoteNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Endnotes.Count == 0)
            {
                MessageBox.Show("本文档没有尾注");
                return;
            }

            Word.Selection sel = app.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToEndnote, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONBookmarkNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Bookmarks.Count == 0)
            {
                MessageBox.Show("本文档没有书签");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Bookmark firstBkmk = null;
            Word.Bookmark lastBkmk = null;
            Word.Bookmark nearstPrevBkmk = null;
            Word.Bookmark nearstNextBkmk = null;

            int nRet = m_addin.m_commTools.getNavBookmk(doc,ref firstBkmk, ref lastBkmk, ref nearstPrevBkmk, ref nearstNextBkmk);

            Object miss = Type.Missing;

            if (firstBkmk != null)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, firstBkmk.Name);
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONBookmarkNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Bookmarks.Count == 0)
            {
                MessageBox.Show("本文档没有书签");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Bookmark firstBkmk = null;
            Word.Bookmark lastBkmk = null;
            Word.Bookmark nearstPrevBkmk = null;
            Word.Bookmark nearstNextBkmk = null;

            int nRet = m_addin.m_commTools.getNavBookmk(doc, ref firstBkmk, ref lastBkmk, ref nearstPrevBkmk, ref nearstNextBkmk);

            Object miss = Type.Missing;

            if (lastBkmk != null)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, lastBkmk.Name);
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONBookmarkNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Bookmarks.Count == 0)
            {
                MessageBox.Show("本文档没有书签");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            Word.Bookmark firstBkmk = null;
            Word.Bookmark lastBkmk = null;
            Word.Bookmark nearstPrevBkmk = null;
            Word.Bookmark nearstNextBkmk = null;

            int nRet = m_addin.m_commTools.getNavBookmk(doc, ref firstBkmk, ref lastBkmk, ref nearstPrevBkmk, ref nearstNextBkmk);

            Object miss = Type.Missing;

            if (nearstPrevBkmk != null)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, nearstPrevBkmk.Name);
                // doc.ActiveWindow.SetFocus();
            }
            else
            {
                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONBookmarkNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.Bookmarks.Count == 0)
            {
                MessageBox.Show("本文档没有书签");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            Word.Bookmark firstBkmk = null;
            Word.Bookmark lastBkmk = null;
            Word.Bookmark nearstPrevBkmk = null;
            Word.Bookmark nearstNextBkmk = null;

            int nRet = m_addin.m_commTools.getNavBookmk(doc, ref firstBkmk, ref lastBkmk, ref nearstPrevBkmk, ref nearstNextBkmk);

            Object miss = Type.Missing;

            if (nearstNextBkmk != null)
            {
                sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, nearstNextBkmk.Name);
                // doc.ActiveWindow.SetFocus();
            }
            else
            {
                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONObjectNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToObject, Word.WdGoToDirection.wdGoToFirst);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONObjectNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToObject, Word.WdGoToDirection.wdGoToLast);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONObjectNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToObject, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONObjectNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToObject, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEquationNavFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToEquation, Word.WdGoToDirection.wdGoToFirst);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEquationNavLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            sel.EndKey(Word.WdUnits.wdStory);
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            sel.GoTo(Word.WdGoToItem.wdGoToEquation, Word.WdGoToDirection.wdGoToPrevious, 1, "");

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            // nav2(Word.WdGoToItem.wdGoToEquation, Word.WdGoToDirection.wdGoToLast);
            return;
        }

        private void btnONEquationNavPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToEquation, Word.WdGoToDirection.wdGoToPrevious);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnONEquationNavNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            nav2(Word.WdGoToItem.wdGoToEquation, Word.WdGoToDirection.wdGoToNext);

            if (sel.Start == nPosStart && sel.End == nPosEnd)
            {
                //sel.Start = nOldPosStart;
                //sel.End = nOldPosEnd;

                //sel.Range.GoTo();
                //doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button9_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // sel.Find.ClearFormatting();Word.WdGoToDirection.wdGoToNext

            sel.GoTo(Word.WdGoToItem.wdGoToHeading,Word.WdGoToDirection.wdGoToFirst, 1, "");

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button12_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // sel.Find.ClearFormatting();Word.WdGoToDirection.wdGoToNext

            sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToLast, 1, "");

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button10_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // sel.Find.ClearFormatting();Word.WdGoToDirection.wdGoToNext

            sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToPrevious, 1, "");

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button11_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            // sel.Find.ClearFormatting();Word.WdGoToDirection.wdGoToNext

            sel.GoTo(Word.WdGoToItem.wdGoToHeading, Word.WdGoToDirection.wdGoToNext, 1, "");

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button13_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.HomeKey(Word.WdUnits.wdStory);

            app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;//Word.WdBrowseTarget.wdBrowseEdit

            app.Browser.Next();

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button16_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            sel.EndKey(Word.WdUnits.wdStory);

            app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;

            app.Browser.Previous();

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button14_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;

            app.Browser.Previous();

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button15_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }


            app.Browser.Target = Word.WdBrowseTarget.wdBrowseHeading;

            app.Browser.Next();

            doc.ActiveWindow.SetFocus();

            return;
        }

        String CopyTmpDocFile(String strDoc)
        {
            String strTmpPath = Path.GetTempPath(); // 临时目录
            String strTmpFile = "", strPostx = "";

            if (!File.Exists(strDoc))
            {
                return null;
            }

            // 拼装临时文件名
            strPostx = DateTime.Now.ToString("yyyyMMdd_hhmmssffff");
            strTmpFile = strTmpPath + Path.GetFileNameWithoutExtension(strDoc) + "_" + strPostx + Path.GetExtension(strDoc);

            if (File.Exists(strTmpFile)) // 判断存在
            {
                try
                {
                	File.Delete(strTmpFile);
                }
                catch (System.Exception ex)
                {
                    return null;
                }
                finally
                {
                }
            }

            File.Copy(strDoc, strTmpFile);

            return strTmpFile;
        }

        private void trvCntList_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            btnCntListRef_Click(null, null);
            return;
        }

        private void rdBtnFillGatherMultiFiles_CheckedChanged(object sender, EventArgs e)
        {
            Boolean bChk = rdBtnFillGatherMultiFiles.Checked;

            btnFillGatherAddFiles.Enabled = bChk;
            btnFillGatherDelFiles.Enabled = bChk;
            btnFillGatherAllSelUnSel.Enabled = bChk;
            chkListBoxTargetFiles.Enabled = bChk;

            return;
        }


        private void RichTextPreviewTest(Word.Font cFnt, Word.ParagraphFormat cParaFmt,
                                         String strMainBody, String strAttachedInfo,
                                         ref RichTextBox rchTxtBox)
        {

            rchTxtBox.Text = "标题1" + strAttachedInfo;

            rchTxtBox.Select(0, 3);

            FontStyle fntStyle = FontStyle.Regular;
            Font fnt = new Font("黑体", 22, fntStyle);

            rchTxtBox.SelectionFont = fnt;


            rchTxtBox.Select(3, strAttachedInfo.Length);
            fntStyle = FontStyle.Italic;

            fnt = new Font("姚体", 11, fntStyle);

            //rchTxtBox.

            return;

            /*
            Font fnt = null;

            FontStyle fntStyle = FontStyle.Regular;

            fntStyle = FontStyle.Regular;

            if (cFnt != null)
            {
                if (cFnt.Bold != 0)
                {
                    fntStyle |= FontStyle.Bold; // 粗体
                }

                if (cFnt.Underline != 0)
                {
                    fntStyle |= FontStyle.Underline; // 下划线
                }

                if (cFnt.Italic != 0)
                {
                    fntStyle |= FontStyle.Italic; // 斜体
                }

                if (cFnt.StrikeThrough != 0 || cFnt.DoubleStrikeThrough != 0)
                {
                    fntStyle |= FontStyle.Strikeout; // 中贯线
                }

                if (cFnt.Superscript != 0)
                {
                    rchTxtBox.SelectionCharOffset = 1000;
                }
                else if (cFnt.Subscript != 0)
                {
                    rchTxtBox.SelectionCharOffset = -1000;
                }
                else
                {
                    rchTxtBox.SelectionCharOffset = 0;
                }

                if (cFnt.Name.Equals("思源黑体"))
                {
                    fnt = new Font(cFnt.Name, cFnt.Size, FontStyle.Italic);
                }
                else
                {
                    if (String.IsNullOrWhiteSpace(cFnt.Name)) // 设置样式
                    {
                        fnt = new Font("宋体", 10.5f, fntStyle);
                    }
                    else
                    {
                        fnt = new Font(cFnt.Name, cFnt.Size, fntStyle);
                    }
                }

                rchTxtBox.SelectionFont = fnt;

                rchTxtBox.SelectionColor = Color.Black;
                if (cFnt.Color != Word.WdColor.wdColorAutomatic)
                {
                    int nColorVal = (int)cFnt.Color;
                    int nRed = (nColorVal & 0xFF);
                    int nGreen = (nColorVal & 0xFF00) >> 8;
                    int nBlue = (nColorVal & 0xFF0000) >> 16;

                    rchTxtBox.SelectionColor = Color.FromArgb(nRed, nGreen, nBlue); // 颜色
                }
            }


            if (cParaFmt != null)
            {
                // 缩进对齐
                rchTxtBox.SelectionAlignment = HorizontalAlignment.Left;
                if (cParaFmt.Alignment == Word.WdParagraphAlignment.wdAlignParagraphLeft) // Word.WdListLevelAlignment.wdListLevelAlignLeft
                {
                    rchTxtBox.SelectionAlignment = HorizontalAlignment.Left;
                }
                else if (cParaFmt.Alignment == Word.WdParagraphAlignment.wdAlignParagraphCenter) // Word.WdListLevelAlignment.wdListLevelAlignCenter
                {
                    rchTxtBox.SelectionAlignment = HorizontalAlignment.Center;
                }
                else if (cParaFmt.Alignment == Word.WdParagraphAlignment.wdAlignParagraphRight) //  Word.WdListLevelAlignment.wdListLevelAlignRight
                {
                    rchTxtBox.SelectionAlignment = HorizontalAlignment.Right;
                }
                else if (cParaFmt.Alignment == Word.WdParagraphAlignment.wdAlignParagraphDistribute)
                {
                    // 
                }
                else if (cParaFmt.Alignment == Word.WdParagraphAlignment.wdAlignParagraphJustify)
                {
                    // 
                }

            }

            rchTxtBox.AppendText(strMainBody); // 显示主体


//             // 构造附属信息
//             if (strFntNum.Equals(strFntSize))
//             {
//                 strPreviewCnt = strDefInput + "[" + strFntName + strFntNum + "]" + "\r\n";
//             }
//             else
//             {
//                 strPreviewCnt = strDefInput + "[" + strFntName + strFntNum + strFntSize + "]" + "\r\n";
//             }


            // 显示附属的INFO
            // 字体：宋体,字号：10.5
            // 
            fntStyle = FontStyle.Regular;

            fnt = new Font("宋体", 10.5f, fntStyle);
            rchTxtBox.SelectionFont = fnt;
            rchTxtBox.SelectionColor = Color.Black;

            // rchTxtBox.Text += strAttachedInfo;

            rchTxtBox.AppendText("\r\n" + strAttachedInfo);
            */

            return;
        }


        private void button17_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Paragraph para = sel.Paragraphs[1];

            return;
        }


        private void btnHighLightGoFirst_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            
            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            sel.HomeKey(Word.WdUnits.wdStory);


            int nColorIndex = colorComboBoxNav.SelectedIndex;
            ArrayList arrFoundHighlight = null;

            if (nColorIndex != -1 && nColorIndex != 0 && nColorIndex <= 16)
            {
                Word.WdColorIndex wColorIndex = (Word.WdColorIndex)m_hashCmbColorIndex2HighlightIndex[nColorIndex];
                Boolean []bColorArrs = new Boolean[18];

                bColorArrs[(int)wColorIndex] = true;

                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc, true, null, true, bColorArrs);
            }
            else
            {
                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc);
            }


            if (arrFoundHighlight != null && arrFoundHighlight.Count > 0)
            {
                foreach (Word.Range rng in arrFoundHighlight)
                {
                    m_addin.m_commTools.RecordMultiSel(rng);
                }

                m_addin.m_commTools.ExecMultiSel(doc);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }
            
            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnHighLightGoPrev_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            int nColorIndex = colorComboBoxNav.SelectedIndex;
            ArrayList arrFoundHighlight = null;

            if (nColorIndex != -1 && nColorIndex != 0 && nColorIndex <= 16)
            {
                Word.WdColorIndex wColorIndex = (Word.WdColorIndex)m_hashCmbColorIndex2HighlightIndex[nColorIndex];
                Boolean[] bColorArrs = new Boolean[18];

                bColorArrs[(int)wColorIndex] = true;

                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc, false, null, true, bColorArrs);
            }
            else
            {
                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc,false);
            }


            if (arrFoundHighlight != null && arrFoundHighlight.Count > 0)
            {
                foreach (Word.Range rng in arrFoundHighlight)
                {
                    m_addin.m_commTools.RecordMultiSel(rng);
                }

                m_addin.m_commTools.ExecMultiSel(doc);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void btnHighLightGoNext_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            int nColorIndex = colorComboBoxNav.SelectedIndex;
            ArrayList arrFoundHighlight = null;

            if (nColorIndex != -1 && nColorIndex != 0 && nColorIndex <= 16)
            {
                Word.WdColorIndex wColorIndex = (Word.WdColorIndex)m_hashCmbColorIndex2HighlightIndex[nColorIndex];
                Boolean[] bColorArrs = new Boolean[18];

                bColorArrs[(int)wColorIndex] = true;

                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc, true, null, true, bColorArrs);
            }
            else
            {
                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc);
            }


            if (arrFoundHighlight != null && arrFoundHighlight.Count > 0)
            {
                foreach (Word.Range rng in arrFoundHighlight)
                {
                    m_addin.m_commTools.RecordMultiSel(rng);
                }

                m_addin.m_commTools.ExecMultiSel(doc);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }


        private void btnHighLightGoLast_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nOldPosStart = sel.Start;
            int nOldPosEnd = sel.End;

            sel.EndKey(Word.WdUnits.wdStory);

            int nColorIndex = colorComboBoxNav.SelectedIndex;
            ArrayList arrFoundHighlight = null;

            if (nColorIndex != -1 && nColorIndex != 0 && nColorIndex <= 16)
            {
                Word.WdColorIndex wColorIndex = (Word.WdColorIndex)m_hashCmbColorIndex2HighlightIndex[nColorIndex];
                Boolean[] bColorArrs = new Boolean[18];

                bColorArrs[(int)wColorIndex] = true;

                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc, false, null, true, bColorArrs);
            }
            else
            {
                arrFoundHighlight = m_addin.m_commTools.findNextSpecificHighlightInScope(doc, false);
            }


            if (arrFoundHighlight != null && arrFoundHighlight.Count > 0)
            {
                foreach (Word.Range rng in arrFoundHighlight)
                {
                    m_addin.m_commTools.RecordMultiSel(rng);
                }

                m_addin.m_commTools.ExecMultiSel(doc);
            }
            else
            {
                sel.Start = nOldPosStart;
                sel.End = nOldPosEnd;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);

                MessageBox.Show("没有了");
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button9_Click_1(object sender, EventArgs e)
        {
            // First
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            MessageBox.Show("Start:" + sel.Start + ",End:" + sel.End);

            return;
        }

        private void button10_Click_1(object sender, EventArgs e)
        {
            // Last
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.ListParagraphs.Count == 0)
            {
                MessageBox.Show("本文档没有列表段落");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            Word.Paragraph firstListPara = null;
            Word.Paragraph lastListPara = null;
            Word.Paragraph nearstPrevListPara = null;
            Word.Paragraph nearstNextListPara = null;

            int nRet = m_addin.m_commTools.getNavListParagraphs(doc, ref firstListPara, ref lastListPara, ref nearstPrevListPara, ref nearstNextListPara);

            Object miss = Type.Missing;

            if (lastListPara != null)
            {
                // sel.GoTo(Word.WdGoToItem.wdGoToBookmark, miss, miss, firstBkmk.Name);
                sel.Start = lastListPara.Range.Start;
                sel.End = lastListPara.Range.End;

                sel.Range.GoTo();
                doc.ActiveWindow.ScrollIntoView(sel.Range);
            }

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void button11_Click_1(object sender, EventArgs e)
        {
            DateTime dsAA = DateTime.Now;


            // Prev
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            app.Options.Pagination = false;

            doc.ActiveWindow.View.Type = Word.WdViewType.wdNormalView;  


            // insert a cap label
            // copy field
            // insert a FAKE cap label in every tables and pictures
            // find specail FAKE cap label and paste
            // could it be multi selection?

            Word.Style tizhuStyle = null;

            try
            {
            	tizhuStyle = doc.Styles["题注"];
            }
            catch (System.Exception ex)
            {
                tizhuStyle = null;
            }



            Word.CaptionLabel TblCapLbl = null;
            Word.CaptionLabel InShpCapLbl = null;

            try
            {
                TblCapLbl = app.CaptionLabels["表"];
            }
            catch (System.Exception ex)
            {
                TblCapLbl = app.CaptionLabels.Add("表");
            }


            try
            {
                InShpCapLbl = app.CaptionLabels["图"];
            }
            catch (System.Exception ex)
            {
                InShpCapLbl = app.CaptionLabels.Add("图");
            }

            Word.WdCaptionPosition wdPos = Word.WdCaptionPosition.wdCaptionPositionBelow;//Word.WdCaptionPosition.wdCaptionPositionBelow;

            Word.Paragraph para = null;
            int nSelCnt = 0;
            int nTblCnt = 0, nInShpCnt = 0;
            Word.Field tblStyleRefField = null, tblSeqField = null;
            Word.Range fldRng = null;
            String strTblHyphen = "";

            const String strTblStyleRefPlaceHolder = "#XTBLSTYREFX#";
            const String strTblSeqRefPlaceHolder = "#XTBLREPX#";
            String strTblFieldPlaceHolder = "";

            DateTime dsAB = DateTime.Now;

            foreach (Word.Table tblItem in doc.Tables)
            {
                nTblCnt++;

                doc.ActiveWindow.ScrollIntoView(tblItem.Range);
                tblItem.Range.GoTo();

                if (nTblCnt == 1)
                {
                    tblItem.Range.Select();

                    sel.InsertCaption(TblCapLbl, "", "", wdPos, false);
                    sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                    foreach (Word.Field fld in sel.Paragraphs[1].Range.Fields)
                    {
                        if (fld.Type == Word.WdFieldType.wdFieldStyleRef)
                        {
                            if (tblStyleRefField == null)
                            {
                                tblStyleRefField = fld;
                            }
                        }

                        if (fld.Type == Word.WdFieldType.wdFieldSequence)
                        {
                            if (tblSeqField == null)
                            {
                                tblSeqField = fld;
                            }
                        }
                    }

                    strTblFieldPlaceHolder = TblCapLbl.Name + " " + strTblSeqRefPlaceHolder;

                    if (tblStyleRefField != null && tblSeqField != null)
                    {
                        fldRng = doc.Range(tblStyleRefField.Result.End, tblSeqField.Result.Start);

                        strTblHyphen = fldRng.Text;

                        strTblFieldPlaceHolder = TblCapLbl.Name + " " + strTblStyleRefPlaceHolder + strTblHyphen + strTblSeqRefPlaceHolder;
                    }

                }
                else
                {
                    if (wdPos == Word.WdCaptionPosition.wdCaptionPositionBelow)
                    {
                        sel.Start = sel.End = tblItem.Range.Paragraphs.Last.Range.End;
                        sel.SetRange(sel.Start, sel.End);

                        sel.InsertParagraphAfter();
                        sel.InsertBefore(strTblFieldPlaceHolder);
                        sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                        if (tizhuStyle != null)
                        {
                            sel.Paragraphs[1].set_Style(tizhuStyle);
                        }
                    }
                    else // above
                    {
                        Word.Paragraph PrevPara = tblItem.Range.Paragraphs.First.Previous();

                        // MessageBox.Show(PrevPara.Range.Text);

                        if (PrevPara == null)
                        {
                            sel.Start = sel.End = tblItem.Range.Paragraphs.First.Range.Start;
                            sel.SetRange(sel.Start, sel.End);

                            sel.InsertParagraphBefore();
                            sel.InsertBefore(strTblFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }
                        }
                        else
                        {
                            sel.Start = sel.End = (PrevPara.Range.End - 1);
                            sel.SetRange(sel.Start, sel.End);

                            sel.InsertParagraphAfter();
                            sel.InsertAfter(strTblFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }
                        }

                        sel.Paragraphs[1].Format.KeepWithNext = -1; //true
                    }

                    sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;
                }
            }

            DateTime dsAC = DateTime.Now;

            

            if (tblSeqField != null)
            {
                sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strTblSeqRefPlaceHolder;
                sel.Find.Replacement.Text = "";
                sel.Find.Forward = true;
                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                tblSeqField.Copy();

                while (sel.Find.Found)
                {
                    para = sel.Paragraphs[1];

                    //sel.Paste();
                    m_addin.m_commTools.RecordMultiSel(sel.Range);
                    nSelCnt++;
                    sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                    if (nSelCnt == 50)
                    {
                        m_addin.m_commTools.ExecMultiSel(doc);
                        sel.Paste();
                        nSelCnt = 0;
                    }

                    if (para.Next() == null)
                    {
                        if (nSelCnt > 0)
                        {
                            m_addin.m_commTools.ExecMultiSel(doc);
                            sel.Paste();
                            nSelCnt = 0;
                        }

                        break;
                    }

                    sel.Find.Execute();
                }

                if (nSelCnt > 0)
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                    sel.Paste();
                }
            }

            DateTime dsAD = DateTime.Now;

            // 
            if (tblStyleRefField != null)
            {
                sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strTblStyleRefPlaceHolder;
                sel.Find.Replacement.Text = "";
                sel.Find.Forward = true;
                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();


                tblStyleRefField.Copy();

                nSelCnt = 0;

                while (sel.Find.Found)
                {
                    para = sel.Paragraphs[1];

                    //sel.Paste();
                    m_addin.m_commTools.RecordMultiSel(sel.Range);
                    nSelCnt++;
                    sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                    if (nSelCnt == 50)
                    {
                        m_addin.m_commTools.ExecMultiSel(doc);
                        sel.Paste();
                        nSelCnt = 0;
                    }


                    if (para.Next() == null)
                    {
                        if (nSelCnt > 0)
                        {
                            m_addin.m_commTools.ExecMultiSel(doc);
                            sel.Paste();
                            nSelCnt = 0;
                        }

                        break;
                    }

                    sel.Find.Execute();
                }

                if (nSelCnt > 0)
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                    sel.Paste();
                }
            }

            DateTime dsAE = DateTime.Now;

            DateTime dsBA = DateTime.Now;

            ///////////////////// inline shape
            ArrayList arrIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsNotInTbl = new ArrayList();
            ArrayList arrIsolatePicsInTbl = new ArrayList();
            ArrayList arrNotIsolatePicsInTbl = new ArrayList();
            ArrayList arrInShps = null;

            arrInShps = m_addin.m_commTools.getInlineShpsInScope(doc, arrIsolatePicsNotInTbl, arrNotIsolatePicsNotInTbl,
                                                                 arrIsolatePicsInTbl, arrNotIsolatePicsInTbl, true);

            DateTime dsBB = DateTime.Now;

            Word.Field inshpStyleRefField = null, inshpSeqField = null;
            Boolean bIgnore = false;
            String strInShpHyphen = "";

            const String strInShpStyleRefPlaceHolder = "#XTUSTYREFX#";
            const String strInShpSeqRefPlaceHolder = "#XTUREPX#";
            String strInShpFieldPlaceHolder = "";


            foreach (Word.Paragraph inShpPara in arrIsolatePicsNotInTbl)
            {
                doc.ActiveWindow.ScrollIntoView(inShpPara.Range);
                inShpPara.Range.GoTo();

                bIgnore = true;
                foreach (Word.InlineShape inShp in inShpPara.Range.InlineShapes)
                {
                    if (!(inShp.Type == Word.WdInlineShapeType.wdInlineShapePictureBullet ||
                        (inShp.OLEFormat != null && inShp.OLEFormat.DisplayAsIcon)))
                    {
                        bIgnore = false;
                        break;
                    }
                }

                if (bIgnore)
                {
                    continue;
                }

                nInShpCnt++;

                if (nInShpCnt == 1)
                {
                    inShpPara.Range.Select();

                    sel.InsertCaption(InShpCapLbl, "", "", wdPos, false);
                    sel.Range.Paragraphs.Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                    foreach (Word.Field fld in sel.Paragraphs[1].Range.Fields)
                    {
                        if (fld.Type == Word.WdFieldType.wdFieldStyleRef)
                        {
                            if (inshpStyleRefField == null)
                            {
                                inshpStyleRefField = fld;
                            }
                        }

                        if (fld.Type == Word.WdFieldType.wdFieldSequence)
                        {
                            if (inshpSeqField == null)
                            {
                                inshpSeqField = fld;
                            }
                        }
                    }

                    strInShpFieldPlaceHolder = InShpCapLbl.Name + " " + strInShpSeqRefPlaceHolder;

                    if (inshpStyleRefField != null && inshpSeqField != null)
                    {
                        fldRng = doc.Range(inshpStyleRefField.Result.End, inshpSeqField.Result.Start);

                        strInShpHyphen = fldRng.Text;

                        strInShpFieldPlaceHolder = InShpCapLbl.Name + " " + strInShpStyleRefPlaceHolder + strInShpHyphen + strInShpSeqRefPlaceHolder;
                    }

                }
                else
                {
                    if (wdPos == Word.WdCaptionPosition.wdCaptionPositionBelow)
                    {
                        if (inShpPara.Next() == null)
                        {
                            sel.SetRange(inShpPara.Range.End, inShpPara.Range.End);

                            sel.InsertParagraphAfter();
                            sel.InsertAfter(strInShpFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }

                            sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                            sel.Paragraphs[1].Previous().Format.KeepWithNext = -1;

                            //inShpPara.Range.ParagraphFormat.KeepWithNext = -1;// True;
                        }
                        else
                        {
                            sel.SetRange(inShpPara.Range.End, inShpPara.Range.End);

                            sel.InsertParagraphAfter();
                            sel.InsertBefore(strInShpFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }

                            sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                            inShpPara.Format.KeepWithNext = -1;// True;
                        }
                    }
                    else // above
                    {
                        if (inShpPara.Previous() == null)
                        {
                            sel.SetRange(inShpPara.Range.Start, inShpPara.Range.Start);
                            sel.InsertParagraphBefore();
                            sel.InsertBefore(strInShpFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }

                            sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                            sel.Paragraphs[1].Format.KeepWithNext = -1;

                            //sel.SetRange(inShpPara.Range.Start, inShpPara.Range.Start);
                            //para = doc.Paragraphs.First.Range.Paragraphs.Add();
                            //sel.HomeKey(Word.WdUnits.wdStory);
                            //sel.TypeText(strInShpFieldPlaceHolder);
                            //sel.Paragraphs.Format.KeepWithNext = -1;
                        }
                        else
                        {
                            // inShpPara.Format.KeepWithNext = -1;// True;

                            sel.SetRange(inShpPara.Range.Start, inShpPara.Range.Start);

                            sel.InsertParagraphBefore();
                            sel.InsertBefore(strInShpFieldPlaceHolder);
                            sel.Collapse(Word.WdCollapseDirection.wdCollapseStart);

                            if (tizhuStyle != null)
                            {
                                sel.Paragraphs[1].set_Style(tizhuStyle);
                            }

                            sel.Paragraphs[1].Alignment = Word.WdParagraphAlignment.wdAlignParagraphCenter;

                            sel.Paragraphs[1].Format.KeepWithNext = -1;
                        }
                    }
                }
            }

            DateTime dsBC = DateTime.Now;

            if (inshpSeqField != null)
            {
                sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strInShpSeqRefPlaceHolder;
                sel.Find.Replacement.Text = "";
                sel.Find.Forward = true;
                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                inshpSeqField.Copy();

                nSelCnt = 0;

                while (sel.Find.Found)
                {
                    para = sel.Paragraphs[1];

                    m_addin.m_commTools.RecordMultiSel(sel.Range);
                    nSelCnt++;
                    sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                    if (nSelCnt == 50)
                    {
                        m_addin.m_commTools.ExecMultiSel(doc);
                        sel.Paste();
                        nSelCnt = 0;
                    }


                    if (para.Next() == null)
                    {
                        if (nSelCnt > 0)
                        {
                            m_addin.m_commTools.ExecMultiSel(doc);
                            sel.Paste();
                            nSelCnt = 0;
                        }

                        break;
                    }

                    sel.Find.Execute();
                }

                if (nSelCnt > 0)
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                    sel.Paste();
                }
            }

            DateTime dsBD = DateTime.Now;

            if (inshpStyleRefField != null)
            {
                sel.HomeKey(Word.WdUnits.wdStory);

                sel.Find.ClearFormatting();

                sel.Find.Text = strInShpStyleRefPlaceHolder;
                sel.Find.Replacement.Text = "";
                sel.Find.Forward = true;
                sel.Find.Wrap = Word.WdFindWrap.wdFindStop;
                sel.Find.Format = false;
                sel.Find.MatchCase = false;
                sel.Find.MatchWholeWord = false;
                sel.Find.MatchByte = false;
                sel.Find.MatchWildcards = false;
                sel.Find.MatchSoundsLike = false;
                sel.Find.MatchAllWordForms = false;

                sel.Find.Execute();

                inshpStyleRefField.Copy();

                nSelCnt = 0;

                while (sel.Find.Found)
                {
                    para = sel.Paragraphs[1];

                    m_addin.m_commTools.RecordMultiSel(sel.Range);
                    nSelCnt++;
                    sel.Collapse(Word.WdCollapseDirection.wdCollapseEnd);

                    if (nSelCnt == 50)
                    {
                        m_addin.m_commTools.ExecMultiSel(doc);
                        sel.Paste();
                        nSelCnt = 0;
                    }


                    if (para.Next() == null)
                    {
                        if (nSelCnt > 0)
                        {
                            m_addin.m_commTools.ExecMultiSel(doc);
                            sel.Paste();
                            nSelCnt = 0;
                        }

                        break;
                    }

                    sel.Find.Execute();
                }

                if (nSelCnt > 0)
                {
                    m_addin.m_commTools.ExecMultiSel(doc);
                    sel.Paste();
                }
            }

            DateTime dsBE = DateTime.Now;

            doc.Fields.Update();

            DateTime dsBF = DateTime.Now;

            doc.ActiveWindow.View.Type = Word.WdViewType.wdPrintView;
            app.Options.Pagination = true;

            DateTime dsBG = DateTime.Now;

            TimeSpan tsA = dsAE - dsAA;
            TimeSpan tsABA = dsAB - dsAA;
            TimeSpan tsACB = dsAC - dsAB;
            TimeSpan tsADC = dsAD - dsAC;
            TimeSpan tsAED = dsAE - dsAD;

            TimeSpan tsB = dsBG - dsBA;
            TimeSpan tsBBA = dsBB - dsBA;
            TimeSpan tsBCB = dsBC - dsBB;
            TimeSpan tsBDC = dsBD - dsBC;
            TimeSpan tsBED = dsBE - dsBD;
            TimeSpan tsBFE = dsBF - dsBE;
            TimeSpan tsBGF = dsBG - dsBF;

            TimeSpan tsBA = dsBG - dsAA;

            String strRet = "";

            strRet += "总数:" + (nTblCnt + nInShpCnt) + "表:" + nTblCnt + ",图" + nInShpCnt + "\r\n";

            strRet += "[Total]:" + tsBA.TotalMilliseconds + "\r\n" +
                      "[A]:" + tsA.TotalMilliseconds + "\r\n" +
                      "  [BA]:" + tsABA.TotalMilliseconds + "\r\n" +
                      "  [CB]:" + tsACB.TotalMilliseconds + "\r\n" +
                      "  [DC]:" + tsADC.TotalMilliseconds + "\r\n" +
                      "  [ED]:" + tsAED.TotalMilliseconds + "\r\n" +
                      "[B]:" + tsB.TotalMilliseconds + "\r\n" +
                      "  [BA]:" + tsBBA.TotalMilliseconds + "\r\n" +
                      "  [CB]:" + tsBCB.TotalMilliseconds + "\r\n" +
                      "  [DC]:" + tsBDC.TotalMilliseconds + "\r\n" +
                      "  [ED]:" + tsBED.TotalMilliseconds + "\r\n" +
                      "  [FE]:" + tsBFE.TotalMilliseconds + "\r\n" +
                      "  [GF]:" + tsBGF.TotalMilliseconds;

            MessageBox.Show(strRet);

            return;
        }

        private void button12_Click_1(object sender, EventArgs e)
        {
            // Next
            // Prev
            Word.Application app = m_addin.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("没有活动的文档");
                return;
            }
            finally
            {
            }

            if (doc.ListParagraphs.Count == 0)
            {
                MessageBox.Show("本文档没有列表段落");
                return;
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            int nPosStart = sel.Start;
            int nPosEnd = sel.End;

            sel.GoToNext(Word.WdGoToItem.wdGoToField);

            doc.ActiveWindow.SetFocus();

            return;
        }

        private void tabPageHeadingSn_Enter(object sender, EventArgs e)
        {
            if (!m_bInitedDatabase)
            {
                InitHeadingSnAndStyleDatabase();
            }

            if (!m_bLoadedHeadingSn)
            {
                m_addin.loadAllHeadingSnSchemes();
                initHeadingSnListLevels(); // 初始化章节序号
            }

            return;
        }

        private void tabPageHeadingStyles_Enter(object sender, EventArgs e)
        {
            if (!m_bInitedDatabase)
            {
                InitHeadingSnAndStyleDatabase();
            }

            if (!m_bLoadedHeadingStyle)
            {
                m_addin.loadAllHeadingStyleSchemes();
                initHeadingStyleSchemes(); // 初始化章节样式
            }

            return;
        }

        private void tvShareLib_AfterExpand(object sender, TreeViewEventArgs e)
        {
            if (e.Node.FullPath.StartsWith("公共库") || e.Node.FullPath.StartsWith("个人库"))
            {
                if (!m_addin.m_bLoginedStatus)
                {
                    // MessageBox.Show("请先登录");
                    e.Node.Collapse();
                    return;
                }
            }

            return;
        }

        private class formTreeNode2ContentControlItem
        {
            public Word.ContentControl contentControl = null;
            // public 
        }

        private String encodeFormContentBody(String strCnt)
        {
            String strEncodedCnt = "";

            // strEncodedCnt += "[ContentStart:ContentStart][" + m_strFormContentBodyKey + ":\"" + strCnt + "\"][ContentEnd:ContentEnd]";
            // strEncodedCnt += "[" + m_strFormContentBodyKey + ":\"" + strCnt + "\"]";
            strEncodedCnt += "[" + m_strFormContentBodyKey + ":" + strCnt + "]";

            return strEncodedCnt;
        }


        private String encodeFormCtrlInfo(String strName,String strRes,Boolean bFntLock, Boolean bParaFmtLock, Boolean bContentLock,String strMD5Pas)
        {
            String strInfo = "[" + m_strFormKey + ":" + m_strFormValue + "]" + "[" + m_strFormNameKey + ":" + strName + "]" + "[" + m_strFormResKey + ":" + strRes + "]";
            String strPass = "[" + m_strFormPassKey + ":" + strMD5Pas + "]";

            String strFntInfo = "";
            if (bFntLock)
            {
                strFntInfo = "[" + m_strFormFontLockKey + ":1]";
            }
            else
            {
                strFntInfo = "[" + m_strFormFontLockKey + ":0]";
            }

            String strParaFmtInfo = "";

            if (bParaFmtLock)
            {
                strParaFmtInfo = "[" + m_strFormParaFmtLockKey + ":1]";
            }
            else
            {
                strParaFmtInfo = "[" + m_strFormParaFmtLockKey + ":0]";
            }

            String strContentInfo = "";

            if (bContentLock)
            {
                strContentInfo = "[" + m_strFormContentLockKey + ":1]";
            }
            else
            {
                strContentInfo = "[" + m_strFormContentLockKey + ":0]";
            }

            strInfo += strFntInfo + strParaFmtInfo + strContentInfo + strPass;

            return strInfo;
        }


        private Hashtable decodeFormCtrlInfo(String strInfo)
        {
            return ClassOfficeCommon.Decode(strInfo);
        }


        private void btnFormDesignAddContentControl_Click(object sender, EventArgs e)
        {
            // ADD

            Word.Application app = m_addin.Application;
            Word.Document doc = null;// m_ownerAddin.Application.ActiveDocument;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;


            // search duplicate / embeded
            // add special contentcontrol and treenode in ui
            // alloc resources
            String strName = txtFormDesignName.Text.Trim();

            //@TODO, VALID check. 不能包括非法字符（"[]:,")等


            if (String.IsNullOrWhiteSpace(strName))
            {
                MessageBox.Show("请输入名称");
                return;
            }

            TreeNode[] resNds = trvFormDesignMgr.Nodes.Find(strName,true);
            if (resNds != null && resNds.GetLength(0) > 0)
            {
                MessageBox.Show("名称重复");
                return;
            }

            if (sel.Range.End - sel.Range.Start > 1)
            {
                MessageBox.Show("不支持在选择区进行创建，请取消选择后再操作"); 
                return;
            }

            // 
            if (sel.Range.ParentContentControl != null)
            {
                MessageBox.Show("不支持在内容控件中进行嵌套");
                return;
            }

            m_bStopCallHandler = true;

            Word.ContentControl newCnt = doc.ContentControls.Add(Word.WdContentControlType.wdContentControlRichText);

            if (newCnt == null)
            {
                m_bStopCallHandler = false;
                MessageBox.Show("创建表单项失败");
                return;
            }

            m_bStopCallHandler = false;

            newCnt.Range.Font.ColorIndex = Word.WdColorIndex.wdGray25;
            newCnt.Title = strName;

            //编码FONT、段落
            ClassFont cFnt = new ClassFont();
            cFnt.clone(newCnt.Range.Font);
            String strFntInfo = cFnt.encode2String();

            ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
            cParaFmt.clone(newCnt.Range.ParagraphFormat);
            String strParaFmtInfo = cParaFmt.encode2String();

            String strTmp = newCnt.Range.Text.Replace("[", "%#LEFT_BRAC^*");
            String strTransTxt = strTmp.Replace("]", "%#RIGHT_BRAC^*");

            String strEncodedCnt = encodeFormContentBody(strTransTxt);

            int nLen = strFntInfo.Length + strParaFmtInfo.Length + strEncodedCnt.Length;
            int nCnt = 0;

            nCnt = m_docCustomItemsMgr.calcSlotsNum(nLen);

            ArrayList arrRes = new ArrayList();

            int nRet = m_docCustomItemsMgr.alloc(m_strFormNameKey,nCnt,ref arrRes);

            if (nRet != 0 || arrRes.Count == 0 || arrRes.Count != nCnt)
            {
                MessageBox.Show("文档已无必须存储空间记录表单项信息");
                return;
            }

            //@TODO, Save into doc
            newCnt.Range.Text = "点击输入内容";

            String strSavedInfo = strFntInfo + strParaFmtInfo + strEncodedCnt;// 应该内容再编码

            nRet = m_docCustomItemsMgr.saveIntoDoc(m_strFormNameKey, strSavedInfo,arrRes);
            if (nRet != 0)
            {
                MessageBox.Show("不能保存数据到文档存储空间中");
                return;
            }

            String strRes = "";
            int nVal = 0;

            for (int i = 0; i < arrRes.Count - 1; i++)
            {
                nVal = (int)arrRes[i];
                strRes += nVal + ",";
            }

            nVal = (int)arrRes[arrRes.Count - 1];
            strRes += nVal;
            
            // String strInfo = m_strFormKey + "[" + m_strFormNameKey + ":" + strName + "]" + "[" + m_strFormResKey + ":" + strRes + "]";
            String strInfo = encodeFormCtrlInfo(strName,strRes,false,false,false,"");

            newCnt.SetPlaceholderText(null,null,strInfo);
            //newCnt.PlaceholderText.Value = strInfo;

            formTreeNode2ContentControlItem recItem = new formTreeNode2ContentControlItem();
            recItem.contentControl = newCnt;

            TreeNode trNd = new TreeNode(strName);
            trNd.Name = strName;
            trNd.Tag = recItem;
            trvFormDesignMgr.Nodes.Add(trNd);
            trvFormDesignMgr.SelectedNode = trNd;

            MessageBox.Show("完成");

            return;
        }

        private void btnFormDesignRemoveContentControl_Click(object sender, EventArgs e)
        {
            // REMOVE
            // remove content control and treenode in ui
            // release resources
            Word.Application app = m_addin.Application;
            Word.Document doc = null;// m_ownerAddin.Application.ActiveDocument;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            if (trvFormDesignMgr.SelectedNode == null)
            {
                MessageBox.Show("请选中一项");
                return;
            }

            TreeNode selNode = trvFormDesignMgr.SelectedNode;
            String strName = selNode.Text;

            DialogResult res = MessageBox.Show("将清除表单项和内容，确认删除？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)selNode.Tag;

            if (recItem == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            Word.ContentControl cnt = null;


            try
            {
                cnt = recItem.contentControl;

                String strInfo = cnt.PlaceholderText.Value;
                Hashtable hashInfo = ClassOfficeCommon.Decode(strInfo);

                String strSlotsInfo = (String)hashInfo[m_strFormResKey];

                if (!String.IsNullOrWhiteSpace(strSlotsInfo))
                {
                    String[] strs = strSlotsInfo.Split(',');
                    int nSlotSn = 0;
                    ArrayList arrSlots = new ArrayList();

                    foreach(String strItem in strs)
                    {
                        if (int.TryParse(strItem,out nSlotSn))
                        {
                            arrSlots.Add(nSlotSn);
                        }
                    }

                    int nRet = m_docCustomItemsMgr.release(m_strFormNameKey, arrSlots);
                    if (nRet != 0)
                    {
                        MessageBox.Show("释放存储空间时出错");
                    }
                }

                m_bStopCallHandler = true;

                if (cnt != null)
                {
                    cnt.LockContentControl = false;
                    cnt.LockContents = false;

                    cnt.Delete(true);
                }
                m_bStopCallHandler = false;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
            }

            TreeNode prevNode = selNode.PrevNode;

            selNode.Remove();

            if (prevNode != null)
            {
                trvFormDesignMgr.SelectedNode = prevNode;
            }

            MessageBox.Show("完成");

            return;
        }

        private void btnFormDesignUpdateContentControl_Click(object sender, EventArgs e)
        {
            // UPDATE
            // if name different, and no duplicate
            // then update 

            Word.Application app = m_addin.Application;
            Word.Document doc = null;// m_ownerAddin.Application.ActiveDocument;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;


            // search duplicate / embeded
            // add special contentcontrol and treenode in ui
            // alloc resources
            String strName = txtFormDesignName.Text.Trim();

            //@TODO, VALID check. 不能包括非法字符（"[]:,")等


            if (String.IsNullOrWhiteSpace(strName))
            {
                MessageBox.Show("请输入名称");
                return;
            }

            TreeNode[] resNds = trvFormDesignMgr.Nodes.Find(strName, true);
            if (resNds != null && resNds.GetLength(0) > 0)
            {
                MessageBox.Show("名称重复");
                return;
            }

            TreeNode selNode = trvFormDesignMgr.SelectedNode;

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)selNode.Tag;

            if (recItem == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            Word.ContentControl newCnt = null;

            try
            {
                newCnt = recItem.contentControl;
                if (newCnt != null)
                {
                    newCnt.Title = strName;
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }
            finally
            {
            }

            int nRet = 0;

            if (newCnt != null)
            {
                // release
                String strInfo = newCnt.PlaceholderText.Value;
                Hashtable hashInfo = ClassOfficeCommon.Decode(strInfo);

                String strSlotsInfo = (String)hashInfo[m_strFormResKey];
                String strSavedPas = (String)hashInfo[m_strFormPassKey];

                if (!String.IsNullOrWhiteSpace(strSlotsInfo))
                {
                    String[] strs = strSlotsInfo.Split(',');
                    int nSlotSn = 0;
                    ArrayList arrSlots = new ArrayList();

                    foreach (String strItem in strs)
                    {
                        if (int.TryParse(strItem, out nSlotSn))
                        {
                            arrSlots.Add(nSlotSn);
                        }
                    }

                    nRet = m_docCustomItemsMgr.release(m_strFormNameKey, arrSlots);
                    if (nRet != 0)
                    {
                        MessageBox.Show("释放存储空间时出错");
                    }
                }

                // re alloc
                //编码FONT、段落
                ClassFont cFnt = new ClassFont();
                cFnt.clone(newCnt.Range.Font);
                String strFntInfo = cFnt.encode2String();

                ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
                cParaFmt.clone(newCnt.Range.ParagraphFormat);
                String strParaFmtInfo = cParaFmt.encode2String();

                String strTmp = newCnt.Range.Text.Replace("[", "%#LEFT_BRAC^*");
                String strTransTxt = strTmp.Replace("]", "%#RIGHT_BRAC^*");

                String strEncodedCnt = encodeFormContentBody(strTransTxt);

                int nLen = strFntInfo.Length + strParaFmtInfo.Length + strEncodedCnt.Length;
                int nCnt = 0;

                nCnt = m_docCustomItemsMgr.calcSlotsNum(nLen);

                ArrayList arrRes = new ArrayList();

                nRet = m_docCustomItemsMgr.alloc(m_strFormNameKey, nCnt, ref arrRes);

                if (nRet != 0 || arrRes.Count == 0 || arrRes.Count != nCnt)
                {
                    MessageBox.Show("文档已无必须存储空间记录表单项信息");
                    return;
                }

                //Save into doc
                String strSavedInfo = strFntInfo + strParaFmtInfo + strEncodedCnt;// 应该内容再编码

                nRet = m_docCustomItemsMgr.saveIntoDoc(m_strFormNameKey, strSavedInfo, arrRes);
                if (nRet != 0)
                {
                    MessageBox.Show("不能保存数据到文档存储空间中");
                    return;
                }


                // re encode placeholder text
                String strRes = "";
                int nVal = 0;

                for (int i = 0; i < arrRes.Count - 1; i++)
                {
                    nVal = (int)arrRes[i];
                    strRes += nVal + ",";
                }

                nVal = (int)arrRes[arrRes.Count - 1];
                strRes += nVal;

                // String strInfo = m_strFormKey + "[" + m_strFormNameKey + ":" + strName + "]" + "[" + m_strFormResKey + ":" + strRes + "]";
                Boolean bFontLock = false, bParaFmtLock = false, bContentLock = false;

                String strFontLockVal = (String)hashInfo[m_strFormFontLockKey];
                String strParaFmtLockVal = (String)hashInfo[m_strFormParaFmtLockKey];
                String strContentLockVal = (String)hashInfo[m_strFormContentLockKey];

                if (!String.IsNullOrWhiteSpace(strFontLockVal))
                {
                    bFontLock = strFontLockVal.Equals("1");
                }

                if (!String.IsNullOrWhiteSpace(strParaFmtLockVal))
                {
                    bParaFmtLock = strParaFmtLockVal.Equals("1");
                }

                if (!String.IsNullOrWhiteSpace(strContentLockVal))
                {
                    bContentLock = strContentLockVal.Equals("1");
                }

                strInfo = encodeFormCtrlInfo(strName, strRes, bFontLock, bParaFmtLock, bContentLock, strSavedPas);

                newCnt.SetPlaceholderText(null, null, strInfo);
                // newCnt.PlaceholderText.Value = strInfo;
            }

            selNode.Name = strName;
            selNode.Text = strName;

            MessageBox.Show("完成");

            return;
        }


        private void trvFormDesignMgr_AfterSelect(object sender, TreeViewEventArgs e)
        {
            // 
            txtFormDesignName.Text = e.Node.Text;

            // load status and change button, update info
            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)e.Node.Tag;

            if(recItem == null)
            {
                return;
            }

            Word.ContentControl cnt = null;

            try
            {
                cnt = recItem.contentControl;

                if (cnt == null)
                {
                    return;
                }
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {
                
            }

            String strCntText = cnt.Range.Text;

            String strInfo = cnt.PlaceholderText.Value;

            Hashtable hashInfo = ClassOfficeCommon.Decode(strInfo);

            String strPreviewShowInfo = "";

            // update lock button Label
            // 
            String strLock = (String)hashInfo[m_strFormFontLockKey];

            if (!String.IsNullOrWhiteSpace(strLock))
            {
                if (strLock.Equals("1"))
                {
                    btnFormDesignFontLock.Text = "解锁";

                    strPreviewShowInfo += "字体：锁定\r\n";
                }
                else
                {
                    btnFormDesignFontLock.Text = "锁定";

                    strPreviewShowInfo += "字体：未锁定\r\n";
                }
            }
            else
            {
                btnFormDesignFontLock.Text = "锁定";

                strPreviewShowInfo += "字体：未锁定\r\n";
            }

            strLock = (String)hashInfo[m_strFormParaFmtLockKey];

            if (!String.IsNullOrWhiteSpace(strLock))
            {
                if (strLock.Equals("1"))
                {
                    btnFormDesignParagraphFormatLock.Text = "解锁";
                    strPreviewShowInfo += "段落：锁定\r\n";
                }
                else
                {
                    btnFormDesignParagraphFormatLock.Text = "锁定";
                    strPreviewShowInfo += "段落：未锁定\r\n";
                }
            }
            else
            {
                btnFormDesignParagraphFormatLock.Text = "锁定";
                strPreviewShowInfo += "段落：未锁定\r\n";
            }

            strLock = (String)hashInfo[m_strFormContentLockKey];

            if (!String.IsNullOrWhiteSpace(strLock))
            {
                if (strLock.Equals("1"))
                {
                    btnFormDesignContentLock.Text = "解锁";
                    strPreviewShowInfo += "内容：锁定：" + strCntText + "\r\n";
                }
                else
                {
                    btnFormDesignContentLock.Text = "锁定";
                    strPreviewShowInfo += "内容：未锁定：" + strCntText + "\r\n";
                }
            }
            else
            {
                btnFormDesignContentLock.Text = "锁定";
                strPreviewShowInfo += "内容：未锁定：" + strCntText + "\r\n";
            }


            // 
            // update info text
            rchTextBoxFormDesignInfo.Text = strPreviewShowInfo;

            return;
        }

        private void trvFormDesignMgr_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                btnFormDesignGotoFormItem_Click(null, null);
            }

            return;
        }

        private void trvFormDesignMgr_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            btnFormDesignGotoFormItem_Click(null, null);
            return;
        }


        private void btnFormDesignGotoFormItem_Click(object sender, EventArgs e)
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;// m_ownerAddin.Application.ActiveDocument;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            if (trvFormDesignMgr.SelectedNode == null)
            {
                MessageBox.Show("请选中一项");
                return;
            }

            TreeNode selNode = trvFormDesignMgr.SelectedNode;

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)selNode.Tag;

            if(recItem == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return;
            }

            Word.ContentControl cnt = null;

            try
            {
	            cnt = recItem.contentControl;
	            if (cnt != null)
	            {
	                sel.Start = cnt.Range.Start;
	                sel.End = cnt.Range.End;
	
	                sel.Range.GoTo();
	                doc.ActiveWindow.ScrollIntoView(sel.Range);
	            }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
            }

            return;
        }


        private void btnFormDesignFontLock_Click(object sender, EventArgs e)
        {
            updateFormLockStatus(1);

            return;
        }


        private void btnFormDesignParagraphFormatLock_Click(object sender, EventArgs e)
        {
            updateFormLockStatus(2);

            return;
        }


        private void btnFormDesignContentLock_Click(object sender, EventArgs e)
        {
            updateFormLockStatus(3);

            return;
        }

        private int updateFormLockStatus(int nWhich)
        {
            // 
            String strPas1 = txtFormDesignPaw1.Text;
            String strPas2 = txtFormDesignPaw2.Text;

            if (!strPas1.Equals(strPas2))
            {
                MessageBox.Show("2次密码不相同，请核实");
                return -9;
            }

            
            // 重新提取，重新编码，重新更新
            TreeNode selNode = trvFormDesignMgr.SelectedNode;

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)selNode.Tag;

            if (recItem == null)
            {
                // MessageBox.Show("NEVER SEE IT");
                return -1;
            }

            Word.ContentControl newCnt = null;
            Boolean bFontLock = false, bParaFmtLock = false, bContentLock = false;
            int nRet = 0;

            try
            {
                newCnt = recItem.contentControl;
                //if (newCnt != null)
                //{
                //    newCnt.Title = strName;
                //}
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
                return -2;
            }
            finally
            {
            }

            String strPas = strPas1;
            String strTmp = ClassEncryptUtils.MD5Encrypt(strPas1);
            String strMD5Pas = strTmp.ToUpper();

            String strCntText = "";

            if (newCnt != null)
            {
                strCntText = newCnt.Range.Text;

                // release
                String strInfo = newCnt.PlaceholderText.Value;
                Hashtable hashInfo = ClassOfficeCommon.Decode(strInfo);

                // String strInfo = m_strFormKey + "[" + m_strFormNameKey + ":" + strName + "]" + "[" + m_strFormResKey + ":" + strRes + "]";
                String strName = (String)hashInfo[m_strFormNameKey];
                String strFontLockVal = (String)hashInfo[m_strFormFontLockKey];
                String strParaFmtLockVal = (String)hashInfo[m_strFormParaFmtLockKey];
                String strContentLockVal = (String)hashInfo[m_strFormContentLockKey];
                String strSavedPas = (String)hashInfo[m_strFormPassKey];

                if (!String.IsNullOrWhiteSpace(strFontLockVal))
                {
                    bFontLock = strFontLockVal.Equals("1");
                }

                if (!String.IsNullOrWhiteSpace(strParaFmtLockVal))
                {
                    bParaFmtLock = strParaFmtLockVal.Equals("1");
                }

                if (!String.IsNullOrWhiteSpace(strContentLockVal))
                {
                    bContentLock = strContentLockVal.Equals("1");
                }

                switch (nWhich)
                {
                    case 2:
                        bParaFmtLock = !bParaFmtLock;
                        if (!bParaFmtLock)
                        {
                            if (!strMD5Pas.Equals(strSavedPas))
                            {
                                MessageBox.Show("密码不正确");
                                return -3;
                            }
                        }
                        break;

                    case 3:
                        bContentLock = !bContentLock;
                        if (!bContentLock)
                        {
                            if (!strMD5Pas.Equals(strSavedPas))
                            {
                                MessageBox.Show("密码不正确");
                                return -3;
                            }
                        }
                        //newCnt.LockContents = bContentLock;
                        break;

                    case 1:
                    default:
                        bFontLock = !bFontLock;
                        if (!bFontLock)
                        {
                            if (!strMD5Pas.Equals(strSavedPas))
                            {
                                MessageBox.Show("密码不正确");
                                return -3;
                            }
                        }
                        break;
                }

                String strSlotsInfo = (String)hashInfo[m_strFormResKey];

                if (!String.IsNullOrWhiteSpace(strSlotsInfo))
                {
                    String[] strs = strSlotsInfo.Split(',');
                    int nSlotSn = 0;
                    ArrayList arrSlots = new ArrayList();

                    foreach (String strItem in strs)
                    {
                        if (int.TryParse(strItem, out nSlotSn))
                        {
                            arrSlots.Add(nSlotSn);
                        }
                    }

                    nRet = m_docCustomItemsMgr.release(m_strFormNameKey, arrSlots);
                    if (nRet != 0)
                    {
                        MessageBox.Show("释放存储空间时出错");
                    }
                }

                // re alloc
                //编码FONT、段落
                ClassFont cFnt = new ClassFont();
                cFnt.clone(newCnt.Range.Font);
                String strFntInfo = cFnt.encode2String();

                ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
                cParaFmt.clone(newCnt.Range.ParagraphFormat);
                String strParaFmtInfo = cParaFmt.encode2String();

                strTmp = newCnt.Range.Text.Replace("[","%#LEFT_BRAC^*");
                String strTransTxt = strTmp.Replace("]", "%#RIGHT_BRAC^*");

                String strEncodedCnt = encodeFormContentBody(strTransTxt);

                int nLen = strFntInfo.Length + strParaFmtInfo.Length + strEncodedCnt.Length;
                int nCnt = 0;

                nCnt = m_docCustomItemsMgr.calcSlotsNum(nLen);

                ArrayList arrRes = new ArrayList();

                nRet = m_docCustomItemsMgr.alloc(m_strFormNameKey, nCnt, ref arrRes);

                if (nRet != 0 || arrRes.Count == 0 || arrRes.Count != nCnt)
                {
                    MessageBox.Show("文档已无必须存储空间记录表单项信息");
                    return -3;
                }

                //Save into doc
                String strSavedInfo = strFntInfo + strParaFmtInfo + strEncodedCnt;// 应该内容再编码

                nRet = m_docCustomItemsMgr.saveIntoDoc(m_strFormNameKey, strSavedInfo, arrRes);
                if (nRet != 0)
                {
                    MessageBox.Show("不能保存数据到文档存储空间中");
                    return -4;
                }

                // re encode placeholder text
                String strRes = "";
                int nVal = 0;

                for (int i = 0; i < arrRes.Count - 1; i++)
                {
                    nVal = (int)arrRes[i];
                    strRes += nVal + ",";
                }

                nVal = (int)arrRes[arrRes.Count - 1];
                strRes += nVal;

                strInfo = encodeFormCtrlInfo(strName, strRes, bFontLock, bParaFmtLock, bContentLock, strMD5Pas);

                newCnt.SetPlaceholderText(null, null, strInfo);
                // newCnt.PlaceholderText.Value = strInfo;
            }

            String strPreviewShowInfo = "";

            // 更新按钮text
            if (bFontLock)
            {
                btnFormDesignFontLock.Text = "解锁";
                strPreviewShowInfo += "字体：锁定\r\n";
            }
            else
            {
                btnFormDesignFontLock.Text = "锁定";
                strPreviewShowInfo += "字体：未锁定\r\n";
            }

            if (bParaFmtLock)
            {
                btnFormDesignParagraphFormatLock.Text = "解锁";
                strPreviewShowInfo += "段落：锁定\r\n";
            }
            else
            {
                btnFormDesignParagraphFormatLock.Text = "锁定";
                strPreviewShowInfo += "段落：未锁定\r\n";
            }


            if (bContentLock)
            {
                btnFormDesignContentLock.Text = "解锁";
                strPreviewShowInfo += "内容：锁定：" + strCntText + "\r\n";
            }
            else
            {
                btnFormDesignContentLock.Text = "锁定";
                strPreviewShowInfo += "内容：未锁定：" + strCntText + "\r\n";
            }

            // update info text
            rchTextBoxFormDesignInfo.Text = strPreviewShowInfo;

            //@TODO
            // update preview
            // 

            return 0;
        }


        // on add Form content control
        private int onAddFormCntItem(Word.ContentControl cnt)
        {
            if (m_bStopCallHandler)
            {
                return -100;
            }

            // find corresponding treenode and set significant color(RED) to show
            // 
            String strInfo = "";

            try
            {
                if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
                {
                    return -1;
                }

                strInfo = cnt.PlaceholderText.Value;
            }
            catch (System.Exception ex)
            {
                return -2;
            }
            finally
            {
            }

            Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

            String strFormValue = (String)hashFeatures[m_strFormKey];
            String strName = (String)hashFeatures[m_strFormNameKey];
            String strFormRes = (String)hashFeatures[m_strFormResKey];

            if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                String.IsNullOrWhiteSpace(strFormRes))
            {
                return -3;
            }

            TreeNode[] fndNodes = null;

            String strNewName = strName;

            fndNodes = trvFormDesignMgr.Nodes.Find(strNewName, true);

            int nx = 1;
            while(fndNodes.GetLength(0) != 0)
            {
                strNewName = strName + nx;
                fndNodes = trvFormDesignMgr.Nodes.Find(strNewName, true);
                nx++;
            }

            strName = strNewName;

            cnt.Title = strName;

            //编码FONT、段落
            ClassFont cFnt = new ClassFont();
            cFnt.clone(cnt.Range.Font);
            String strFntInfo = cFnt.encode2String();

            ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
            cParaFmt.clone(cnt.Range.ParagraphFormat);
            String strParaFmtInfo = cParaFmt.encode2String();

            String strTmp = cnt.Range.Text.Replace("[", "%#LEFT_BRAC^*");
            String strTransTxt = strTmp.Replace("]", "%#RIGHT_BRAC^*");

            String strEncodedCnt = encodeFormContentBody(strTransTxt);

            int nLen = strFntInfo.Length + strParaFmtInfo.Length + strEncodedCnt.Length;
            int nCnt = 0;

            nCnt = m_docCustomItemsMgr.calcSlotsNum(nLen);

            ArrayList arrRes = new ArrayList();

            int nRet = m_docCustomItemsMgr.alloc(m_strFormNameKey, nCnt, ref arrRes);

            if (nRet != 0 || arrRes.Count == 0 || arrRes.Count != nCnt)
            {
                MessageBox.Show("文档已无必须存储空间记录表单项信息");
                return -101;
            }

            String strSavedInfo = strFntInfo + strParaFmtInfo + strEncodedCnt;// 应该内容再编码

            nRet = m_docCustomItemsMgr.saveIntoDoc(m_strFormNameKey, strSavedInfo, arrRes);
            if (nRet != 0)
            {
                MessageBox.Show("不能保存数据到文档存储空间中");
                return -102;
            }

            String strRes = "";
            int nVal = 0;

            for (int i = 0; i < arrRes.Count - 1; i++)
            {
                nVal = (int)arrRes[i];
                strRes += nVal + ",";
            }

            nVal = (int)arrRes[arrRes.Count - 1];
            strRes += nVal;

            // String strInfo = m_strFormKey + "[" + m_strFormNameKey + ":" + strName + "]" + "[" + m_strFormResKey + ":" + strRes + "]";
            strInfo = encodeFormCtrlInfo(strName, strRes, false, false, false, "");

            cnt.SetPlaceholderText(null, null, strInfo);
            //newCnt.PlaceholderText.Value = strInfo;

            formTreeNode2ContentControlItem recItem = new formTreeNode2ContentControlItem();
            recItem.contentControl = cnt;

            TreeNode trNd = new TreeNode(strName);
            trNd.Name = strName;
            trNd.Tag = recItem;
            trvFormDesignMgr.Nodes.Add(trNd);
            trvFormDesignMgr.SelectedNode = trNd;

            return 0;
        }


        // on delete Form cnt
        private int onDeleteFormCntItem(Word.ContentControl cnt)
        {
            if (m_bStopCallHandler)
            {
                return -100;
            }

            // find corresponding treenode and set significant color(RED) to show
            // 
            String strInfo = "";

            try
            {
                if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
                {
                    return -1;
                }

                strInfo = cnt.PlaceholderText.Value;
            }
            catch (System.Exception ex)
            {
                return -2;
            }
            finally
            {
            }

            Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

            String strFormValue = (String)hashFeatures[m_strFormKey];
            String strName = (String)hashFeatures[m_strFormNameKey];
            String strFormRes = (String)hashFeatures[m_strFormResKey];

            if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                String.IsNullOrWhiteSpace(strFormRes))
            {
                return -3;
            }

            TreeNode[] fndNodes = trvFormDesignMgr.Nodes.Find(strName, true);

            if (fndNodes.GetLength(0) == 0)
            {
                return -4;
            }

            TreeNode selNode = fndNodes[0];

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)selNode.Tag;

            if (recItem == null)
            {
                MessageBox.Show("NEVER SEE IT");
                return -101;
            }

            try
            {
                cnt = recItem.contentControl;

                //String strInfo = cnt.PlaceholderText.Value;
                //Hashtable hashInfo = ClassOfficeCommon.Decode(strInfo);

                String strSlotsInfo = (String)hashFeatures[m_strFormResKey];

                if (!String.IsNullOrWhiteSpace(strSlotsInfo))
                {
                    String[] strs = strSlotsInfo.Split(',');
                    int nSlotSn = 0;
                    ArrayList arrSlots = new ArrayList();

                    foreach (String strItem in strs)
                    {
                        if (int.TryParse(strItem, out nSlotSn))
                        {
                            arrSlots.Add(nSlotSn);
                        }
                    }

                    int nRet = m_docCustomItemsMgr.release(m_strFormNameKey, arrSlots);
                    if (nRet != 0)
                    {
                        MessageBox.Show("释放存储空间时出错");
                    }
                }
            }
            catch (System.Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
            }

            TreeNode prevNode = selNode.PrevNode;

            selNode.Remove();

            if (prevNode != null)
            {
                trvFormDesignMgr.SelectedNode = prevNode;
            }

            return 0;
        }



        // on enter content control
        private int onEnterFormCntItem(Word.ContentControl cnt)
        {
            // find corresponding treenode and set significant color(RED) to show
            // 
            String strInfo = "";

            try
            {
	            if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
	            {
	                return -1;
	            }
	
	            strInfo = cnt.PlaceholderText.Value;
            }
            catch (System.Exception ex)
            {
                return -2;
            }
            finally
            {
            }

            Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

            String strFormValue = (String)hashFeatures[m_strFormKey];
            String strName = (String)hashFeatures[m_strFormNameKey];
            String strFormRes = (String)hashFeatures[m_strFormResKey];

            if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                String.IsNullOrWhiteSpace(strFormRes))
            {
                return -3;
            }

            TreeNode[] fndNodes = trvFormDesignMgr.Nodes.Find(strName,true);

            if (fndNodes.GetLength(0) != 1)
            {
                return -4;
            }

            if (m_trFormRecordNd != null)
            {
                try
                {
                	m_trFormRecordNd.ForeColor = Color.Black;
                }
                catch (System.Exception ex)
                {
                	
                }
                finally
                {
                }
            }

            m_trFormRecordNd = fndNodes[0];

            fndNodes[0].ForeColor = Color.Red;
            trvFormDesignMgr.SelectedNode = fndNodes[0];

            return 0;
        }



        // on leave content control
        private int onLeaveFormCntItem(Word.ContentControl cnt)
        {
            String strInfo = "";

            try
            {
                if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
                {
                    return -1;
                }

                strInfo = cnt.PlaceholderText.Value;
            }
            catch (System.Exception ex)
            {
                return -2;
            }
            finally
            {
            }

            Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

            String strFormValue = (String)hashFeatures[m_strFormKey];
            String strName = (String)hashFeatures[m_strFormNameKey];
            String strFormRes = (String)hashFeatures[m_strFormResKey];
            
            if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                String.IsNullOrWhiteSpace(strFormRes))
            {
                return -3;
            }

            // find corresponding treenode and restore default color
            // 
            TreeNode[] fndNodes = trvFormDesignMgr.Nodes.Find(strName, true);

            if (fndNodes.GetLength(0) != 1)
            {
                return -4;
            }

            if (m_trFormRecordNd != null)
            {
                try
                {
                    m_trFormRecordNd.ForeColor = Color.Black;
                }
                catch (System.Exception ex)
                {

                }
                finally
                {
                }
            }

            m_trFormRecordNd = null;
            fndNodes[0].ForeColor = Color.Black;

            // restoreFormCntItem(hashFeatures,cnt);

            return 0;
        }


        // on content control ADD
        // 
        // if not created from add function, get info and database in doc
        // new tree node and match it
        // 


        // on content control REMOVE
        // 
        // find corresponding treenode and remove it.
        // release resources in database of doc
        // 

        private int restoreFormCntItem(Hashtable hashFeatures, Word.ContentControl cnt)
        {
            String strFormRes = (String)hashFeatures[m_strFormResKey];
            String strFontLock = (String)hashFeatures[m_strFormFontLockKey];
            String strParaFmtLock = (String)hashFeatures[m_strFormParaFmtLockKey];
            String strContentLock = (String)hashFeatures[m_strFormContentLockKey];

            Boolean bFontLock = false, bParaFmtLock = false, bContentLock = false;

            bFontLock = strFontLock.Equals("1");
            bParaFmtLock = strParaFmtLock.Equals("1");
            bContentLock = strContentLock.Equals("1");

            if (!bFontLock && !bParaFmtLock && !bContentLock)
            {
                return 1;
            }

            // get font/parafmt/content lock info and implement it. 
            // if all is unlock , do nothing
            // 
            String[] strs = strFormRes.Split(',');

            ArrayList arrResSlots = new ArrayList();
            int nSlotSn = 0;
            for (int i = 0; i < strs.GetLength(0); i++)
            {
                if (int.TryParse(strs[i], out nSlotSn))
                {
                    arrResSlots.Add(nSlotSn);
                }
                else
                {
                    return -5;
                }
            }

            String strValue = "";
            int nSlotCnt = m_docCustomItemsMgr.getFromDoc(m_strFormNameKey, arrResSlots, ref strValue);

            if (nSlotCnt != arrResSlots.Count || String.IsNullOrWhiteSpace(strValue))
            {
                return -6;
            }

            Hashtable hashFields = ClassOfficeCommon.Decode(strValue);

            if (bFontLock)
            {

                ClassFont cFnt = new ClassFont();
                cFnt.decodeFromString(hashFields);

                Boolean bRet = cnt.LockContents;

                if (bRet)
                {
                    cnt.LockContents = false;
                }

                cFnt.copy2(cnt.Range.Font);

                cnt.LockContents = bRet;
            }

            if (bParaFmtLock)
            {
                ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
                cParaFmt.decodeFromString(hashFields);
                Boolean bRet = cnt.LockContents;

                if (bRet)
                {
                    cnt.LockContents = false;
                }
                cParaFmt.copy2(cnt.Range.ParagraphFormat);
                cnt.LockContents = bRet;
            }


            if (bContentLock)
            {
                String strContent = (String)hashFields[m_strFormContentBodyKey];

                if (!String.IsNullOrWhiteSpace(strContent))
                {
                    String strTmp = strContent.Replace("%#LEFT_BRAC^*", "[");
                    String strTransTxt = strTmp.Replace("%#RIGHT_BRAC^*", "]");

                    Boolean bRet = cnt.LockContents;

                    if (bRet)
                    {
                        cnt.LockContents = false;
                    }

                    cnt.Range.Text = strTransTxt;

                    cnt.LockContents = bRet;
                }

            }

            return 0;
        }


        private int restoreFormCntItem(Word.ContentControl cnt)
        {
            String strInfo = "";

            try
            {
                if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
                {
                    return -1;
                }

                strInfo = cnt.PlaceholderText.Value;
            }
            catch (System.Exception ex)
            {
                return -2;
            }
            finally
            {
            }

            Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

            String strFormValue = (String)hashFeatures[m_strFormKey];
            String strName = (String)hashFeatures[m_strFormNameKey];
            String strFormRes = (String)hashFeatures[m_strFormResKey];

            if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                String.IsNullOrWhiteSpace(strFormRes))
            {
                return -3;
            }

            int nRet = restoreFormCntItem(hashFeatures, cnt);

            return nRet;

            //String strFontLock = (String)hashFeatures[m_strFormFontLockKey];
            //String strParaFmtLock = (String)hashFeatures[m_strFormParaFmtLockKey];
            //String strContentLock = (String)hashFeatures[m_strFormContentLockKey];

            //Boolean bFontLock = false, bParaFmtLock = false, bContentLock = false;

            //bFontLock = strFontLock.Equals("1");
            //bParaFmtLock = strParaFmtLock.Equals("1");
            //bContentLock = strContentLock.Equals("1");

            //if (!bFontLock && !bParaFmtLock && !bContentLock)
            //{
            //    return 1;
            //}

            //// get font/parafmt/content lock info and implement it. 
            //// if all is unlock , do nothing
            //// 
            //String[] strs = strFormRes.Split(',');

            //ArrayList arrResSlots = new ArrayList();
            //int nSlotSn = 0;
            //for (int i = 0; i < strs.GetLength(0); i++)
            //{
            //    if (int.TryParse(strs[i], out nSlotSn))
            //    {
            //        arrResSlots.Add(nSlotSn);
            //    }
            //    else
            //    {
            //        return -5;
            //    }
            //}

            //String strValue = "";
            //int nSlotCnt = m_docCustomItemsMgr.getFromDoc(m_strFormNameKey, arrResSlots, ref strValue);

            //if (nSlotCnt != arrResSlots.Count || String.IsNullOrWhiteSpace(strValue))
            //{
            //    return -6;
            //}

            //Hashtable hashFields = ClassOfficeCommon.Decode(strValue);

            //if (bFontLock)
            //{

            //    ClassFont cFnt = new ClassFont();
            //    cFnt.decodeFromString(hashFields);

            //    Boolean bRet = cnt.LockContents;

            //    if (bRet)
            //    {
            //        cnt.LockContents = false;
            //    }

            //    cFnt.copy2(cnt.Range.Font);

            //    cnt.LockContents = bRet;
            //}

            //if (bParaFmtLock)
            //{
            //    ClassParagraphFormat cParaFmt = new ClassParagraphFormat();
            //    cParaFmt.decodeFromString(hashFields);
            //    Boolean bRet = cnt.LockContents;

            //    if (bRet)
            //    {
            //        cnt.LockContents = false;
            //    }
            //    cParaFmt.copy2(cnt.Range.ParagraphFormat);
            //    cnt.LockContents = bRet;
            //}


            //if (bContentLock)
            //{
            //    String strContent = (String)hashFields[m_strFormContentBodyKey];

            //    if (!String.IsNullOrWhiteSpace(strContent))
            //    {
            //        cnt.LockContents = false;
            //        cnt.Range.Text = strContent;
            //        cnt.LockContents = true;
            //    }

            //}

            //return 0;
        }


        public int restoreAllFormCntItem()
        {
            Word.Application app = m_addin.Application;
            Word.Document doc = null;// m_ownerAddin.Application.ActiveDocument;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                // MessageBox.Show("无活动文档，不能应用");
                return -1;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            String strInfo = "";

            foreach (Word.ContentControl cnt in doc.ContentControls)
            {
                restoreFormCntItem(cnt);
            }

            return 0;
        }


        public int releaseAllFormResToDoc()
        {
            m_docCustomItemsMgr.releaseAll2Doc();

            return 0;
        }

        private void btnFormDesignRestoreAll_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;

            if (doc.ContentControls.Count == 0)
            {
                MessageBox.Show("没有表单项");
                return;
            }

            DialogResult res = MessageBox.Show("确认恢复所有表单项样式和内容？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                foreach(Word.ContentControl cnt in doc.ContentControls )
                {
                    restoreFormCntItem(cnt);
                }
            }

            return;
        }


        private void btnFormDesignRestore_Click(object sender, EventArgs e)
        {
            // get cnt
            if (trvFormDesignMgr.SelectedNode == null)
            {
                MessageBox.Show("请选中一项");
                return;
            }

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)trvFormDesignMgr.SelectedNode.Tag;

            if (recItem == null)
            {
                return;
            }

            Word.ContentControl cnt = null;

            try
            {
                cnt = recItem.contentControl;

                if (cnt == null)
                {
                    return;
                }
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {

            }

            DialogResult res = MessageBox.Show("确认恢复当前表单项样式和内容？","确认",MessageBoxButtons.YesNo);

            if (res == DialogResult.Yes)
            {
                restoreFormCntItem(cnt);
            }

            return;
        }


        private void btnFormDesignMove_Click(object sender, EventArgs e)
        {
            if (trvFormDesignMgr.SelectedNode == null)
            {
                MessageBox.Show("请选中一项");
                return;
            }

            formTreeNode2ContentControlItem recItem = (formTreeNode2ContentControlItem)trvFormDesignMgr.SelectedNode.Tag;

            if (recItem == null)
            {
                return;
            }

            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;
            Word.Range rgCursor = sel.Range;
            Word.ContentControl cnt = null;

            try
            {
                cnt = recItem.contentControl;

                if (cnt == null)
                {
                    return;
                }
            }
            catch (System.Exception ex)
            {
                return;
            }
            finally
            {

            }

            DialogResult res = MessageBox.Show("确定将选中表单项移到当前位置？", "确认", MessageBoxButtons.YesNo);

            if (res == DialogResult.No)
            {
                return;
            }

            Boolean bLock1 = cnt.LockContentControl;
            Boolean bLock2 = cnt.LockContents;

            cnt.Range.Select(); // 选择
            sel.Cut();           // 剪切

            rgCursor.Select();
            sel.PasteAndFormat(Word.WdRecoveryType.wdPasteDefault); // 复制

            cnt.LockContentControl = bLock1;
            cnt.LockContents = bLock2;

            return;
        }

        private void btnFormDesignReload_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = null;

            try
            {
                doc = app.ActiveDocument;
            }
            catch (System.Exception ex)
            {
                MessageBox.Show("无活动文档，不能应用");
                return;
            }
            finally
            {
            }

            Word.Selection sel = doc.ActiveWindow.Selection;


            m_docCustomItemsMgr.rebuild(doc);

            trvFormDesignMgr.Nodes.Clear();
            String strInfo = "";

            foreach(Word.ContentControl cnt in doc.ContentControls)
            {
                try
                {
                    if (cnt.PlaceholderText == null || cnt.PlaceholderText.Value == null)
                    {
                        // return -1;
                        continue;
                    }

                    strInfo = cnt.PlaceholderText.Value;
                }
                catch (System.Exception ex)
                {
                    // return -2;
                    continue;
                }
                finally
                {
                }

                Hashtable hashFeatures = ClassOfficeCommon.Decode(strInfo);

                String strFormValue = (String)hashFeatures[m_strFormKey];
                String strName = (String)hashFeatures[m_strFormNameKey];
                String strFormRes = (String)hashFeatures[m_strFormResKey];

                if (String.IsNullOrWhiteSpace(strFormValue) || String.IsNullOrWhiteSpace(strName) ||
                    String.IsNullOrWhiteSpace(strFormRes))
                {
                    // return -3;
                    continue;
                }

                if (!strFormValue.Equals(m_strFormValue))
                {
                    continue;
                }


                // decode

                String[] strs = strFormRes.Split(',');

                ArrayList arrResSlots = new ArrayList();
                int nSlotSn = 0;
                Boolean bFail = false;
                for (int i = 0; i < strs.GetLength(0); i++)
                {
                    if (int.TryParse(strs[i], out nSlotSn))
                    {
                        arrResSlots.Add(nSlotSn);
                    }
                    else
                    {
                        // return -5;
                        bFail = true;
                        break;
                    }
                }

                if (bFail)
                {
                    continue;
                }

                // if not form cnt then continue
                String strValue = "";
                int nSlotCnt = m_docCustomItemsMgr.getFromDoc(m_strFormNameKey, arrResSlots, ref strValue);

                if (nSlotCnt != arrResSlots.Count || String.IsNullOrWhiteSpace(strValue))
                {
                    // return -6;
                    continue;
                }

                formTreeNode2ContentControlItem recItem = new formTreeNode2ContentControlItem();
                recItem.contentControl = cnt;

                TreeNode trNd = new TreeNode(strName);
                trNd.Name = strName;

                trNd.Tag = recItem;

                trvFormDesignMgr.Nodes.Add(trNd);
            }

            // selected first one if have
            if (trvFormDesignMgr.Nodes.Count > 0)
            {
                trvFormDesignMgr.SelectedNode = trvFormDesignMgr.Nodes[0];
            }

            return;
        }

        private void btnONTiZuNavFirst_Click(object sender, EventArgs e)
        {
            btnNavFirstField_Click(null,null);

            return;
        }

        private void btnONTiZuNavLast_Click(object sender, EventArgs e)
        {
            btnNavLastField_Click(null, null);
            return;
        }

        private void btnONTiZuNavPrev_Click(object sender, EventArgs e)
        {
            btnNavPrevField_Click(null,null);

            return;
        }

        private void btnONTiZuNavNext_Click(object sender, EventArgs e)
        {
            btnNavNextField_Click(null, null);

            return;
        }

        private void btnShowTiZhuInfo_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;

            if (sel.End <= sel.Start || sel.Fields.Count == 0)
            {
                MessageBox.Show("请选中有题注的区域或段落");
                return;
            }

            String strRet = "";
            int nCnt = 0, nPos = 0;
            String strTiZhuName = "", strTmp = "";

            foreach (Word.Field fld in sel.Fields)
            {
                if (fld.Type == Word.WdFieldType.wdFieldSequence)
                {
                    strTmp = fld.Code.Text;
                    nPos = strTmp.IndexOf("\\");
                    strTiZhuName = strTmp.Substring(0, nPos);
                    strTiZhuName = strTiZhuName.Replace("SEQ", "");
                    strTiZhuName = strTiZhuName.Trim();

                    nCnt++;

                    strRet += "[" + nCnt + "]：" + fld.Result.Text + "，所属题注名:\"" + strTiZhuName + "\"\r\n";
                }
            }


            MessageBox.Show("完成\r\n\r\n" + nCnt + "个题注\r\n" + strRet);

            return;
        }

        private void btnRemoveTiZhu_Click(object sender, EventArgs e)
        {
            Word.Application app = Globals.ThisAddIn.Application;
            Word.Document doc = app.ActiveDocument;
            Word.Selection sel = app.ActiveWindow.Selection;
            
            Word.Range rng = null;
            Boolean bRemoveOnlyBody = true;
            String strRemoveFmt = "";
            String strRemoveBody = "删除段落体（不包括最后回车符），不会改变页面段落相对结构（推荐）";
            String strRemovePara = "删除整个段落（包括最后回车符），会引起下一段落向上移动一行，改变页面段落相对结构";


            rng = sel.Range;

            if (sel.Range.End <= sel.Start)
            {
                DialogResult res = MessageBox.Show("没有任何选择区，将应用于全文档，请确认是否删除文中所有题注？", "确认", MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    return;
                }

                rng = null;
            }
            else
            {
                DialogResult res = MessageBox.Show("确认是否删除所选区内的题注？", "确认", MessageBoxButtons.YesNo);

                if (res == DialogResult.No)
                {
                    return;
                }
            }

            if ((rng == null && doc.Fields.Count == 0) || (rng != null && rng.Fields.Count == 0))
            {
                MessageBox.Show("没有题注");
                return;
            }


            DialogResult ret = MessageBox.Show("请确认删除形式：\r\n\r\n选择\"是\"：" + strRemoveBody + 
                                                "\r\n选择\"否\"：" + strRemovePara + 
                                                "\r\n选择\"取消\"：取消操作",
                                               "确认", MessageBoxButtons.YesNoCancel);

            if (ret == DialogResult.Yes)
            {
                bRemoveOnlyBody = true;
                strRemoveFmt = strRemoveBody;
            }
            else
            {
                bRemoveOnlyBody = false;
                strRemoveFmt = strRemovePara;
            }

            int nRet = m_addin.m_commTools.clearTiZhu(doc, rng, bRemoveOnlyBody);

            if (nRet > 0)
            {
                MessageBox.Show("完成\r\n\r\n清除题注:" + nRet + "个\r\n删除形式：" + strRemoveFmt);
            }
            else
            {
                MessageBox.Show("没有题注");
            }

            return;
        }


    }// 
}

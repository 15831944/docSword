//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from calcExpr.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class calcExprParser : Parser {
	public const int
		T__0=1, T__1=2, OR=3, AND=4, LT=5, GT=6, LEQ=7, GEQ=8, EQ=9, NEQ=10, PLUS=11, 
		MINUS=12, MULT=13, DIV=14, MOD=15, DOT=16, COMMA=17, QUOT=18, EQU=19, 
		COLON=20, OPEN_PAREN=21, CLOSE_PAREN=22, NULL=23, TRUE=24, FALSE=25, FUNC=26, 
		PARAMS=27, CURRENCY_PREFIX=28, VARID=29, STRING=30, INTEGER=31, NUMBER=32, 
		DIGIT=33, WHITESPACE=34;
	public const int
		RULE_parse = 0, RULE_expr = 1, RULE_or_expr = 2, RULE_or_body = 3, RULE_and_expr = 4, 
		RULE_and_body = 5, RULE_rel_expr = 6, RULE_eq_expr = 7, RULE_add_expr = 8, 
		RULE_add_body = 9, RULE_mult_expr = 10, RULE_mult_body = 11, RULE_unary_expr = 12, 
		RULE_atom = 13, RULE_var = 14, RULE_funcname = 15, RULE_params = 16, RULE_unaryparam = 17, 
		RULE_briefparam = 18, RULE_const_var = 19, RULE_const_string = 20, RULE_date = 21, 
		RULE_datename = 22, RULE_time = 23, RULE_currency = 24, RULE_currencyunit = 25;
	public static readonly string[] ruleNames = {
		"parse", "expr", "or_expr", "or_body", "and_expr", "and_body", "rel_expr", 
		"eq_expr", "add_expr", "add_body", "mult_expr", "mult_body", "unary_expr", 
		"atom", "var", "funcname", "params", "unaryparam", "briefparam", "const_var", 
		"const_string", "date", "datename", "time", "currency", "currencyunit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'AM'", "'PM'", "'||'", "'&&'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'.'", "','", "'\"'", "'='", 
		"':'", "'('", "')'", "'null'", "'true'", "'false'", "'FUNC'", "'PARAMS'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "OR", "AND", "LT", "GT", "LEQ", "GEQ", "EQ", "NEQ", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "DOT", "COMMA", "QUOT", "EQU", 
		"COLON", "OPEN_PAREN", "CLOSE_PAREN", "NULL", "TRUE", "FALSE", "FUNC", 
		"PARAMS", "CURRENCY_PREFIX", "VARID", "STRING", "INTEGER", "NUMBER", "DIGIT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calcExpr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public calcExprParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode EQU() { return GetToken(calcExprParser.EQU, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(EQU);
			State = 53; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; or_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_exprContext : ParserRuleContext {
		public And_exprContext left;
		public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		public Or_bodyContext[] or_body() {
			return GetRuleContexts<Or_bodyContext>();
		}
		public Or_bodyContext or_body(int i) {
			return GetRuleContext<Or_bodyContext>(i);
		}
		public Or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterOr_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitOr_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_exprContext or_expr() {
		Or_exprContext _localctx = new Or_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_or_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; _localctx.left = and_expr();
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OR) {
				{
				{
				State = 58; or_body();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_bodyContext : ParserRuleContext {
		public IToken op;
		public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		public ITerminalNode OR() { return GetToken(calcExprParser.OR, 0); }
		public Or_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterOr_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitOr_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_bodyContext or_body() {
		Or_bodyContext _localctx = new Or_bodyContext(Context, State);
		EnterRule(_localctx, 6, RULE_or_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; _localctx.op = Match(OR);
			State = 65; and_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		public Rel_exprContext left;
		public Rel_exprContext rel_expr() {
			return GetRuleContext<Rel_exprContext>(0);
		}
		public And_bodyContext[] and_body() {
			return GetRuleContexts<And_bodyContext>();
		}
		public And_bodyContext and_body(int i) {
			return GetRuleContext<And_bodyContext>(i);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		And_exprContext _localctx = new And_exprContext(Context, State);
		EnterRule(_localctx, 8, RULE_and_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; _localctx.left = rel_expr();
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AND) {
				{
				{
				State = 68; and_body();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_bodyContext : ParserRuleContext {
		public IToken op;
		public Rel_exprContext rel_expr() {
			return GetRuleContext<Rel_exprContext>(0);
		}
		public ITerminalNode AND() { return GetToken(calcExprParser.AND, 0); }
		public And_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterAnd_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitAnd_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_bodyContext and_body() {
		And_bodyContext _localctx = new And_bodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_and_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; _localctx.op = Match(AND);
			State = 75; rel_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rel_exprContext : ParserRuleContext {
		public Eq_exprContext left;
		public IToken op;
		public Eq_exprContext[] eq_expr() {
			return GetRuleContexts<Eq_exprContext>();
		}
		public Eq_exprContext eq_expr(int i) {
			return GetRuleContext<Eq_exprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(calcExprParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(calcExprParser.GT, 0); }
		public ITerminalNode LEQ() { return GetToken(calcExprParser.LEQ, 0); }
		public ITerminalNode GEQ() { return GetToken(calcExprParser.GEQ, 0); }
		public Rel_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rel_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterRel_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitRel_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRel_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rel_exprContext rel_expr() {
		Rel_exprContext _localctx = new Rel_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_rel_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; _localctx.left = eq_expr();
			State = 80;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LEQ) | (1L << GEQ))) != 0)) {
				{
				State = 78;
				_localctx.op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << GT) | (1L << LEQ) | (1L << GEQ))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 79; eq_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eq_exprContext : ParserRuleContext {
		public Add_exprContext left;
		public IToken op;
		public Add_exprContext[] add_expr() {
			return GetRuleContexts<Add_exprContext>();
		}
		public Add_exprContext add_expr(int i) {
			return GetRuleContext<Add_exprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(calcExprParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(calcExprParser.NEQ, 0); }
		public Eq_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eq_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterEq_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitEq_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEq_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Eq_exprContext eq_expr() {
		Eq_exprContext _localctx = new Eq_exprContext(Context, State);
		EnterRule(_localctx, 14, RULE_eq_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; _localctx.left = add_expr();
			State = 85;
			_la = TokenStream.La(1);
			if (_la==EQ || _la==NEQ) {
				{
				State = 83;
				_localctx.op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==EQ || _la==NEQ) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 84; add_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_exprContext : ParserRuleContext {
		public Mult_exprContext left;
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public Add_bodyContext[] add_body() {
			return GetRuleContexts<Add_bodyContext>();
		}
		public Add_bodyContext add_body(int i) {
			return GetRuleContext<Add_bodyContext>(i);
		}
		public Add_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterAdd_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitAdd_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_exprContext add_expr() {
		Add_exprContext _localctx = new Add_exprContext(Context, State);
		EnterRule(_localctx, 16, RULE_add_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87; _localctx.left = mult_expr();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 88; add_body();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_bodyContext : ParserRuleContext {
		public IToken op;
		public Mult_exprContext mult_expr() {
			return GetRuleContext<Mult_exprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(calcExprParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calcExprParser.MINUS, 0); }
		public Add_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterAdd_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitAdd_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_bodyContext add_body() {
		Add_bodyContext _localctx = new Add_bodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_add_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_localctx.op = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 95; mult_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_exprContext : ParserRuleContext {
		public Unary_exprContext left;
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public Mult_bodyContext[] mult_body() {
			return GetRuleContexts<Mult_bodyContext>();
		}
		public Mult_bodyContext mult_body(int i) {
			return GetRuleContext<Mult_bodyContext>(i);
		}
		public Mult_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterMult_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitMult_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mult_exprContext mult_expr() {
		Mult_exprContext _localctx = new Mult_exprContext(Context, State);
		EnterRule(_localctx, 20, RULE_mult_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; _localctx.left = unary_expr();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MULT || _la==DIV) {
				{
				{
				State = 98; mult_body();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mult_bodyContext : ParserRuleContext {
		public IToken op;
		public Unary_exprContext unary_expr() {
			return GetRuleContext<Unary_exprContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(calcExprParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(calcExprParser.DIV, 0); }
		public Mult_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterMult_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitMult_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMult_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mult_bodyContext mult_body() {
		Mult_bodyContext _localctx = new Mult_bodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_mult_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_localctx.op = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(_la==MULT || _la==DIV) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 105; unary_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_exprContext : ParserRuleContext {
		public IToken op;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(calcExprParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calcExprParser.MINUS, 0); }
		public Unary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterUnary_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitUnary_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_exprContext unary_expr() {
		Unary_exprContext _localctx = new Unary_exprContext(Context, State);
		EnterRule(_localctx, 24, RULE_unary_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 107;
				_localctx.op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			State = 110; atom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FalseValueContext : AtomContext {
		public ITerminalNode FALSE() { return GetToken(calcExprParser.FALSE, 0); }
		public FalseValueContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterFalseValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitFalseValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstVarContext : AtomContext {
		public Const_varContext const_var() {
			return GetRuleContext<Const_varContext>(0);
		}
		public ConstVarContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : AtomContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public ITerminalNode OPEN_PAREN() { return GetToken(calcExprParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(calcExprParser.CLOSE_PAREN, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public FuncContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueValueContext : AtomContext {
		public ITerminalNode TRUE() { return GetToken(calcExprParser.TRUE, 0); }
		public TrueValueContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterTrueValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitTrueValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : AtomContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public VariableContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullValueContext : AtomContext {
		public ITerminalNode NULL() { return GetToken(calcExprParser.NULL, 0); }
		public NullValueContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterNullValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitNullValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BraceExprContext : AtomContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(calcExprParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(calcExprParser.CLOSE_PAREN, 0); }
		public BraceExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterBraceExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitBraceExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 26, RULE_atom);
		int _la;
		try {
			State = 128;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new FuncContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; funcname();
				State = 113; Match(OPEN_PAREN);
				State = 115;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << OPEN_PAREN) | (1L << NULL) | (1L << TRUE) | (1L << FALSE) | (1L << CURRENCY_PREFIX) | (1L << VARID) | (1L << STRING) | (1L << INTEGER) | (1L << NUMBER) | (1L << DIGIT))) != 0)) {
					{
					State = 114; @params();
					}
				}

				State = 117; Match(CLOSE_PAREN);
				}
				break;
			case 2:
				_localctx = new ConstVarContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; const_var();
				}
				break;
			case 3:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; var();
				}
				break;
			case 4:
				_localctx = new NullValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 121; Match(NULL);
				}
				break;
			case 5:
				_localctx = new TrueValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 122; Match(TRUE);
				}
				break;
			case 6:
				_localctx = new FalseValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; Match(FALSE);
				}
				break;
			case 7:
				_localctx = new BraceExprContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 124; Match(OPEN_PAREN);
				State = 125; expr();
				State = 126; Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public ITerminalNode VARID() { return GetToken(calcExprParser.VARID, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 28, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode VARID() { return GetToken(calcExprParser.VARID, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
	 
		public ParamsContext() { }
		public virtual void CopyFrom(ParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiExprContext : ParamsContext {
		public UnaryparamContext left;
		public UnaryparamContext[] unaryparam() {
			return GetRuleContexts<UnaryparamContext>();
		}
		public UnaryparamContext unaryparam(int i) {
			return GetRuleContext<UnaryparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(calcExprParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(calcExprParser.COMMA, i);
		}
		public MultiExprContext(ParamsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterMultiExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitMultiExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 32, RULE_params);
		int _la;
		try {
			_localctx = new MultiExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; ((MultiExprContext)_localctx).left = unaryparam();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 135; Match(COMMA);
				State = 136; unaryparam();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryparamContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BriefparamContext briefparam() {
			return GetRuleContext<BriefparamContext>(0);
		}
		public UnaryparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterUnaryparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitUnaryparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryparamContext unaryparam() {
		UnaryparamContext _localctx = new UnaryparamContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryparam);
		try {
			State = 144;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; briefparam();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BriefparamContext : ParserRuleContext {
		public BriefparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_briefparam; } }
	 
		public BriefparamContext() { }
		public virtual void CopyFrom(BriefparamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ContinueParamContext : BriefparamContext {
		public IToken sInx;
		public IToken eInx;
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode[] COLON() { return GetTokens(calcExprParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(calcExprParser.COLON, i);
		}
		public ITerminalNode[] INTEGER() { return GetTokens(calcExprParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(calcExprParser.INTEGER, i);
		}
		public ContinueParamContext(BriefparamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterContinueParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitContinueParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BriefparamContext briefparam() {
		BriefparamContext _localctx = new BriefparamContext(Context, State);
		EnterRule(_localctx, 36, RULE_briefparam);
		try {
			_localctx = new ContinueParamContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; var();
			State = 147; Match(COLON);
			State = 148; ((ContinueParamContext)_localctx).sInx = Match(INTEGER);
			State = 149; Match(COLON);
			State = 150; ((ContinueParamContext)_localctx).eInx = Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_varContext : ParserRuleContext {
		public Const_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_var; } }
	 
		public Const_varContext() { }
		public virtual void CopyFrom(Const_varContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstStringContext : Const_varContext {
		public Const_stringContext const_string() {
			return GetRuleContext<Const_stringContext>(0);
		}
		public ConstStringContext(Const_varContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNumberContext : Const_varContext {
		public ITerminalNode NUMBER() { return GetToken(calcExprParser.NUMBER, 0); }
		public ConstNumberContext(Const_varContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstDateContext : Const_varContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public ConstDateContext(Const_varContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstCurrencyContext : Const_varContext {
		public CurrencyContext currency() {
			return GetRuleContext<CurrencyContext>(0);
		}
		public ConstCurrencyContext(Const_varContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstCurrency(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstCurrency(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstTimeContext : Const_varContext {
		public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public ConstTimeContext(Const_varContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConstTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConstTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_varContext const_var() {
		Const_varContext _localctx = new Const_varContext(Context, State);
		EnterRule(_localctx, 38, RULE_const_var);
		try {
			State = 157;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ConstNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152; Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new ConstStringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; const_string();
				}
				break;
			case 3:
				_localctx = new ConstDateContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; date();
				}
				break;
			case 4:
				_localctx = new ConstTimeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155; time();
				}
				break;
			case 5:
				_localctx = new ConstCurrencyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156; currency();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_stringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(calcExprParser.STRING, 0); }
		public Const_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterConst_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitConst_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_stringContext const_string() {
		Const_stringContext _localctx = new Const_stringContext(Context, State);
		EnterRule(_localctx, 40, RULE_const_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(calcExprParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(calcExprParser.DIGIT, i);
		}
		public DatenameContext[] datename() {
			return GetRuleContexts<DatenameContext>();
		}
		public DatenameContext datename(int i) {
			return GetRuleContext<DatenameContext>(i);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(Context, State);
		EnterRule(_localctx, 42, RULE_date);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(DIGIT);
			State = 162; Match(DIGIT);
			State = 164;
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 163; Match(DIGIT);
				}
				break;
			}
			State = 167;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 166; Match(DIGIT);
				}
			}

			State = 170;
			_la = TokenStream.La(1);
			if (_la==VARID) {
				{
				State = 169; datename();
				}
			}

			State = 172; Match(MINUS);
			State = 173; Match(DIGIT);
			State = 175;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 174; Match(DIGIT);
				}
			}

			State = 178;
			_la = TokenStream.La(1);
			if (_la==VARID) {
				{
				State = 177; datename();
				}
			}

			State = 180; Match(MINUS);
			State = 181; Match(DIGIT);
			State = 183;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 182; Match(DIGIT);
				}
			}

			State = 186;
			_la = TokenStream.La(1);
			if (_la==VARID) {
				{
				State = 185; datename();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatenameContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public DatenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datename; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterDatename(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitDatename(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatenameContext datename() {
		DatenameContext _localctx = new DatenameContext(Context, State);
		EnterRule(_localctx, 44, RULE_datename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(calcExprParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(calcExprParser.DIGIT, i);
		}
		public ITerminalNode[] COLON() { return GetTokens(calcExprParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(calcExprParser.COLON, i);
		}
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 46, RULE_time);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190; Match(DIGIT);
			State = 192;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 191; Match(DIGIT);
				}
			}

			State = 194; Match(COLON);
			State = 195; Match(DIGIT);
			State = 197;
			_la = TokenStream.La(1);
			if (_la==DIGIT) {
				{
				State = 196; Match(DIGIT);
				}
			}

			State = 204;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 199; Match(COLON);
				State = 200; Match(DIGIT);
				State = 202;
				_la = TokenStream.La(1);
				if (_la==DIGIT) {
					{
					State = 201; Match(DIGIT);
					}
				}

				}
			}

			State = 207;
			_la = TokenStream.La(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 206;
				_la = TokenStream.La(1);
				if ( !(_la==T__0 || _la==T__1) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyContext : ParserRuleContext {
		public ITerminalNode CURRENCY_PREFIX() { return GetToken(calcExprParser.CURRENCY_PREFIX, 0); }
		public ITerminalNode[] INTEGER() { return GetTokens(calcExprParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(calcExprParser.INTEGER, i);
		}
		public CurrencyunitContext[] currencyunit() {
			return GetRuleContexts<CurrencyunitContext>();
		}
		public CurrencyunitContext currencyunit(int i) {
			return GetRuleContext<CurrencyunitContext>(i);
		}
		public CurrencyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currency; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterCurrency(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitCurrency(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrency(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyContext currency() {
		CurrencyContext _localctx = new CurrencyContext(Context, State);
		EnterRule(_localctx, 48, RULE_currency);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.La(1);
			if (_la==CURRENCY_PREFIX) {
				{
				State = 209; Match(CURRENCY_PREFIX);
				}
			}

			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 212; Match(INTEGER);
				State = 213; currencyunit();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==INTEGER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrencyunitContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CurrencyunitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currencyunit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.EnterCurrencyunit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IcalcExprListener typedListener = listener as IcalcExprListener;
			if (typedListener != null) typedListener.ExitCurrencyunit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcExprVisitor<TResult> typedVisitor = visitor as IcalcExprVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrencyunit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrencyunitContext currencyunit() {
		CurrencyunitContext _localctx = new CurrencyunitContext(Context, State);
		EnterRule(_localctx, 50, RULE_currencyunit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3$\xDF\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\a\x4>\n\x4\f\x4\xE\x4"+
		"\x41\v\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6H\n\x6\f\x6\xE\x6K\v\x6\x3"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\bS\n\b\x3\t\x3\t\x3\t\x5\tX\n\t\x3\n\x3"+
		"\n\a\n\\\n\n\f\n\xE\n_\v\n\x3\v\x3\v\x3\v\x3\f\x3\f\a\f\x66\n\f\f\f\xE"+
		"\fi\v\f\x3\r\x3\r\x3\r\x3\xE\x5\xEo\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF"+
		"\x5\xFv\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\x83\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x12\a\x12\x8C\n\x12\f\x12\xE\x12\x8F\v\x12\x3\x13\x3\x13\x5\x13\x93\n"+
		"\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x5\x15\xA0\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x5\x17"+
		"\xA7\n\x17\x3\x17\x5\x17\xAA\n\x17\x3\x17\x5\x17\xAD\n\x17\x3\x17\x3\x17"+
		"\x3\x17\x5\x17\xB2\n\x17\x3\x17\x5\x17\xB5\n\x17\x3\x17\x3\x17\x3\x17"+
		"\x5\x17\xBA\n\x17\x3\x17\x5\x17\xBD\n\x17\x3\x18\x3\x18\x3\x19\x3\x19"+
		"\x5\x19\xC3\n\x19\x3\x19\x3\x19\x3\x19\x5\x19\xC8\n\x19\x3\x19\x3\x19"+
		"\x3\x19\x5\x19\xCD\n\x19\x5\x19\xCF\n\x19\x3\x19\x5\x19\xD2\n\x19\x3\x1A"+
		"\x5\x1A\xD5\n\x1A\x3\x1A\x3\x1A\x6\x1A\xD9\n\x1A\r\x1A\xE\x1A\xDA\x3\x1B"+
		"\x3\x1B\x3\x1B\x2\x2\x1C\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x2\a\x3\x2\a\n\x3\x2\v\f\x3\x2\r\xE\x3\x2\xF"+
		"\x10\x3\x2\x3\x4\xE6\x2\x36\x3\x2\x2\x2\x4\x39\x3\x2\x2\x2\x6;\x3\x2\x2"+
		"\x2\b\x42\x3\x2\x2\x2\n\x45\x3\x2\x2\x2\fL\x3\x2\x2\x2\xEO\x3\x2\x2\x2"+
		"\x10T\x3\x2\x2\x2\x12Y\x3\x2\x2\x2\x14`\x3\x2\x2\x2\x16\x63\x3\x2\x2\x2"+
		"\x18j\x3\x2\x2\x2\x1An\x3\x2\x2\x2\x1C\x82\x3\x2\x2\x2\x1E\x84\x3\x2\x2"+
		"\x2 \x86\x3\x2\x2\x2\"\x88\x3\x2\x2\x2$\x92\x3\x2\x2\x2&\x94\x3\x2\x2"+
		"\x2(\x9F\x3\x2\x2\x2*\xA1\x3\x2\x2\x2,\xA3\x3\x2\x2\x2.\xBE\x3\x2\x2\x2"+
		"\x30\xC0\x3\x2\x2\x2\x32\xD4\x3\x2\x2\x2\x34\xDC\x3\x2\x2\x2\x36\x37\a"+
		"\x15\x2\x2\x37\x38\x5\x4\x3\x2\x38\x3\x3\x2\x2\x2\x39:\x5\x6\x4\x2:\x5"+
		"\x3\x2\x2\x2;?\x5\n\x6\x2<>\x5\b\x5\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2"+
		"?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\a\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a"+
		"\x5\x2\x2\x43\x44\x5\n\x6\x2\x44\t\x3\x2\x2\x2\x45I\x5\xE\b\x2\x46H\x5"+
		"\f\a\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2J\v"+
		"\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\x6\x2\x2MN\x5\xE\b\x2N\r\x3\x2\x2\x2OR"+
		"\x5\x10\t\x2PQ\t\x2\x2\x2QS\x5\x10\t\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2S\xF"+
		"\x3\x2\x2\x2TW\x5\x12\n\x2UV\t\x3\x2\x2VX\x5\x12\n\x2WU\x3\x2\x2\x2WX"+
		"\x3\x2\x2\x2X\x11\x3\x2\x2\x2Y]\x5\x16\f\x2Z\\\x5\x14\v\x2[Z\x3\x2\x2"+
		"\x2\\_\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\x13\x3\x2\x2\x2_]\x3\x2"+
		"\x2\x2`\x61\t\x4\x2\x2\x61\x62\x5\x16\f\x2\x62\x15\x3\x2\x2\x2\x63g\x5"+
		"\x1A\xE\x2\x64\x66\x5\x18\r\x2\x65\x64\x3\x2\x2\x2\x66i\x3\x2\x2\x2g\x65"+
		"\x3\x2\x2\x2gh\x3\x2\x2\x2h\x17\x3\x2\x2\x2ig\x3\x2\x2\x2jk\t\x5\x2\x2"+
		"kl\x5\x1A\xE\x2l\x19\x3\x2\x2\x2mo\t\x4\x2\x2nm\x3\x2\x2\x2no\x3\x2\x2"+
		"\x2op\x3\x2\x2\x2pq\x5\x1C\xF\x2q\x1B\x3\x2\x2\x2rs\x5 \x11\x2su\a\x17"+
		"\x2\x2tv\x5\"\x12\x2ut\x3\x2\x2\x2uv\x3\x2\x2\x2vw\x3\x2\x2\x2wx\a\x18"+
		"\x2\x2x\x83\x3\x2\x2\x2y\x83\x5(\x15\x2z\x83\x5\x1E\x10\x2{\x83\a\x19"+
		"\x2\x2|\x83\a\x1A\x2\x2}\x83\a\x1B\x2\x2~\x7F\a\x17\x2\x2\x7F\x80\x5\x4"+
		"\x3\x2\x80\x81\a\x18\x2\x2\x81\x83\x3\x2\x2\x2\x82r\x3\x2\x2\x2\x82y\x3"+
		"\x2\x2\x2\x82z\x3\x2\x2\x2\x82{\x3\x2\x2\x2\x82|\x3\x2\x2\x2\x82}\x3\x2"+
		"\x2\x2\x82~\x3\x2\x2\x2\x83\x1D\x3\x2\x2\x2\x84\x85\a\x1F\x2\x2\x85\x1F"+
		"\x3\x2\x2\x2\x86\x87\a\x1F\x2\x2\x87!\x3\x2\x2\x2\x88\x8D\x5$\x13\x2\x89"+
		"\x8A\a\x13\x2\x2\x8A\x8C\x5$\x13\x2\x8B\x89\x3\x2\x2\x2\x8C\x8F\x3\x2"+
		"\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E#\x3\x2\x2\x2\x8F\x8D"+
		"\x3\x2\x2\x2\x90\x93\x5\x4\x3\x2\x91\x93\x5&\x14\x2\x92\x90\x3\x2\x2\x2"+
		"\x92\x91\x3\x2\x2\x2\x93%\x3\x2\x2\x2\x94\x95\x5\x1E\x10\x2\x95\x96\a"+
		"\x16\x2\x2\x96\x97\a!\x2\x2\x97\x98\a\x16\x2\x2\x98\x99\a!\x2\x2\x99\'"+
		"\x3\x2\x2\x2\x9A\xA0\a\"\x2\x2\x9B\xA0\x5*\x16\x2\x9C\xA0\x5,\x17\x2\x9D"+
		"\xA0\x5\x30\x19\x2\x9E\xA0\x5\x32\x1A\x2\x9F\x9A\x3\x2\x2\x2\x9F\x9B\x3"+
		"\x2\x2\x2\x9F\x9C\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\x9E\x3\x2\x2\x2"+
		"\xA0)\x3\x2\x2\x2\xA1\xA2\a \x2\x2\xA2+\x3\x2\x2\x2\xA3\xA4\a#\x2\x2\xA4"+
		"\xA6\a#\x2\x2\xA5\xA7\a#\x2\x2\xA6\xA5\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2"+
		"\xA7\xA9\x3\x2\x2\x2\xA8\xAA\a#\x2\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2"+
		"\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xAD\x5.\x18\x2\xAC\xAB\x3\x2\x2\x2\xAC"+
		"\xAD\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\a\xE\x2\x2\xAF\xB1\a#\x2"+
		"\x2\xB0\xB2\a#\x2\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3"+
		"\x2\x2\x2\xB3\xB5\x5.\x18\x2\xB4\xB3\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5"+
		"\xB6\x3\x2\x2\x2\xB6\xB7\a\xE\x2\x2\xB7\xB9\a#\x2\x2\xB8\xBA\a#\x2\x2"+
		"\xB9\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2\xBB\xBD\x5"+
		".\x18\x2\xBC\xBB\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD-\x3\x2\x2\x2\xBE"+
		"\xBF\x5\x1E\x10\x2\xBF/\x3\x2\x2\x2\xC0\xC2\a#\x2\x2\xC1\xC3\a#\x2\x2"+
		"\xC2\xC1\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\a"+
		"\x16\x2\x2\xC5\xC7\a#\x2\x2\xC6\xC8\a#\x2\x2\xC7\xC6\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xCE\x3\x2\x2\x2\xC9\xCA\a\x16\x2\x2\xCA\xCC\a#\x2\x2"+
		"\xCB\xCD\a#\x2\x2\xCC\xCB\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3\x2"+
		"\x2\x2\xCE\xC9\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0"+
		"\xD2\t\x6\x2\x2\xD1\xD0\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x31\x3\x2"+
		"\x2\x2\xD3\xD5\a\x1E\x2\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5"+
		"\xD8\x3\x2\x2\x2\xD6\xD7\a!\x2\x2\xD7\xD9\x5\x34\x1B\x2\xD8\xD6\x3\x2"+
		"\x2\x2\xD9\xDA\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB"+
		"\x33\x3\x2\x2\x2\xDC\xDD\x5\x1E\x10\x2\xDD\x35\x3\x2\x2\x2\x1C?IRW]gn"+
		"u\x82\x8D\x92\x9F\xA6\xA9\xAC\xB1\xB4\xB9\xBC\xC2\xC7\xCC\xCE\xD1\xD4"+
		"\xDA";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
